ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"mqtt.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.Mqtt_IsLegalUtf8,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	Mqtt_IsLegalUtf8:
  27              	.LFB12:
  28              		.file 1 "./mqtt/source/mqtt.c"
   1:./mqtt/source/mqtt.c **** /*
   2:./mqtt/source/mqtt.c **** base on
   3:./mqtt/source/mqtt.c **** v2.0 2016/4/19
   4:./mqtt/source/mqtt.c ****  */
   5:./mqtt/source/mqtt.c **** #include "mqtt.h"
   6:./mqtt/source/mqtt.c **** #include <stdlib.h>
   7:./mqtt/source/mqtt.c **** #include <string.h>
   8:./mqtt/source/mqtt.c **** #include <assert.h>
   9:./mqtt/source/mqtt.c **** #include <ctype.h>
  10:./mqtt/source/mqtt.c **** #include <stdio.h>
  11:./mqtt/source/mqtt.c **** 
  12:./mqtt/source/mqtt.c **** #define DATA_POINT_TOPIC_PREFIX "$dp"
  13:./mqtt/source/mqtt.c **** #define GET_PRODUCT_TOPIC_PREFIX "$GetProductTopics"
  14:./mqtt/source/mqtt.c **** #define CMD_TOPIC_PREFIX "$creq"
  15:./mqtt/source/mqtt.c **** #define CMD_TOPIC_PREFIX_LEN 5 // strlen(CMD_TOPIC_PREFIX)
  16:./mqtt/source/mqtt.c **** #define RESP_CMD_TOPIC_PREFIX "$crsp/"
  17:./mqtt/source/mqtt.c **** #define RESP_CMD_TOPIC_PREFIX_LEN strlen(RESP_CMD_TOPIC_PREFIX)
  18:./mqtt/source/mqtt.c **** #define FORMAT_TIME_STRING_SIZE 23
  19:./mqtt/source/mqtt.c **** 
  20:./mqtt/source/mqtt.c **** // range of int: (-2147483648  2147483648), and 1 byte for terminating null byte.
  21:./mqtt/source/mqtt.c **** #define MAX_INTBUF_SIZE 12
  22:./mqtt/source/mqtt.c **** #define MAX_DBLBUF_SIZE 320
  23:./mqtt/source/mqtt.c **** 
  24:./mqtt/source/mqtt.c **** #ifdef WIN32
  25:./mqtt/source/mqtt.c **** #define snprintf _snprintf
  26:./mqtt/source/mqtt.c **** #endif
  27:./mqtt/source/mqtt.c **** 
  28:./mqtt/source/mqtt.c **** static const char Mqtt_TrailingBytesForUTF8[256] = {
  29:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  30:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 2


  31:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  32:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  33:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  34:./mqtt/source/mqtt.c ****     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  35:./mqtt/source/mqtt.c ****     1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  36:./mqtt/source/mqtt.c ****     2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
  37:./mqtt/source/mqtt.c **** };
  38:./mqtt/source/mqtt.c **** 
  39:./mqtt/source/mqtt.c **** struct DataPointPktInfo
  40:./mqtt/source/mqtt.c **** {
  41:./mqtt/source/mqtt.c ****     int16_t tag;
  42:./mqtt/source/mqtt.c ****     int16_t subobj_depth;
  43:./mqtt/source/mqtt.c **** };
  44:./mqtt/source/mqtt.c **** 
  45:./mqtt/source/mqtt.c **** static const int16_t DATA_POINT_PKT_TAG = 0xc19c;
  46:./mqtt/source/mqtt.c **** 
  47:./mqtt/source/mqtt.c **** /**
  48:./mqtt/source/mqtt.c ****  * 封装发布确认数据包
  49:./mqtt/source/mqtt.c ****  * @param buf 存储数据包的缓冲区对象
  50:./mqtt/source/mqtt.c ****  * @param pkt_id 被确认的发布数据数据包的ID
  51:./mqtt/source/mqtt.c ****  * @return 成功返回MQTTERR_NOERROR
  52:./mqtt/source/mqtt.c ****  */
  53:./mqtt/source/mqtt.c **** static int Mqtt_PackPubAckPkt(struct MqttBuffer *buf, uint16_t pkt_id);
  54:./mqtt/source/mqtt.c **** /**
  55:./mqtt/source/mqtt.c ****  * 封装已接收数据包
  56:./mqtt/source/mqtt.c ****  * @param buf 存储数据包的缓冲区对象
  57:./mqtt/source/mqtt.c ****  * @param pkt_id 被确认的发布数据(Publish)数据包的ID
  58:./mqtt/source/mqtt.c ****  * @return 成功返回MQTTERR_NOERROR
  59:./mqtt/source/mqtt.c ****  */
  60:./mqtt/source/mqtt.c **** static int Mqtt_PackPubRecPkt(struct MqttBuffer *buf, uint16_t pkt_id);
  61:./mqtt/source/mqtt.c **** /**
  62:./mqtt/source/mqtt.c ****  * 封装发布数据释放数据包
  63:./mqtt/source/mqtt.c ****  * @param buf 存储数据包的缓冲区对象
  64:./mqtt/source/mqtt.c ****  * @param pkt_id 被确认的已接收数据包(PubRec)的ID
  65:./mqtt/source/mqtt.c ****  * @return 成功返回MQTTERR_NOERROR
  66:./mqtt/source/mqtt.c ****  */
  67:./mqtt/source/mqtt.c **** static int Mqtt_PackPubRelPkt(struct MqttBuffer *buf, uint16_t pkt_id);
  68:./mqtt/source/mqtt.c **** /**
  69:./mqtt/source/mqtt.c ****  * 封装发布数据完成数据包
  70:./mqtt/source/mqtt.c ****  * @param buf 存储数据包的缓冲区对象
  71:./mqtt/source/mqtt.c ****  * @param pkt_id 被确认的发布数据释放数据包(PubRel)的ID
  72:./mqtt/source/mqtt.c ****  * @return 成功返回MQTTERR_NOERROR
  73:./mqtt/source/mqtt.c ****  */
  74:./mqtt/source/mqtt.c **** static int Mqtt_PackPubCompPkt(struct MqttBuffer *buf, uint16_t pkt_id);
  75:./mqtt/source/mqtt.c **** 
  76:./mqtt/source/mqtt.c **** uint16_t Mqtt_RB16(const char *v)
  77:./mqtt/source/mqtt.c **** {
  78:./mqtt/source/mqtt.c ****     const uint8_t *uv = (const uint8_t*)v;
  79:./mqtt/source/mqtt.c ****     return (((uint16_t)(uv[0])) << 8) | uv[1];
  80:./mqtt/source/mqtt.c **** }
  81:./mqtt/source/mqtt.c **** 
  82:./mqtt/source/mqtt.c **** uint64_t Mqtt_RB64(const char *v)
  83:./mqtt/source/mqtt.c **** {
  84:./mqtt/source/mqtt.c ****     const uint8_t *uv = (const uint8_t*)v;
  85:./mqtt/source/mqtt.c ****     return ((((uint64_t)(uv[0])) << 56) |
  86:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[1])) << 48) |
  87:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[2])) << 40) |
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 3


  88:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[3])) << 32) |
  89:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[4])) << 24) |
  90:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[5])) << 16) |
  91:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[6])) << 8)  |
  92:./mqtt/source/mqtt.c ****             uv[7]);
  93:./mqtt/source/mqtt.c **** 
  94:./mqtt/source/mqtt.c **** }
  95:./mqtt/source/mqtt.c **** void Mqtt_WB8(uint8_t v, char *out)
  96:./mqtt/source/mqtt.c **** {
  97:./mqtt/source/mqtt.c ****     *out = v;
  98:./mqtt/source/mqtt.c **** }
  99:./mqtt/source/mqtt.c **** 
 100:./mqtt/source/mqtt.c **** void Mqtt_WB16(uint16_t v, char *out)
 101:./mqtt/source/mqtt.c **** {
 102:./mqtt/source/mqtt.c ****     uint8_t *uo = (uint8_t*)out;
 103:./mqtt/source/mqtt.c ****     uo[0] = (uint8_t)(v >> 8);
 104:./mqtt/source/mqtt.c ****     uo[1] = (uint8_t)(v);
 105:./mqtt/source/mqtt.c **** }
 106:./mqtt/source/mqtt.c **** 
 107:./mqtt/source/mqtt.c **** void Mqtt_WB32(uint32_t v, char *out)
 108:./mqtt/source/mqtt.c **** {
 109:./mqtt/source/mqtt.c ****     uint8_t *uo = (uint8_t*)out;
 110:./mqtt/source/mqtt.c ****     uo[0] = (uint8_t)(v >> 24);
 111:./mqtt/source/mqtt.c ****     uo[1] = (uint8_t)(v >> 16);
 112:./mqtt/source/mqtt.c ****     uo[2] = (uint8_t)(v >> 8);
 113:./mqtt/source/mqtt.c ****     uo[3] = (uint8_t)(v);
 114:./mqtt/source/mqtt.c **** }
 115:./mqtt/source/mqtt.c **** 
 116:./mqtt/source/mqtt.c **** int Mqtt_ReadLength(const char *stream, int size, uint32_t *len)
 117:./mqtt/source/mqtt.c **** {
 118:./mqtt/source/mqtt.c ****     int i;
 119:./mqtt/source/mqtt.c ****     const uint8_t *in = (const uint8_t*)stream;
 120:./mqtt/source/mqtt.c ****     uint32_t multiplier = 1;
 121:./mqtt/source/mqtt.c **** 
 122:./mqtt/source/mqtt.c ****     *len = 0;
 123:./mqtt/source/mqtt.c ****     for(i = 0; i < size; ++i) {
 124:./mqtt/source/mqtt.c ****         *len += (in[i] & 0x7f) * multiplier;
 125:./mqtt/source/mqtt.c **** 
 126:./mqtt/source/mqtt.c ****         if(!(in[i] & 0x80)) {
 127:./mqtt/source/mqtt.c ****             return i + 1;
 128:./mqtt/source/mqtt.c ****         }
 129:./mqtt/source/mqtt.c **** 
 130:./mqtt/source/mqtt.c ****         multiplier *= 128;
 131:./mqtt/source/mqtt.c ****         if(multiplier >= 128 * 128 * 128) {
 132:./mqtt/source/mqtt.c ****             return -2; // error, out of range
 133:./mqtt/source/mqtt.c ****         }
 134:./mqtt/source/mqtt.c ****     }
 135:./mqtt/source/mqtt.c **** 
 136:./mqtt/source/mqtt.c ****     return -1; // not complete
 137:./mqtt/source/mqtt.c **** }
 138:./mqtt/source/mqtt.c **** 
 139:./mqtt/source/mqtt.c **** int Mqtt_DumpLength(size_t len, char *buf)
 140:./mqtt/source/mqtt.c **** {
 141:./mqtt/source/mqtt.c ****     int i;
 142:./mqtt/source/mqtt.c ****     for(i = 1; i <= 4; ++i) {
 143:./mqtt/source/mqtt.c ****         *((uint8_t*)buf) = len % 128;
 144:./mqtt/source/mqtt.c ****         len /= 128;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 4


 145:./mqtt/source/mqtt.c ****         if(len > 0) {
 146:./mqtt/source/mqtt.c ****             *buf |= 128;
 147:./mqtt/source/mqtt.c ****             ++buf;
 148:./mqtt/source/mqtt.c ****         }
 149:./mqtt/source/mqtt.c ****         else {
 150:./mqtt/source/mqtt.c ****             return i;
 151:./mqtt/source/mqtt.c ****         }
 152:./mqtt/source/mqtt.c ****     }
 153:./mqtt/source/mqtt.c **** 
 154:./mqtt/source/mqtt.c ****     return -1;
 155:./mqtt/source/mqtt.c **** }
 156:./mqtt/source/mqtt.c **** 
 157:./mqtt/source/mqtt.c **** int Mqtt_AppendLength(struct MqttBuffer *buf, uint32_t len)
 158:./mqtt/source/mqtt.c **** {
 159:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 160:./mqtt/source/mqtt.c ****     uint32_t pkt_len;
 161:./mqtt/source/mqtt.c **** 
 162:./mqtt/source/mqtt.c ****     //assert(fix_head);
 163:./mqtt/source/mqtt.c **** 
 164:./mqtt/source/mqtt.c ****     if(Mqtt_ReadLength(fix_head->payload + 1, 4, &pkt_len) < 0) {
 165:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 166:./mqtt/source/mqtt.c ****     }
 167:./mqtt/source/mqtt.c **** 
 168:./mqtt/source/mqtt.c ****     pkt_len += len;
 169:./mqtt/source/mqtt.c **** 
 170:./mqtt/source/mqtt.c ****     fix_head->len = Mqtt_DumpLength(pkt_len, fix_head->payload + 1) + 1;
 171:./mqtt/source/mqtt.c ****     if(fix_head->len < 2) {
 172:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 173:./mqtt/source/mqtt.c ****     }
 174:./mqtt/source/mqtt.c **** 
 175:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 176:./mqtt/source/mqtt.c **** }
 177:./mqtt/source/mqtt.c **** 
 178:./mqtt/source/mqtt.c **** int Mqtt_EraseLength(struct MqttBuffer *buf, uint32_t len)
 179:./mqtt/source/mqtt.c **** {
 180:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 181:./mqtt/source/mqtt.c ****     uint32_t pkt_len;
 182:./mqtt/source/mqtt.c **** 
 183:./mqtt/source/mqtt.c ****     //assert(fix_head);
 184:./mqtt/source/mqtt.c **** 
 185:./mqtt/source/mqtt.c ****     if(Mqtt_ReadLength(fix_head->payload + 1, 4, &pkt_len) < 0) {
 186:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 187:./mqtt/source/mqtt.c ****     }
 188:./mqtt/source/mqtt.c **** 
 189:./mqtt/source/mqtt.c ****     if(pkt_len < len) {
 190:./mqtt/source/mqtt.c ****         // critical bug
 191:./mqtt/source/mqtt.c ****         return MQTTERR_INTERNAL;
 192:./mqtt/source/mqtt.c ****     }
 193:./mqtt/source/mqtt.c **** 
 194:./mqtt/source/mqtt.c ****     pkt_len -= len;
 195:./mqtt/source/mqtt.c ****     buf->buffered_bytes -= len;
 196:./mqtt/source/mqtt.c **** 
 197:./mqtt/source/mqtt.c ****     fix_head->len = Mqtt_DumpLength(pkt_len, fix_head->payload + 1) + 1;
 198:./mqtt/source/mqtt.c ****     //assert(fix_head->len >= 2);
 199:./mqtt/source/mqtt.c **** 
 200:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 201:./mqtt/source/mqtt.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 5


 202:./mqtt/source/mqtt.c **** 
 203:./mqtt/source/mqtt.c **** void Mqtt_PktWriteString(char **buf, const char *str, uint16_t len)
 204:./mqtt/source/mqtt.c **** {
 205:./mqtt/source/mqtt.c ****     Mqtt_WB16(len, *buf);
 206:./mqtt/source/mqtt.c ****     memcpy(*buf + 2, str, len);
 207:./mqtt/source/mqtt.c ****     *buf += 2 + len;
 208:./mqtt/source/mqtt.c **** }
 209:./mqtt/source/mqtt.c **** 
 210:./mqtt/source/mqtt.c **** int Mqtt_CheckClentIdentifier(const char *id)
 211:./mqtt/source/mqtt.c **** {
 212:./mqtt/source/mqtt.c ****     int len;
 213:./mqtt/source/mqtt.c ****     for(len = 0; '\0' != id[len]; ++len) {
 214:./mqtt/source/mqtt.c ****         if(!isalnum(id[len])) {
 215:./mqtt/source/mqtt.c ****             return -1;
 216:./mqtt/source/mqtt.c ****         }
 217:./mqtt/source/mqtt.c ****     }
 218:./mqtt/source/mqtt.c **** 
 219:./mqtt/source/mqtt.c ****     return len;
 220:./mqtt/source/mqtt.c **** }
 221:./mqtt/source/mqtt.c **** 
 222:./mqtt/source/mqtt.c **** static int Mqtt_IsLegalUtf8(const char *first, int len)
 223:./mqtt/source/mqtt.c **** {
  29              		.loc 1 223 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 224:./mqtt/source/mqtt.c ****     unsigned char bv;
 225:./mqtt/source/mqtt.c ****     const unsigned char *tail = (const unsigned char *)(first + len);
  35              		.loc 1 225 0
  36 0000 4318     		adds	r3, r0, r1
  37              	.LVL1:
 226:./mqtt/source/mqtt.c **** 
 227:./mqtt/source/mqtt.c ****     switch(len) {
  38              		.loc 1 227 0
  39 0002 0139     		subs	r1, r1, #1
  40              	.LVL2:
  41 0004 0329     		cmp	r1, #3
  42 0006 40D8     		bhi	.L13
  43 0008 DFE801F0 		tbb	[pc, r1]
  44              	.L4:
  45 000c 35       		.byte	(.L3-.L4)/2
  46 000d 12       		.byte	(.L14-.L4)/2
  47 000e 0A       		.byte	(.L6-.L4)/2
  48 000f 02       		.byte	(.L7-.L4)/2
  49              		.p2align 1
  50              	.L7:
 228:./mqtt/source/mqtt.c ****     default:
 229:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
 230:./mqtt/source/mqtt.c **** 
 231:./mqtt/source/mqtt.c ****     case 4:
 232:./mqtt/source/mqtt.c ****         bv = *(--tail);
  51              		.loc 1 232 0
  52 0010 5A1E     		subs	r2, r3, #1
  53              	.LVL3:
  54 0012 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 6


  55              	.LVL4:
 233:./mqtt/source/mqtt.c ****         if((bv < 0x80) || (bv > 0xBF)) {
  56              		.loc 1 233 0
  57 0016 83F08003 		eor	r3, r3, #128
  58              	.LVL5:
  59 001a 3F2B     		cmp	r3, #63
  60 001c 38D8     		bhi	.L15
 232:./mqtt/source/mqtt.c ****         if((bv < 0x80) || (bv > 0xBF)) {
  61              		.loc 1 232 0
  62 001e 1346     		mov	r3, r2
  63              	.LVL6:
  64              	.L6:
 234:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 235:./mqtt/source/mqtt.c ****         }
 236:./mqtt/source/mqtt.c ****     case 3:
 237:./mqtt/source/mqtt.c ****         bv = *(--tail);
  65              		.loc 1 237 0
  66 0020 5A1E     		subs	r2, r3, #1
  67              	.LVL7:
  68 0022 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
  69              	.LVL8:
 238:./mqtt/source/mqtt.c ****         if((bv < 0x80) || (bv > 0xBF)) {
  70              		.loc 1 238 0
  71 0026 83F08003 		eor	r3, r3, #128
  72              	.LVL9:
  73 002a 3F2B     		cmp	r3, #63
  74 002c 01D9     		bls	.L5
  75 002e 32E0     		b	.L16
  76              	.LVL10:
  77              	.L14:
 225:./mqtt/source/mqtt.c **** 
  78              		.loc 1 225 0
  79 0030 1A46     		mov	r2, r3
  80              	.LVL11:
  81              	.L5:
 239:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 240:./mqtt/source/mqtt.c ****         }
 241:./mqtt/source/mqtt.c ****     case 2:
 242:./mqtt/source/mqtt.c ****         bv = *(--tail);
  82              		.loc 1 242 0
  83 0032 12F8012C 		ldrb	r2, [r2, #-1]	@ zero_extendqisi2
  84              	.LVL12:
 243:./mqtt/source/mqtt.c ****         if((bv < 0x80) || (bv > 0xBF)) {
  85              		.loc 1 243 0
  86 0036 82F08003 		eor	r3, r2, #128
  87 003a 3F2B     		cmp	r3, #63
  88 003c 2ED8     		bhi	.L17
 244:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 245:./mqtt/source/mqtt.c ****         }
 246:./mqtt/source/mqtt.c ****         switch(*(const unsigned char *)first) {
  89              		.loc 1 246 0
  90 003e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  91 0040 E03B     		subs	r3, r3, #224
  92 0042 142B     		cmp	r3, #20
  93 0044 17D8     		bhi	.L3
  94 0046 DFE803F0 		tbb	[pc, r3]
  95              	.LVL13:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 7


  96              	.L9:
  97 004a 0B       		.byte	(.L8-.L9)/2
  98 004b 16       		.byte	(.L3-.L9)/2
  99 004c 16       		.byte	(.L3-.L9)/2
 100 004d 16       		.byte	(.L3-.L9)/2
 101 004e 16       		.byte	(.L3-.L9)/2
 102 004f 16       		.byte	(.L3-.L9)/2
 103 0050 16       		.byte	(.L3-.L9)/2
 104 0051 16       		.byte	(.L3-.L9)/2
 105 0052 16       		.byte	(.L3-.L9)/2
 106 0053 16       		.byte	(.L3-.L9)/2
 107 0054 16       		.byte	(.L3-.L9)/2
 108 0055 16       		.byte	(.L3-.L9)/2
 109 0056 16       		.byte	(.L3-.L9)/2
 110 0057 0E       		.byte	(.L10-.L9)/2
 111 0058 16       		.byte	(.L3-.L9)/2
 112 0059 16       		.byte	(.L3-.L9)/2
 113 005a 11       		.byte	(.L11-.L9)/2
 114 005b 16       		.byte	(.L3-.L9)/2
 115 005c 16       		.byte	(.L3-.L9)/2
 116 005d 16       		.byte	(.L3-.L9)/2
 117 005e 14       		.byte	(.L12-.L9)/2
 118 005f 00       		.p2align 1
 119              	.L8:
 247:./mqtt/source/mqtt.c ****         case 0xE0:
 248:./mqtt/source/mqtt.c ****             if(bv < 0xA0) {
 120              		.loc 1 248 0
 121 0060 9F2A     		cmp	r2, #159
 122 0062 08D8     		bhi	.L3
 123 0064 1DE0     		b	.L18
 124              	.L10:
 249:./mqtt/source/mqtt.c ****                 return MQTTERR_NOT_UTF8;
 250:./mqtt/source/mqtt.c ****             }
 251:./mqtt/source/mqtt.c ****             break;
 252:./mqtt/source/mqtt.c **** 
 253:./mqtt/source/mqtt.c ****         case 0xED:
 254:./mqtt/source/mqtt.c ****             if(bv > 0x9F) {
 125              		.loc 1 254 0
 126 0066 9F2A     		cmp	r2, #159
 127 0068 05D9     		bls	.L3
 128 006a 1DE0     		b	.L19
 129              	.L11:
 255:./mqtt/source/mqtt.c ****                 return MQTTERR_NOT_UTF8;
 256:./mqtt/source/mqtt.c ****             }
 257:./mqtt/source/mqtt.c ****             break;
 258:./mqtt/source/mqtt.c **** 
 259:./mqtt/source/mqtt.c ****         case 0xF0:
 260:./mqtt/source/mqtt.c ****             if(bv < 0x90) {
 130              		.loc 1 260 0
 131 006c 8F2A     		cmp	r2, #143
 132 006e 02D8     		bhi	.L3
 133 0070 1DE0     		b	.L20
 134              	.L12:
 261:./mqtt/source/mqtt.c ****                 return MQTTERR_NOT_UTF8;
 262:./mqtt/source/mqtt.c ****             }
 263:./mqtt/source/mqtt.c ****             break;
 264:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 8


 265:./mqtt/source/mqtt.c ****         case 0xF4:
 266:./mqtt/source/mqtt.c ****             if(bv > 0x8F) {
 135              		.loc 1 266 0
 136 0072 8F2A     		cmp	r2, #143
 137 0074 1ED8     		bhi	.L21
 138              	.LVL14:
 139              	.L3:
 267:./mqtt/source/mqtt.c ****                 return MQTTERR_NOT_UTF8;
 268:./mqtt/source/mqtt.c ****             }
 269:./mqtt/source/mqtt.c ****             break;
 270:./mqtt/source/mqtt.c **** 
 271:./mqtt/source/mqtt.c ****         default:
 272:./mqtt/source/mqtt.c ****             break;
 273:./mqtt/source/mqtt.c ****         }
 274:./mqtt/source/mqtt.c ****     case 1:
 275:./mqtt/source/mqtt.c ****         if(((*first >= 0x80) && (*first < 0xC2)) || (*first > 0xF4)) {
 140              		.loc 1 275 0
 141 0076 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 142 0078 83F08002 		eor	r2, r3, #128
 143 007c 412A     		cmp	r2, #65
 144 007e 1CD9     		bls	.L22
 145              		.loc 1 275 0 is_stmt 0 discriminator 1
 146 0080 F42B     		cmp	r3, #244
 147 0082 1DD9     		bls	.L23
 276:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 148              		.loc 1 276 0 is_stmt 1
 149 0084 6FF00500 		mvn	r0, #5
 150              	.LVL15:
 151 0088 7047     		bx	lr
 152              	.LVL16:
 153              	.L13:
 229:./mqtt/source/mqtt.c **** 
 154              		.loc 1 229 0
 155 008a 6FF00500 		mvn	r0, #5
 156              	.LVL17:
 157 008e 7047     		bx	lr
 158              	.LVL18:
 159              	.L15:
 234:./mqtt/source/mqtt.c ****         }
 160              		.loc 1 234 0
 161 0090 6FF00500 		mvn	r0, #5
 162              	.LVL19:
 163 0094 7047     		bx	lr
 164              	.LVL20:
 165              	.L16:
 239:./mqtt/source/mqtt.c ****         }
 166              		.loc 1 239 0
 167 0096 6FF00500 		mvn	r0, #5
 168              	.LVL21:
 169 009a 7047     		bx	lr
 170              	.LVL22:
 171              	.L17:
 244:./mqtt/source/mqtt.c ****         }
 172              		.loc 1 244 0
 173 009c 6FF00500 		mvn	r0, #5
 174              	.LVL23:
 175 00a0 7047     		bx	lr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 9


 176              	.LVL24:
 177              	.L18:
 249:./mqtt/source/mqtt.c ****             }
 178              		.loc 1 249 0
 179 00a2 6FF00500 		mvn	r0, #5
 180              	.LVL25:
 181 00a6 7047     		bx	lr
 182              	.LVL26:
 183              	.L19:
 255:./mqtt/source/mqtt.c ****             }
 184              		.loc 1 255 0
 185 00a8 6FF00500 		mvn	r0, #5
 186              	.LVL27:
 187 00ac 7047     		bx	lr
 188              	.LVL28:
 189              	.L20:
 261:./mqtt/source/mqtt.c ****             }
 190              		.loc 1 261 0
 191 00ae 6FF00500 		mvn	r0, #5
 192              	.LVL29:
 193 00b2 7047     		bx	lr
 194              	.LVL30:
 195              	.L21:
 267:./mqtt/source/mqtt.c ****             }
 196              		.loc 1 267 0
 197 00b4 6FF00500 		mvn	r0, #5
 198              	.LVL31:
 199 00b8 7047     		bx	lr
 200              	.LVL32:
 201              	.L22:
 202              		.loc 1 276 0
 203 00ba 6FF00500 		mvn	r0, #5
 204              	.LVL33:
 205 00be 7047     		bx	lr
 206              	.LVL34:
 207              	.L23:
 277:./mqtt/source/mqtt.c ****         }
 278:./mqtt/source/mqtt.c ****     }
 279:./mqtt/source/mqtt.c **** 
 280:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 208              		.loc 1 280 0
 209 00c0 0020     		movs	r0, #0
 210              	.LVL35:
 281:./mqtt/source/mqtt.c **** }
 211              		.loc 1 281 0
 212 00c2 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE12:
 216              		.section	.text.Mqtt_CheckUtf8,"ax",%progbits
 217              		.align	2
 218              		.thumb
 219              		.thumb_func
 221              	Mqtt_CheckUtf8:
 222              	.LFB13:
 282:./mqtt/source/mqtt.c **** 
 283:./mqtt/source/mqtt.c **** static int Mqtt_CheckUtf8(const char *str, size_t len)
 284:./mqtt/source/mqtt.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 10


 223              		.loc 1 284 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL36:
 228 0000 70B5     		push	{r4, r5, r6, lr}
 229              	.LCFI0:
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 4, -16
 232              		.cfi_offset 5, -12
 233              		.cfi_offset 6, -8
 234              		.cfi_offset 14, -4
 235 0002 0546     		mov	r5, r0
 236 0004 0E46     		mov	r6, r1
 237              	.LVL37:
 285:./mqtt/source/mqtt.c ****     size_t i;
 286:./mqtt/source/mqtt.c **** 
 287:./mqtt/source/mqtt.c ****     for(i = 0; i < len;) {
 238              		.loc 1 287 0
 239 0006 0024     		movs	r4, #0
 240 0008 0DE0     		b	.L25
 241              	.LVL38:
 242              	.L28:
 243              	.LBB2:
 288:./mqtt/source/mqtt.c ****         int ret;
 289:./mqtt/source/mqtt.c ****         char utf8_char_len = Mqtt_TrailingBytesForUTF8[(uint8_t)str[i]] + 1;
 244              		.loc 1 289 0
 245 000a 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 246 000c 0A4A     		ldr	r2, .L32
 247 000e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 248 0010 0131     		adds	r1, r1, #1
 249 0012 C9B2     		uxtb	r1, r1
 250              	.LVL39:
 290:./mqtt/source/mqtt.c **** 
 291:./mqtt/source/mqtt.c ****         if(i + utf8_char_len > len) {
 251              		.loc 1 291 0
 252 0014 0C44     		add	r4, r4, r1
 253              	.LVL40:
 254 0016 A642     		cmp	r6, r4
 255 0018 09D3     		bcc	.L29
 292:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 293:./mqtt/source/mqtt.c ****         }
 294:./mqtt/source/mqtt.c **** 
 295:./mqtt/source/mqtt.c ****         ret = Mqtt_IsLegalUtf8(str, utf8_char_len);
 256              		.loc 1 295 0
 257 001a 2846     		mov	r0, r5
 258 001c FFF7FEFF 		bl	Mqtt_IsLegalUtf8
 259              	.LVL41:
 296:./mqtt/source/mqtt.c ****         if(ret != MQTTERR_NOERROR) {
 260              		.loc 1 296 0
 261 0020 40B9     		cbnz	r0, .L30
 262              	.LVL42:
 297:./mqtt/source/mqtt.c ****             return ret;
 298:./mqtt/source/mqtt.c ****         }
 299:./mqtt/source/mqtt.c **** 
 300:./mqtt/source/mqtt.c ****         i += utf8_char_len;
 301:./mqtt/source/mqtt.c ****         if('\0'== str[i]) {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 11


 263              		.loc 1 301 0
 264 0022 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 265 0024 0BB1     		cbz	r3, .L27
 266              	.LVL43:
 267              	.L25:
 268              	.LBE2:
 287:./mqtt/source/mqtt.c ****         int ret;
 269              		.loc 1 287 0 discriminator 1
 270 0026 B442     		cmp	r4, r6
 271 0028 EFD3     		bcc	.L28
 272              	.L27:
 302:./mqtt/source/mqtt.c ****             break;
 303:./mqtt/source/mqtt.c ****         }
 304:./mqtt/source/mqtt.c ****     }
 305:./mqtt/source/mqtt.c **** 
 306:./mqtt/source/mqtt.c ****     return (int)i;
 273              		.loc 1 306 0
 274 002a 2046     		mov	r0, r4
 275 002c 70BD     		pop	{r4, r5, r6, pc}
 276              	.LVL44:
 277              	.L29:
 278              	.LBB3:
 292:./mqtt/source/mqtt.c ****         }
 279              		.loc 1 292 0
 280 002e 6FF00500 		mvn	r0, #5
 281 0032 70BD     		pop	{r4, r5, r6, pc}
 282              	.LVL45:
 283              	.L30:
 284              	.LBE3:
 307:./mqtt/source/mqtt.c **** }
 285              		.loc 1 307 0
 286 0034 70BD     		pop	{r4, r5, r6, pc}
 287              	.LVL46:
 288              	.L33:
 289 0036 00BF     		.align	2
 290              	.L32:
 291 0038 00000000 		.word	.LANCHOR0
 292              		.cfi_endproc
 293              	.LFE13:
 295              		.section	.text.Mqtt_RB16,"ax",%progbits
 296              		.align	2
 297              		.global	Mqtt_RB16
 298              		.thumb
 299              		.thumb_func
 301              	Mqtt_RB16:
 302              	.LFB1:
  77:./mqtt/source/mqtt.c ****     const uint8_t *uv = (const uint8_t*)v;
 303              		.loc 1 77 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL47:
  79:./mqtt/source/mqtt.c **** }
 309              		.loc 1 79 0
 310 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 311 0002 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 12


 312              	.LVL48:
  80:./mqtt/source/mqtt.c **** 
 313              		.loc 1 80 0
 314 0004 40EA0220 		orr	r0, r0, r2, lsl #8
 315 0008 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE1:
 319              		.section	.text.Mqtt_RB64,"ax",%progbits
 320              		.align	2
 321              		.global	Mqtt_RB64
 322              		.thumb
 323              		.thumb_func
 325              	Mqtt_RB64:
 326              	.LFB2:
  83:./mqtt/source/mqtt.c ****     const uint8_t *uv = (const uint8_t*)v;
 327              		.loc 1 83 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332              	.LVL49:
 333 0000 2DE9F003 		push	{r4, r5, r6, r7, r8, r9}
 334              	.LCFI1:
 335              		.cfi_def_cfa_offset 24
 336              		.cfi_offset 4, -24
 337              		.cfi_offset 5, -20
 338              		.cfi_offset 6, -16
 339              		.cfi_offset 7, -12
 340              		.cfi_offset 8, -8
 341              		.cfi_offset 9, -4
 342              	.LVL50:
  85:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[1])) << 48) |
 343              		.loc 1 85 0
 344 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 345 0006 0024     		movs	r4, #0
 346 0008 1506     		lsls	r5, r2, #24
  86:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[2])) << 40) |
 347              		.loc 1 86 0
 348 000a 4678     		ldrb	r6, [r0, #1]	@ zero_extendqisi2
 349 000c 3304     		lsls	r3, r6, #16
 350 000e 2246     		mov	r2, r4
  85:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[1])) << 48) |
 351              		.loc 1 85 0
 352 0010 2243     		orrs	r2, r2, r4
 353 0012 2B43     		orrs	r3, r3, r5
  87:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[3])) << 32) |
 354              		.loc 1 87 0
 355 0014 90F80280 		ldrb	r8, [r0, #2]	@ zero_extendqisi2
 356 0018 4FEA0827 		lsl	r7, r8, #8
  86:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[2])) << 40) |
 357              		.loc 1 86 0
 358 001c 2243     		orrs	r2, r2, r4
 359 001e 3B43     		orrs	r3, r3, r7
  88:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[4])) << 24) |
 360              		.loc 1 88 0
 361 0020 C778     		ldrb	r7, [r0, #3]	@ zero_extendqisi2
  87:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[3])) << 32) |
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 13


 362              		.loc 1 87 0
 363 0022 2243     		orrs	r2, r2, r4
 364 0024 3B43     		orrs	r3, r3, r7
  89:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[5])) << 16) |
 365              		.loc 1 89 0
 366 0026 0679     		ldrb	r6, [r0, #4]	@ zero_extendqisi2
 367 0028 0025     		movs	r5, #0
 368 002a 3406     		lsls	r4, r6, #24
  88:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[4])) << 24) |
 369              		.loc 1 88 0
 370 002c 2243     		orrs	r2, r2, r4
 371 002e 2B43     		orrs	r3, r3, r5
  90:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[6])) << 8)  |
 372              		.loc 1 90 0
 373 0030 4679     		ldrb	r6, [r0, #5]	@ zero_extendqisi2
 374 0032 0025     		movs	r5, #0
 375 0034 3404     		lsls	r4, r6, #16
  89:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[5])) << 16) |
 376              		.loc 1 89 0
 377 0036 2243     		orrs	r2, r2, r4
 378 0038 2B43     		orrs	r3, r3, r5
  91:./mqtt/source/mqtt.c ****             uv[7]);
 379              		.loc 1 91 0
 380 003a 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 381 003c 0025     		movs	r5, #0
 382 003e 3402     		lsls	r4, r6, #8
  90:./mqtt/source/mqtt.c ****             (((uint64_t)(uv[6])) << 8)  |
 383              		.loc 1 90 0
 384 0040 2243     		orrs	r2, r2, r4
 385 0042 2B43     		orrs	r3, r3, r5
  91:./mqtt/source/mqtt.c ****             uv[7]);
 386              		.loc 1 91 0
 387 0044 C079     		ldrb	r0, [r0, #7]	@ zero_extendqisi2
 388              	.LVL51:
 389 0046 0021     		movs	r1, #0
  94:./mqtt/source/mqtt.c **** void Mqtt_WB8(uint8_t v, char *out)
 390              		.loc 1 94 0
 391 0048 1043     		orrs	r0, r0, r2
 392 004a 1943     		orrs	r1, r1, r3
 393 004c BDE8F003 		pop	{r4, r5, r6, r7, r8, r9}
 394              	.LCFI2:
 395              		.cfi_restore 9
 396              		.cfi_restore 8
 397              		.cfi_restore 7
 398              		.cfi_restore 6
 399              		.cfi_restore 5
 400              		.cfi_restore 4
 401              		.cfi_def_cfa_offset 0
 402 0050 7047     		bx	lr
 403              		.cfi_endproc
 404              	.LFE2:
 406 0052 00BF     		.section	.text.Mqtt_WB8,"ax",%progbits
 407              		.align	2
 408              		.global	Mqtt_WB8
 409              		.thumb
 410              		.thumb_func
 412              	Mqtt_WB8:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 14


 413              	.LFB3:
  96:./mqtt/source/mqtt.c ****     *out = v;
 414              		.loc 1 96 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419              	.LVL52:
  97:./mqtt/source/mqtt.c **** }
 420              		.loc 1 97 0
 421 0000 0870     		strb	r0, [r1]
 422 0002 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE3:
 426              		.section	.text.Mqtt_WB16,"ax",%progbits
 427              		.align	2
 428              		.global	Mqtt_WB16
 429              		.thumb
 430              		.thumb_func
 432              	Mqtt_WB16:
 433              	.LFB4:
 101:./mqtt/source/mqtt.c ****     uint8_t *uo = (uint8_t*)out;
 434              		.loc 1 101 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL53:
 103:./mqtt/source/mqtt.c ****     uo[1] = (uint8_t)(v);
 440              		.loc 1 103 0
 441 0000 030A     		lsrs	r3, r0, #8
 442 0002 0B70     		strb	r3, [r1]
 104:./mqtt/source/mqtt.c **** }
 443              		.loc 1 104 0
 444 0004 4870     		strb	r0, [r1, #1]
 445 0006 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE4:
 449              		.section	.text.Mqtt_PackPubRelPkt,"ax",%progbits
 450              		.align	2
 451              		.thumb
 452              		.thumb_func
 454              	Mqtt_PackPubRelPkt:
 455              	.LFB36:
 308:./mqtt/source/mqtt.c **** 
 309:./mqtt/source/mqtt.c **** struct DataPointPktInfo *Mqtt_GetDataPointPktInfo(struct MqttBuffer *buf)
 310:./mqtt/source/mqtt.c **** {
 311:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 312:./mqtt/source/mqtt.c ****     struct MqttExtent *first_payload;
 313:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
 314:./mqtt/source/mqtt.c **** 
 315:./mqtt/source/mqtt.c ****     if(!fix_head) {
 316:./mqtt/source/mqtt.c ****         return NULL;
 317:./mqtt/source/mqtt.c ****     }
 318:./mqtt/source/mqtt.c **** 
 319:./mqtt/source/mqtt.c ****     if(MQTT_PKT_PUBLISH != (((uint8_t)(fix_head->payload[0])) >> 4)){
 320:./mqtt/source/mqtt.c ****         return NULL;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 15


 321:./mqtt/source/mqtt.c ****     }
 322:./mqtt/source/mqtt.c **** 
 323:./mqtt/source/mqtt.c ****     if(!(fix_head->next) || !(first_payload = fix_head->next->next) ||
 324:./mqtt/source/mqtt.c ****        (MQTT_DPTYPE_TRIPLE != first_payload->payload[0])) {
 325:./mqtt/source/mqtt.c ****         return NULL;
 326:./mqtt/source/mqtt.c ****     }
 327:./mqtt/source/mqtt.c **** 
 328:./mqtt/source/mqtt.c ****     if(first_payload->len != 2 + sizeof(struct DataPointPktInfo)) {
 329:./mqtt/source/mqtt.c ****         return NULL;
 330:./mqtt/source/mqtt.c ****     }
 331:./mqtt/source/mqtt.c **** 
 332:./mqtt/source/mqtt.c ****     info = (struct DataPointPktInfo*)(first_payload->payload + 2);
 333:./mqtt/source/mqtt.c ****     if(DATA_POINT_PKT_TAG != info->tag) {
 334:./mqtt/source/mqtt.c ****         return NULL;
 335:./mqtt/source/mqtt.c ****     }
 336:./mqtt/source/mqtt.c **** 
 337:./mqtt/source/mqtt.c ****     return info;
 338:./mqtt/source/mqtt.c **** }
 339:./mqtt/source/mqtt.c **** 
 340:./mqtt/source/mqtt.c **** int Mqtt_HasIllegalCharacter(const char *str, size_t len)
 341:./mqtt/source/mqtt.c **** {
 342:./mqtt/source/mqtt.c ****     // TODO:
 343:./mqtt/source/mqtt.c ****     return 0;
 344:./mqtt/source/mqtt.c **** }
 345:./mqtt/source/mqtt.c **** 
 346:./mqtt/source/mqtt.c **** int Mqtt_FormatTime(int64_t ts, char *out)
 347:./mqtt/source/mqtt.c **** {
 348:./mqtt/source/mqtt.c ****     int64_t millisecond = ts % 1000;
 349:./mqtt/source/mqtt.c ****     struct tm *t;
 350:./mqtt/source/mqtt.c ****     time_t tt = (time_t)(ts) / 1000;
 351:./mqtt/source/mqtt.c ****     t = gmtime(&tt);
 352:./mqtt/source/mqtt.c ****     if(!t) {
 353:./mqtt/source/mqtt.c ****         return 0;
 354:./mqtt/source/mqtt.c ****     }
 355:./mqtt/source/mqtt.c **** 
 356:./mqtt/source/mqtt.c ****     if(0 == strftime(out, 24, "%Y-%m-%d %H:%M:%S", t)) {
 357:./mqtt/source/mqtt.c ****         return 0;
 358:./mqtt/source/mqtt.c ****     }
 359:./mqtt/source/mqtt.c **** 
 360:./mqtt/source/mqtt.c ****     sprintf(out + 19, ".%03d", (int)millisecond); // 19 bytes for %Y-%m-%dT%H:%M:%S
 361:./mqtt/source/mqtt.c ****     return FORMAT_TIME_STRING_SIZE;
 362:./mqtt/source/mqtt.c **** }
 363:./mqtt/source/mqtt.c **** 
 364:./mqtt/source/mqtt.c **** int Mqtt_HandlePingResp(struct MqttContext *ctx, char flags,
 365:./mqtt/source/mqtt.c ****                                char *pkt, size_t size)
 366:./mqtt/source/mqtt.c **** {
 367:./mqtt/source/mqtt.c ****     if((0 != flags) || (0 != size)) {
 368:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 369:./mqtt/source/mqtt.c ****     }
 370:./mqtt/source/mqtt.c **** 
 371:./mqtt/source/mqtt.c ****     return ctx->handle_ping_resp(ctx->handle_ping_resp_arg);
 372:./mqtt/source/mqtt.c **** }
 373:./mqtt/source/mqtt.c **** 
 374:./mqtt/source/mqtt.c **** int Mqtt_HandleConnAck(struct MqttContext *ctx, char flags,
 375:./mqtt/source/mqtt.c ****                               char *pkt, size_t size)
 376:./mqtt/source/mqtt.c **** {
 377:./mqtt/source/mqtt.c ****     char ack_flags, ret_code;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 16


 378:./mqtt/source/mqtt.c **** 
 379:./mqtt/source/mqtt.c ****     if((0 != flags) || (2 != size)) {
 380:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 381:./mqtt/source/mqtt.c ****     }
 382:./mqtt/source/mqtt.c **** 
 383:./mqtt/source/mqtt.c ****     ack_flags = pkt[0];
 384:./mqtt/source/mqtt.c ****     ret_code = pkt[1];
 385:./mqtt/source/mqtt.c **** 
 386:./mqtt/source/mqtt.c ****     if(((ack_flags & 0x01) && (0 != ret_code)) || (ret_code > 5)) {
 387:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 388:./mqtt/source/mqtt.c ****     }
 389:./mqtt/source/mqtt.c **** 
 390:./mqtt/source/mqtt.c ****     return ctx->handle_conn_ack(ctx->handle_conn_ack_arg, ack_flags, ret_code);
 391:./mqtt/source/mqtt.c **** }
 392:./mqtt/source/mqtt.c **** 
 393:./mqtt/source/mqtt.c **** static int Mqtt_HandlePublish(struct MqttContext *ctx, char flags,
 394:./mqtt/source/mqtt.c ****                               char *pkt, size_t size)
 395:./mqtt/source/mqtt.c **** {
 396:./mqtt/source/mqtt.c ****     const char dup = flags & 0x08;
 397:./mqtt/source/mqtt.c ****     const char qos = ((uint8_t)flags & 0x06) >> 1;
 398:./mqtt/source/mqtt.c ****     const char retain = flags & 0x01;
 399:./mqtt/source/mqtt.c ****     uint16_t topic_len, pkt_id = 0;
 400:./mqtt/source/mqtt.c ****     size_t payload_len;
 401:./mqtt/source/mqtt.c ****     char *payload;
 402:./mqtt/source/mqtt.c ****     char *topic, *cursor;
 403:./mqtt/source/mqtt.c ****     int err = MQTTERR_NOERROR;
 404:./mqtt/source/mqtt.c **** 
 405:./mqtt/source/mqtt.c ****     if(size < 2) {
 406:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 407:./mqtt/source/mqtt.c ****     }
 408:./mqtt/source/mqtt.c **** 
 409:./mqtt/source/mqtt.c ****     if(retain) {
 410:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 411:./mqtt/source/mqtt.c ****     }
 412:./mqtt/source/mqtt.c **** 
 413:./mqtt/source/mqtt.c ****     topic_len = Mqtt_RB16(pkt);
 414:./mqtt/source/mqtt.c ****     if(size < (size_t)(2 + topic_len)) {
 415:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 416:./mqtt/source/mqtt.c ****     }
 417:./mqtt/source/mqtt.c **** 
 418:./mqtt/source/mqtt.c ****     switch(qos) {
 419:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0: // qos0 have no packet identifier
 420:./mqtt/source/mqtt.c ****         if(0 != dup) {
 421:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 422:./mqtt/source/mqtt.c ****         }
 423:./mqtt/source/mqtt.c **** 
 424:./mqtt/source/mqtt.c ****         memmove(pkt, pkt + 2, topic_len); // reuse the space to store null terminate
 425:./mqtt/source/mqtt.c ****         topic = pkt;
 426:./mqtt/source/mqtt.c **** 
 427:./mqtt/source/mqtt.c ****         payload_len = size - 2 - topic_len;
 428:./mqtt/source/mqtt.c ****         payload = pkt + 2 + topic_len;
 429:./mqtt/source/mqtt.c ****         break;
 430:./mqtt/source/mqtt.c **** 
 431:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL1:
 432:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL2:
 433:./mqtt/source/mqtt.c ****         topic = pkt + 2;
 434:./mqtt/source/mqtt.c ****         if(topic_len + 4 > size) {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 17


 435:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 436:./mqtt/source/mqtt.c ****         }
 437:./mqtt/source/mqtt.c **** 
 438:./mqtt/source/mqtt.c ****         pkt_id = Mqtt_RB16(pkt + topic_len + 2);
 439:./mqtt/source/mqtt.c ****         if(0 == pkt_id) {
 440:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 441:./mqtt/source/mqtt.c ****         }
 442:./mqtt/source/mqtt.c ****         payload_len = size - 4 - topic_len;
 443:./mqtt/source/mqtt.c ****         payload = pkt + 4 + topic_len;
 444:./mqtt/source/mqtt.c ****         break;
 445:./mqtt/source/mqtt.c **** 
 446:./mqtt/source/mqtt.c ****     default:
 447:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 448:./mqtt/source/mqtt.c ****     }
 449:./mqtt/source/mqtt.c **** 
 450:./mqtt/source/mqtt.c ****     //assert(NULL != topic);
 451:./mqtt/source/mqtt.c ****     topic[topic_len] = '\0';
 452:./mqtt/source/mqtt.c **** 
 453:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
 454:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 455:./mqtt/source/mqtt.c ****     }
 456:./mqtt/source/mqtt.c **** 
 457:./mqtt/source/mqtt.c ****     cursor = topic;
 458:./mqtt/source/mqtt.c ****     while('\0' != *cursor) {
 459:./mqtt/source/mqtt.c ****         if(('+' == *cursor) || ('#' == *cursor)) {
 460:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 461:./mqtt/source/mqtt.c ****         }
 462:./mqtt/source/mqtt.c ****         ++cursor;
 463:./mqtt/source/mqtt.c ****     }
 464:./mqtt/source/mqtt.c **** 
 465:./mqtt/source/mqtt.c **** 	
 466:./mqtt/source/mqtt.c **** 	if('$' == *topic) {		/* 若是系统topic */
 467:./mqtt/source/mqtt.c ****         if(topic == strstr(topic, CMD_TOPIC_PREFIX)) {		/* 若是命令下发 */
 468:./mqtt/source/mqtt.c ****             //$creq/cmdid
 469:./mqtt/source/mqtt.c ****             int i=CMD_TOPIC_PREFIX_LEN + 1; //Topicname=$creq字符串’\0’结尾
 470:./mqtt/source/mqtt.c ****             const char *cmdid;
 471:./mqtt/source/mqtt.c ****             char *arg = payload;
 472:./mqtt/source/mqtt.c ****             size_t arg_len = payload_len;
 473:./mqtt/source/mqtt.c ****             int64_t ts = 0;
 474:./mqtt/source/mqtt.c ****             char *desc = "";
 475:./mqtt/source/mqtt.c **** 
 476:./mqtt/source/mqtt.c ****             cmdid = topic + i;
 477:./mqtt/source/mqtt.c **** 
 478:./mqtt/source/mqtt.c ****             /*
 479:./mqtt/source/mqtt.c ****             while( i<(topic_len-CMD_TOPIC_PREFIX_LEN)&&topic[i]!='/' ){
 480:./mqtt/source/mqtt.c ****                 ++i;
 481:./mqtt/source/mqtt.c ****             }
 482:./mqtt/source/mqtt.c **** 
 483:./mqtt/source/mqtt.c ****             if(i < topic_len-1 &&
 484:./mqtt/source/mqtt.c ****                i > CMD_TOPIC_PREFIX_LEN+1 )
 485:./mqtt/source/mqtt.c ****                 cmdid = topic + i + 1; // skip the $creq/topic_name
 486:./mqtt/source/mqtt.c ****             else
 487:./mqtt/source/mqtt.c ****                 return MQTTERR_ILLEGAL_PKT;
 488:./mqtt/source/mqtt.c ****             */
 489:./mqtt/source/mqtt.c **** 
 490:./mqtt/source/mqtt.c ****             
 491:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 18


 492:./mqtt/source/mqtt.c ****             /*
 493:./mqtt/source/mqtt.c ****             if((payload_len < 1) || ((*payload & 0x1f) != 0x5)) {
 494:./mqtt/source/mqtt.c ****                 return MQTTERR_ILLEGAL_PKT;
 495:./mqtt/source/mqtt.c ****             }
 496:./mqtt/source/mqtt.c **** 
 497:./mqtt/source/mqtt.c ****             if(*payload & 0x40) {
 498:./mqtt/source/mqtt.c ****                 if(arg_len < 8) {
 499:./mqtt/source/mqtt.c ****                     return MQTTERR_ILLEGAL_PKT;
 500:./mqtt/source/mqtt.c ****                 }
 501:./mqtt/source/mqtt.c ****                 ts = (int64_t)Mqtt_RB64(arg);
 502:./mqtt/source/mqtt.c ****                 arg += 8;
 503:./mqtt/source/mqtt.c ****                 arg_len -= 8;
 504:./mqtt/source/mqtt.c ****             }
 505:./mqtt/source/mqtt.c **** 
 506:./mqtt/source/mqtt.c ****             if(*payload & 0x20) {
 507:./mqtt/source/mqtt.c ****                 uint16_t desc_len;
 508:./mqtt/source/mqtt.c **** 
 509:./mqtt/source/mqtt.c ****                 if(arg_len < 2) {
 510:./mqtt/source/mqtt.c ****                     return MQTTERR_ILLEGAL_PKT;
 511:./mqtt/source/mqtt.c ****                 }
 512:./mqtt/source/mqtt.c **** 
 513:./mqtt/source/mqtt.c ****                 desc_len = Mqtt_RB16(arg);
 514:./mqtt/source/mqtt.c ****                 if(arg_len < 2 + desc_len) {
 515:./mqtt/source/mqtt.c ****                     return MQTTERR_ILLEGAL_PKT;
 516:./mqtt/source/mqtt.c ****                 }
 517:./mqtt/source/mqtt.c **** 
 518:./mqtt/source/mqtt.c ****                 memmove(arg, arg + 2, desc_len);
 519:./mqtt/source/mqtt.c ****                 desc = arg;
 520:./mqtt/source/mqtt.c ****                 desc[desc_len] = '\0';
 521:./mqtt/source/mqtt.c **** 
 522:./mqtt/source/mqtt.c ****                 arg += desc_len + 2;
 523:./mqtt/source/mqtt.c ****                 arg_len -= desc_len - 2;
 524:./mqtt/source/mqtt.c ****             }
 525:./mqtt/source/mqtt.c ****             */
 526:./mqtt/source/mqtt.c **** 
 527:./mqtt/source/mqtt.c ****             err = ctx->handle_cmd(ctx->handle_cmd_arg, pkt_id, cmdid,
 528:./mqtt/source/mqtt.c ****                                   ts, desc, arg, arg_len, dup,
 529:./mqtt/source/mqtt.c ****                                   (enum MqttQosLevel)qos);
 530:./mqtt/source/mqtt.c **** 
 531:./mqtt/source/mqtt.c ****         }
 532:./mqtt/source/mqtt.c **** #if 0
 533:./mqtt/source/mqtt.c **** 		else if(topic == strstr(topic, GET_PRODUCT_TOPIC_PREFIX)) {		/* 若是获取产品主题列表 */
 534:./mqtt/source/mqtt.c **** 			
 535:./mqtt/source/mqtt.c **** 		}
 536:./mqtt/source/mqtt.c **** #endif		
 537:./mqtt/source/mqtt.c ****     }
 538:./mqtt/source/mqtt.c ****     else {		/* 自定义topic */
 539:./mqtt/source/mqtt.c ****         err = ctx->handle_publish(ctx->handle_publish_arg, pkt_id, topic,
 540:./mqtt/source/mqtt.c ****                                   payload, payload_len, dup,
 541:./mqtt/source/mqtt.c ****                                   (enum MqttQosLevel)qos);
 542:./mqtt/source/mqtt.c ****     }
 543:./mqtt/source/mqtt.c **** 
 544:./mqtt/source/mqtt.c ****     // send the publish response.
 545:./mqtt/source/mqtt.c ****     if(err >= 0) {
 546:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 547:./mqtt/source/mqtt.c ****         MqttBuffer_Init(response);
 548:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 19


 549:./mqtt/source/mqtt.c ****         switch(qos) {
 550:./mqtt/source/mqtt.c ****         case MQTT_QOS_LEVEL2:
 551:./mqtt/source/mqtt.c ****             //assert(0 != pkt_id);
 552:./mqtt/source/mqtt.c ****             err = Mqtt_PackPubRecPkt(response, pkt_id);
 553:./mqtt/source/mqtt.c ****             break;
 554:./mqtt/source/mqtt.c **** 
 555:./mqtt/source/mqtt.c ****         case MQTT_QOS_LEVEL1:
 556:./mqtt/source/mqtt.c ****             //assert(0 != pkt_id);
 557:./mqtt/source/mqtt.c ****             err = Mqtt_PackPubAckPkt(response, pkt_id);
 558:./mqtt/source/mqtt.c ****             break;
 559:./mqtt/source/mqtt.c **** 
 560:./mqtt/source/mqtt.c ****         default:
 561:./mqtt/source/mqtt.c ****             break;
 562:./mqtt/source/mqtt.c ****         }
 563:./mqtt/source/mqtt.c **** 
 564:./mqtt/source/mqtt.c ****         if((MQTTERR_NOERROR == err) && (MQTT_QOS_LEVEL0 != qos)) {
 565:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 566:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 567:./mqtt/source/mqtt.c ****             }
 568:./mqtt/source/mqtt.c ****         }
 569:./mqtt/source/mqtt.c ****         else if(MQTT_QOS_LEVEL0 != qos){
 570:./mqtt/source/mqtt.c ****             err = MQTTERR_FAILED_SEND_RESPONSE;
 571:./mqtt/source/mqtt.c ****         }
 572:./mqtt/source/mqtt.c **** 
 573:./mqtt/source/mqtt.c ****         MqttBuffer_Destroy(response);
 574:./mqtt/source/mqtt.c ****     }
 575:./mqtt/source/mqtt.c **** 
 576:./mqtt/source/mqtt.c ****     return err;
 577:./mqtt/source/mqtt.c **** }
 578:./mqtt/source/mqtt.c **** 
 579:./mqtt/source/mqtt.c **** int Mqtt_HandlePubAck(struct MqttContext *ctx, char flags,
 580:./mqtt/source/mqtt.c ****                              char *pkt, size_t size)
 581:./mqtt/source/mqtt.c **** {
 582:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 583:./mqtt/source/mqtt.c **** 
 584:./mqtt/source/mqtt.c ****     if((0 != flags) || (2 != size)) {
 585:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 586:./mqtt/source/mqtt.c ****     }
 587:./mqtt/source/mqtt.c **** 
 588:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 589:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 590:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 591:./mqtt/source/mqtt.c ****     }
 592:./mqtt/source/mqtt.c **** 
 593:./mqtt/source/mqtt.c ****     return ctx->handle_pub_ack(ctx->handle_pub_ack_arg, pkt_id);
 594:./mqtt/source/mqtt.c **** }
 595:./mqtt/source/mqtt.c **** 
 596:./mqtt/source/mqtt.c **** int Mqtt_HandlePubRec(struct MqttContext *ctx, char flags,
 597:./mqtt/source/mqtt.c ****                              char *pkt, size_t size)
 598:./mqtt/source/mqtt.c **** {
 599:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 600:./mqtt/source/mqtt.c ****     int err;
 601:./mqtt/source/mqtt.c **** 
 602:./mqtt/source/mqtt.c ****     if((0 != flags) || (2 != size)) {
 603:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 604:./mqtt/source/mqtt.c ****     }
 605:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 20


 606:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 607:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 608:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 609:./mqtt/source/mqtt.c ****     }
 610:./mqtt/source/mqtt.c **** 
 611:./mqtt/source/mqtt.c ****     err = ctx->handle_pub_rec(ctx->handle_pub_rec_arg, pkt_id);
 612:./mqtt/source/mqtt.c ****     if(err >= 0) {
 613:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 614:./mqtt/source/mqtt.c ****         MqttBuffer_Init(response);
 615:./mqtt/source/mqtt.c **** 
 616:./mqtt/source/mqtt.c ****         err = Mqtt_PackPubRelPkt(response, pkt_id);
 617:./mqtt/source/mqtt.c ****         if(MQTTERR_NOERROR == err) {
 618:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 619:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 620:./mqtt/source/mqtt.c ****             }
 621:./mqtt/source/mqtt.c ****         }
 622:./mqtt/source/mqtt.c **** 
 623:./mqtt/source/mqtt.c ****         MqttBuffer_Destroy(response);
 624:./mqtt/source/mqtt.c ****     }
 625:./mqtt/source/mqtt.c **** 
 626:./mqtt/source/mqtt.c ****     return err;
 627:./mqtt/source/mqtt.c **** }
 628:./mqtt/source/mqtt.c **** 
 629:./mqtt/source/mqtt.c **** int Mqtt_HandlePubRel(struct MqttContext *ctx, char flags,
 630:./mqtt/source/mqtt.c ****                              char *pkt, size_t size)
 631:./mqtt/source/mqtt.c **** {
 632:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 633:./mqtt/source/mqtt.c ****     int err;
 634:./mqtt/source/mqtt.c **** 
 635:./mqtt/source/mqtt.c ****     if((2 != flags) || (2 != size)) {
 636:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 637:./mqtt/source/mqtt.c ****     }
 638:./mqtt/source/mqtt.c **** 
 639:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 640:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 641:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 642:./mqtt/source/mqtt.c ****     }
 643:./mqtt/source/mqtt.c **** 
 644:./mqtt/source/mqtt.c ****     err = ctx->handle_pub_rel(ctx->handle_pub_rel_arg, pkt_id);
 645:./mqtt/source/mqtt.c ****     if(err >= 0) {
 646:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 647:./mqtt/source/mqtt.c ****         MqttBuffer_Init(response);
 648:./mqtt/source/mqtt.c ****         err = Mqtt_PackPubCompPkt(response, pkt_id);
 649:./mqtt/source/mqtt.c ****         if(MQTTERR_NOERROR == err) {
 650:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 651:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 652:./mqtt/source/mqtt.c ****             }
 653:./mqtt/source/mqtt.c ****         }
 654:./mqtt/source/mqtt.c ****         MqttBuffer_Destroy(response);
 655:./mqtt/source/mqtt.c ****     }
 656:./mqtt/source/mqtt.c **** 
 657:./mqtt/source/mqtt.c ****     return err;
 658:./mqtt/source/mqtt.c **** }
 659:./mqtt/source/mqtt.c **** 
 660:./mqtt/source/mqtt.c **** int Mqtt_HandlePubComp(struct MqttContext *ctx, char flags,
 661:./mqtt/source/mqtt.c ****                               char *pkt, size_t size)
 662:./mqtt/source/mqtt.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 21


 663:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 664:./mqtt/source/mqtt.c **** 
 665:./mqtt/source/mqtt.c ****     if((0 != flags) || (2 != size)) {
 666:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 667:./mqtt/source/mqtt.c ****     }
 668:./mqtt/source/mqtt.c **** 
 669:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 670:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 671:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 672:./mqtt/source/mqtt.c ****     }
 673:./mqtt/source/mqtt.c **** 
 674:./mqtt/source/mqtt.c ****     return ctx->handle_pub_comp(ctx->handle_pub_comp_arg, pkt_id);
 675:./mqtt/source/mqtt.c **** }
 676:./mqtt/source/mqtt.c **** 
 677:./mqtt/source/mqtt.c **** int Mqtt_HandleSubAck(struct MqttContext *ctx, char flags,
 678:./mqtt/source/mqtt.c ****                              char *pkt, size_t size)
 679:./mqtt/source/mqtt.c **** {
 680:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 681:./mqtt/source/mqtt.c ****     char *code;
 682:./mqtt/source/mqtt.c **** 
 683:./mqtt/source/mqtt.c ****     if((0 != flags) || (size < 2)) {
 684:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 685:./mqtt/source/mqtt.c ****     }
 686:./mqtt/source/mqtt.c **** 
 687:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 688:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 689:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 690:./mqtt/source/mqtt.c ****     }
 691:./mqtt/source/mqtt.c **** 
 692:./mqtt/source/mqtt.c ****     for(code = pkt + 2; code < pkt + size; ++code ) {
 693:./mqtt/source/mqtt.c ****         if(*code & 0x7C) {
 694:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 695:./mqtt/source/mqtt.c ****         }
 696:./mqtt/source/mqtt.c ****     }
 697:./mqtt/source/mqtt.c **** 
 698:./mqtt/source/mqtt.c ****     return ctx->handle_sub_ack(ctx->handle_sub_ack_arg, pkt_id, pkt + 2, size - 2);
 699:./mqtt/source/mqtt.c **** }
 700:./mqtt/source/mqtt.c **** 
 701:./mqtt/source/mqtt.c **** int Mqtt_HandleUnsubAck(struct MqttContext *ctx, char flags,
 702:./mqtt/source/mqtt.c ****                                char *pkt, size_t size)
 703:./mqtt/source/mqtt.c **** {
 704:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 705:./mqtt/source/mqtt.c **** 
 706:./mqtt/source/mqtt.c ****     if((0 != flags) || (2 != size)) {
 707:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 708:./mqtt/source/mqtt.c ****     }
 709:./mqtt/source/mqtt.c **** 
 710:./mqtt/source/mqtt.c ****     pkt_id = Mqtt_RB16(pkt);
 711:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 712:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 713:./mqtt/source/mqtt.c ****     }
 714:./mqtt/source/mqtt.c **** 
 715:./mqtt/source/mqtt.c ****     return ctx->handle_unsub_ack(ctx->handle_unsub_ack_arg, pkt_id);
 716:./mqtt/source/mqtt.c **** }
 717:./mqtt/source/mqtt.c **** 
 718:./mqtt/source/mqtt.c **** static int Mqtt_Dispatch(struct MqttContext *ctx, char fh,  char *pkt, size_t size)
 719:./mqtt/source/mqtt.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 22


 720:./mqtt/source/mqtt.c ****     const char flags = fh & 0x0F;
 721:./mqtt/source/mqtt.c **** 
 722:./mqtt/source/mqtt.c ****     switch(((uint8_t)fh) >> 4) {
 723:./mqtt/source/mqtt.c ****     case MQTT_PKT_PINGRESP:
 724:./mqtt/source/mqtt.c ****         return Mqtt_HandlePingResp(ctx, flags, pkt, size);
 725:./mqtt/source/mqtt.c **** 
 726:./mqtt/source/mqtt.c ****     case MQTT_PKT_CONNACK:
 727:./mqtt/source/mqtt.c ****         return Mqtt_HandleConnAck(ctx, flags, pkt, size);
 728:./mqtt/source/mqtt.c **** 
 729:./mqtt/source/mqtt.c ****     case MQTT_PKT_PUBLISH:
 730:./mqtt/source/mqtt.c ****         return Mqtt_HandlePublish(ctx, flags, pkt, size);
 731:./mqtt/source/mqtt.c **** 
 732:./mqtt/source/mqtt.c ****     case MQTT_PKT_PUBACK:
 733:./mqtt/source/mqtt.c ****         return Mqtt_HandlePubAck(ctx, flags, pkt, size);
 734:./mqtt/source/mqtt.c **** 
 735:./mqtt/source/mqtt.c ****     case MQTT_PKT_PUBREC:
 736:./mqtt/source/mqtt.c ****         return Mqtt_HandlePubRec(ctx, flags, pkt, size);
 737:./mqtt/source/mqtt.c **** 
 738:./mqtt/source/mqtt.c ****     case MQTT_PKT_PUBREL:
 739:./mqtt/source/mqtt.c ****         return Mqtt_HandlePubRel(ctx, flags, pkt, size);
 740:./mqtt/source/mqtt.c **** 
 741:./mqtt/source/mqtt.c ****     case MQTT_PKT_PUBCOMP:
 742:./mqtt/source/mqtt.c ****         return Mqtt_HandlePubComp(ctx, flags, pkt, size);
 743:./mqtt/source/mqtt.c **** 
 744:./mqtt/source/mqtt.c ****     case MQTT_PKT_SUBACK:
 745:./mqtt/source/mqtt.c ****         return Mqtt_HandleSubAck(ctx, flags, pkt, size);
 746:./mqtt/source/mqtt.c **** 
 747:./mqtt/source/mqtt.c ****     case MQTT_PKT_UNSUBACK:
 748:./mqtt/source/mqtt.c ****         return Mqtt_HandleUnsubAck(ctx, flags, pkt, size);
 749:./mqtt/source/mqtt.c **** 
 750:./mqtt/source/mqtt.c ****     default:
 751:./mqtt/source/mqtt.c ****         break;
 752:./mqtt/source/mqtt.c ****     }
 753:./mqtt/source/mqtt.c **** 
 754:./mqtt/source/mqtt.c ****     return MQTTERR_ILLEGAL_PKT;
 755:./mqtt/source/mqtt.c **** }
 756:./mqtt/source/mqtt.c **** 
 757:./mqtt/source/mqtt.c **** int Mqtt_InitContext(struct MqttContext *ctx, uint32_t buf_size)
 758:./mqtt/source/mqtt.c **** {
 759:./mqtt/source/mqtt.c ****     memset(ctx, 0, sizeof(*ctx));
 760:./mqtt/source/mqtt.c **** 
 761:./mqtt/source/mqtt.c ****     ctx->bgn = (char*)malloc(buf_size);
 762:./mqtt/source/mqtt.c ****     if(NULL == ctx->bgn) {
 763:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 764:./mqtt/source/mqtt.c ****     }
 765:./mqtt/source/mqtt.c **** 
 766:./mqtt/source/mqtt.c ****     ctx->end = ctx->bgn + buf_size;
 767:./mqtt/source/mqtt.c ****     ctx->pos = ctx->bgn;
 768:./mqtt/source/mqtt.c **** 
 769:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 770:./mqtt/source/mqtt.c **** }
 771:./mqtt/source/mqtt.c **** 
 772:./mqtt/source/mqtt.c **** void Mqtt_DestroyContext(struct MqttContext *ctx)
 773:./mqtt/source/mqtt.c **** {
 774:./mqtt/source/mqtt.c ****     free(ctx->bgn);
 775:./mqtt/source/mqtt.c ****     memset(ctx, 0, sizeof(*ctx));
 776:./mqtt/source/mqtt.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 23


 777:./mqtt/source/mqtt.c **** 
 778:./mqtt/source/mqtt.c **** int Mqtt_RecvPkt(struct MqttContext *ctx)
 779:./mqtt/source/mqtt.c **** {
 780:./mqtt/source/mqtt.c ****     int bytes;
 781:./mqtt/source/mqtt.c ****     uint32_t remaining_len = 0;
 782:./mqtt/source/mqtt.c ****     char *pkt, *cursor;
 783:./mqtt/source/mqtt.c **** 
 784:./mqtt/source/mqtt.c ****     bytes = ctx->read_func(ctx->read_func_arg, ctx->pos, ctx->end - ctx->pos);
 785:./mqtt/source/mqtt.c **** 
 786:./mqtt/source/mqtt.c ****     if(0 == bytes) {
 787:./mqtt/source/mqtt.c ****         ctx->pos = ctx->bgn; // clear the buffer
 788:./mqtt/source/mqtt.c ****         return MQTTERR_ENDOFFILE;
 789:./mqtt/source/mqtt.c ****     }
 790:./mqtt/source/mqtt.c **** 
 791:./mqtt/source/mqtt.c ****     if(bytes < 0) {
 792:./mqtt/source/mqtt.c ****         return MQTTERR_IO;
 793:./mqtt/source/mqtt.c ****     }
 794:./mqtt/source/mqtt.c ****     
 795:./mqtt/source/mqtt.c ****     printf("<%s>: rcv %d data from OneNET\r\n", __FUNCTION__, bytes);
 796:./mqtt/source/mqtt.c **** 
 797:./mqtt/source/mqtt.c ****     ctx->pos += bytes;
 798:./mqtt/source/mqtt.c ****     if(ctx->pos > ctx->end) {
 799:./mqtt/source/mqtt.c ****         return MQTTERR_BUF_OVERFLOW;
 800:./mqtt/source/mqtt.c ****     }
 801:./mqtt/source/mqtt.c **** 
 802:./mqtt/source/mqtt.c ****     cursor = ctx->bgn;
 803:./mqtt/source/mqtt.c ****     while(1) {
 804:./mqtt/source/mqtt.c ****         int errcode;
 805:./mqtt/source/mqtt.c **** 
 806:./mqtt/source/mqtt.c ****         if(ctx->pos - cursor  < 2) {
 807:./mqtt/source/mqtt.c ****             break;
 808:./mqtt/source/mqtt.c ****         }
 809:./mqtt/source/mqtt.c **** 
 810:./mqtt/source/mqtt.c ****         bytes = Mqtt_ReadLength(cursor + 1, ctx->pos - cursor - 1, &remaining_len);
 811:./mqtt/source/mqtt.c **** 
 812:./mqtt/source/mqtt.c ****         if(-1 == bytes) {
 813:./mqtt/source/mqtt.c ****             break;
 814:./mqtt/source/mqtt.c ****         }
 815:./mqtt/source/mqtt.c ****         else if(-2 == bytes) {
 816:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 817:./mqtt/source/mqtt.c ****         }
 818:./mqtt/source/mqtt.c **** 
 819:./mqtt/source/mqtt.c ****         // one byte for the fixed header
 820:./mqtt/source/mqtt.c ****         if(cursor + remaining_len + bytes + 1 > ctx->pos) {
 821:./mqtt/source/mqtt.c ****             break;
 822:./mqtt/source/mqtt.c ****         }
 823:./mqtt/source/mqtt.c **** 
 824:./mqtt/source/mqtt.c ****         pkt = cursor + bytes + 1;       
 825:./mqtt/source/mqtt.c **** 
 826:./mqtt/source/mqtt.c ****         errcode = Mqtt_Dispatch(ctx, cursor[0], pkt, remaining_len);
 827:./mqtt/source/mqtt.c ****         if(errcode < 0) {
 828:./mqtt/source/mqtt.c ****             return errcode;
 829:./mqtt/source/mqtt.c ****         }
 830:./mqtt/source/mqtt.c **** 		
 831:./mqtt/source/mqtt.c **** 		cursor += bytes + 1 + remaining_len;
 832:./mqtt/source/mqtt.c ****     }
 833:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 24


 834:./mqtt/source/mqtt.c ****     if(cursor > ctx->bgn) {
 835:./mqtt/source/mqtt.c ****         size_t movebytes = cursor - ctx->bgn;
 836:./mqtt/source/mqtt.c ****         memmove(ctx->bgn, cursor, movebytes);
 837:./mqtt/source/mqtt.c ****         ctx->pos -= movebytes;
 838:./mqtt/source/mqtt.c **** 
 839:./mqtt/source/mqtt.c ****         //assert(ctx->pos >= ctx->bgn);
 840:./mqtt/source/mqtt.c ****     }
 841:./mqtt/source/mqtt.c **** 
 842:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 843:./mqtt/source/mqtt.c **** }
 844:./mqtt/source/mqtt.c **** 
 845:./mqtt/source/mqtt.c **** int Mqtt_SendPkt(struct MqttContext *ctx, const struct MqttBuffer *buf, uint32_t offset)
 846:./mqtt/source/mqtt.c **** {
 847:./mqtt/source/mqtt.c ****     const struct MqttExtent *cursor;
 848:./mqtt/source/mqtt.c ****     const struct MqttExtent *first_ext;
 849:./mqtt/source/mqtt.c ****     uint32_t bytes;
 850:./mqtt/source/mqtt.c ****     int ext_count;
 851:./mqtt/source/mqtt.c ****     int i;
 852:./mqtt/source/mqtt.c ****     struct iovec *iov;
 853:./mqtt/source/mqtt.c **** 
 854:./mqtt/source/mqtt.c ****     if(offset >= buf->buffered_bytes) {
 855:./mqtt/source/mqtt.c ****         return 0;
 856:./mqtt/source/mqtt.c ****     }
 857:./mqtt/source/mqtt.c **** 
 858:./mqtt/source/mqtt.c ****     cursor = buf->first_ext;
 859:./mqtt/source/mqtt.c ****     bytes = 0;
 860:./mqtt/source/mqtt.c ****     while(cursor && bytes < offset) {
 861:./mqtt/source/mqtt.c ****         bytes += cursor->len;
 862:./mqtt/source/mqtt.c ****         cursor = cursor->next;
 863:./mqtt/source/mqtt.c ****     }
 864:./mqtt/source/mqtt.c **** 
 865:./mqtt/source/mqtt.c ****     first_ext = cursor;
 866:./mqtt/source/mqtt.c ****     ext_count = 0;
 867:./mqtt/source/mqtt.c ****     for(; cursor; cursor = cursor->next) {
 868:./mqtt/source/mqtt.c ****         ++ext_count;
 869:./mqtt/source/mqtt.c ****     }
 870:./mqtt/source/mqtt.c **** 
 871:./mqtt/source/mqtt.c ****     if(0 == ext_count) {
 872:./mqtt/source/mqtt.c ****         return 0;
 873:./mqtt/source/mqtt.c ****     }
 874:./mqtt/source/mqtt.c **** 
 875:./mqtt/source/mqtt.c ****     //assert(first_ext);
 876:./mqtt/source/mqtt.c **** 
 877:./mqtt/source/mqtt.c ****     iov = (struct iovec*)malloc(sizeof(struct iovec) * ext_count);
 878:./mqtt/source/mqtt.c ****     if(!iov) {
 879:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 880:./mqtt/source/mqtt.c ****     }
 881:./mqtt/source/mqtt.c **** 
 882:./mqtt/source/mqtt.c ****     iov[0].iov_base = first_ext->payload + (offset - bytes);
 883:./mqtt/source/mqtt.c ****     iov[0].iov_len = first_ext->len - (offset - bytes);
 884:./mqtt/source/mqtt.c **** 
 885:./mqtt/source/mqtt.c ****     i = 1;
 886:./mqtt/source/mqtt.c ****     for(cursor = first_ext->next; cursor; cursor = cursor->next) {
 887:./mqtt/source/mqtt.c ****         iov[i].iov_base = cursor->payload;
 888:./mqtt/source/mqtt.c ****         iov[i].iov_len = cursor->len;
 889:./mqtt/source/mqtt.c ****         ++i;
 890:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 25


 891:./mqtt/source/mqtt.c **** 
 892:./mqtt/source/mqtt.c **** 	printf("before send\r\n");
 893:./mqtt/source/mqtt.c ****     i = ctx->writev_func(ctx->writev_func_arg, iov, ext_count);
 894:./mqtt/source/mqtt.c ****     free(iov);
 895:./mqtt/source/mqtt.c **** 
 896:./mqtt/source/mqtt.c ****     return i;
 897:./mqtt/source/mqtt.c **** }
 898:./mqtt/source/mqtt.c **** 
 899:./mqtt/source/mqtt.c **** 
 900:./mqtt/source/mqtt.c **** 
 901:./mqtt/source/mqtt.c **** int Mqtt_PackConnectPkt(struct MqttBuffer *buf, uint16_t keep_alive, const char *id,
 902:./mqtt/source/mqtt.c ****                         int clean_session, const char *will_topic,
 903:./mqtt/source/mqtt.c ****                         const char *will_msg, uint16_t msg_len,
 904:./mqtt/source/mqtt.c ****                         enum MqttQosLevel qos, int will_retain, const char *user,
 905:./mqtt/source/mqtt.c ****                         const char *password, uint16_t pswd_len)
 906:./mqtt/source/mqtt.c **** {
 907:./mqtt/source/mqtt.c ****     int ret;
 908:./mqtt/source/mqtt.c ****     uint16_t id_len, wt_len, user_len;
 909:./mqtt/source/mqtt.c ****     size_t total_len;
 910:./mqtt/source/mqtt.c ****     char flags = 0;
 911:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head, *variable_head, *payload;
 912:./mqtt/source/mqtt.c ****     char *cursor;
 913:./mqtt/source/mqtt.c **** 
 914:./mqtt/source/mqtt.c **** 
 915:./mqtt/source/mqtt.c ****     fix_head = MqttBuffer_AllocExtent(buf, 5);
 916:./mqtt/source/mqtt.c ****     if(NULL == fix_head) {
 917:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 918:./mqtt/source/mqtt.c ****     }
 919:./mqtt/source/mqtt.c **** 
 920:./mqtt/source/mqtt.c ****     variable_head = MqttBuffer_AllocExtent(buf, 10);
 921:./mqtt/source/mqtt.c ****     if(NULL == variable_head) {
 922:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 923:./mqtt/source/mqtt.c ****     }
 924:./mqtt/source/mqtt.c **** 
 925:./mqtt/source/mqtt.c ****     total_len = 10; // length of the variable header
 926:./mqtt/source/mqtt.c ****     id_len = Mqtt_CheckClentIdentifier(id);
 927:./mqtt/source/mqtt.c ****     if(id_len < 0) {
 928:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
 929:./mqtt/source/mqtt.c ****     }
 930:./mqtt/source/mqtt.c ****     total_len += id_len + 2;
 931:./mqtt/source/mqtt.c **** 
 932:./mqtt/source/mqtt.c ****     if(clean_session) {
 933:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_CLEAN_SESSION;
 934:./mqtt/source/mqtt.c ****     }
 935:./mqtt/source/mqtt.c **** 
 936:./mqtt/source/mqtt.c ****     if(will_msg && !will_topic) {
 937:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 938:./mqtt/source/mqtt.c ****         }
 939:./mqtt/source/mqtt.c **** 
 940:./mqtt/source/mqtt.c ****     wt_len = 0;
 941:./mqtt/source/mqtt.c ****     if(will_topic) {
 942:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_WILL_FLAG;
 943:./mqtt/source/mqtt.c ****         wt_len = strlen(will_topic);
 944:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(will_topic, wt_len) != wt_len) {
 945:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 946:./mqtt/source/mqtt.c ****         }
 947:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 26


 948:./mqtt/source/mqtt.c **** 
 949:./mqtt/source/mqtt.c ****     switch(qos) {
 950:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0:
 951:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_WILL_QOS0;
 952:./mqtt/source/mqtt.c ****         break;
 953:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL1:
 954:./mqtt/source/mqtt.c ****         flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS1);
 955:./mqtt/source/mqtt.c ****         break;
 956:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL2:
 957:./mqtt/source/mqtt.c ****         flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS2);
 958:./mqtt/source/mqtt.c ****         break;
 959:./mqtt/source/mqtt.c ****     default:
 960:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 961:./mqtt/source/mqtt.c ****     }
 962:./mqtt/source/mqtt.c **** 
 963:./mqtt/source/mqtt.c ****     if(will_retain) {
 964:./mqtt/source/mqtt.c ****         flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_RETAIN);
 965:./mqtt/source/mqtt.c ****     }
 966:./mqtt/source/mqtt.c **** 
 967:./mqtt/source/mqtt.c ****     if(flags & MQTT_CONNECT_WILL_FLAG) {
 968:./mqtt/source/mqtt.c ****         total_len += 4 + wt_len + msg_len;
 969:./mqtt/source/mqtt.c ****     }
 970:./mqtt/source/mqtt.c **** 
 971:./mqtt/source/mqtt.c ****     if(!user && password) {
 972:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 973:./mqtt/source/mqtt.c ****     }
 974:./mqtt/source/mqtt.c **** 
 975:./mqtt/source/mqtt.c ****     /*must have user + password
 976:./mqtt/source/mqtt.c ****      in v2.0
 977:./mqtt/source/mqtt.c ****     */
 978:./mqtt/source/mqtt.c ****     if(NULL == user ||
 979:./mqtt/source/mqtt.c ****         NULL == password){
 980:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 981:./mqtt/source/mqtt.c ****     }
 982:./mqtt/source/mqtt.c **** 
 983:./mqtt/source/mqtt.c **** 
 984:./mqtt/source/mqtt.c ****     user_len = 0;
 985:./mqtt/source/mqtt.c ****     if(user) {
 986:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_USER_NAME;
 987:./mqtt/source/mqtt.c ****         user_len = strlen(user);
 988:./mqtt/source/mqtt.c ****         ret = Mqtt_CheckUtf8(user, user_len);
 989:./mqtt/source/mqtt.c ****         if(user_len != ret) {
 990:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 991:./mqtt/source/mqtt.c ****         }
 992:./mqtt/source/mqtt.c **** 
 993:./mqtt/source/mqtt.c ****         total_len += user_len + 2;
 994:./mqtt/source/mqtt.c ****     }
 995:./mqtt/source/mqtt.c **** 
 996:./mqtt/source/mqtt.c ****     if(password) {
 997:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_PASSORD;
 998:./mqtt/source/mqtt.c ****         total_len += pswd_len + 2;
 999:./mqtt/source/mqtt.c ****     }
1000:./mqtt/source/mqtt.c **** 
1001:./mqtt/source/mqtt.c **** 
1002:./mqtt/source/mqtt.c **** 
1003:./mqtt/source/mqtt.c ****     payload = MqttBuffer_AllocExtent(buf, total_len - 10);
1004:./mqtt/source/mqtt.c ****     fix_head->payload[0] = MQTT_PKT_CONNECT << 4;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 27


1005:./mqtt/source/mqtt.c **** 
1006:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(total_len, fix_head->payload + 1);
1007:./mqtt/source/mqtt.c ****     if(ret < 0) {
1008:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1009:./mqtt/source/mqtt.c ****     }
1010:./mqtt/source/mqtt.c ****     fix_head->len = ret + 1; // ajust the length of the extent
1011:./mqtt/source/mqtt.c **** 
1012:./mqtt/source/mqtt.c ****     variable_head->payload[0] = 0;
1013:./mqtt/source/mqtt.c ****     variable_head->payload[1] = 4;
1014:./mqtt/source/mqtt.c ****     variable_head->payload[2] = 'M';
1015:./mqtt/source/mqtt.c ****     variable_head->payload[3] = 'Q';
1016:./mqtt/source/mqtt.c ****     variable_head->payload[4] = 'T';
1017:./mqtt/source/mqtt.c ****     variable_head->payload[5] = 'T';
1018:./mqtt/source/mqtt.c ****     variable_head->payload[6] = 4; // protocol level 4
1019:./mqtt/source/mqtt.c ****     variable_head->payload[7] = flags;
1020:./mqtt/source/mqtt.c ****     Mqtt_WB16(keep_alive, variable_head->payload + 8);
1021:./mqtt/source/mqtt.c **** 
1022:./mqtt/source/mqtt.c ****     //write payload client_id
1023:./mqtt/source/mqtt.c ****     cursor = payload->payload;
1024:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, id, id_len);
1025:./mqtt/source/mqtt.c **** 
1026:./mqtt/source/mqtt.c ****     if(flags & MQTT_CONNECT_WILL_FLAG) {
1027:./mqtt/source/mqtt.c ****         if(!will_msg) {
1028:./mqtt/source/mqtt.c ****             will_msg = "";
1029:./mqtt/source/mqtt.c ****             msg_len = 0;
1030:./mqtt/source/mqtt.c ****         }
1031:./mqtt/source/mqtt.c **** 
1032:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, will_topic, wt_len);
1033:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, will_msg, msg_len);
1034:./mqtt/source/mqtt.c ****     }
1035:./mqtt/source/mqtt.c **** 
1036:./mqtt/source/mqtt.c ****     if(flags & MQTT_CONNECT_USER_NAME) {
1037:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, user, user_len);
1038:./mqtt/source/mqtt.c ****     }
1039:./mqtt/source/mqtt.c **** 
1040:./mqtt/source/mqtt.c ****     if(flags & MQTT_CONNECT_PASSORD) {
1041:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, password, pswd_len);
1042:./mqtt/source/mqtt.c ****     }
1043:./mqtt/source/mqtt.c **** 
1044:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, fix_head);
1045:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, variable_head);
1046:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, payload);
1047:./mqtt/source/mqtt.c **** 
1048:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1049:./mqtt/source/mqtt.c **** }
1050:./mqtt/source/mqtt.c **** 
1051:./mqtt/source/mqtt.c **** 
1052:./mqtt/source/mqtt.c **** 
1053:./mqtt/source/mqtt.c **** int Mqtt_PackPublishPkt(struct MqttBuffer *buf, uint16_t pkt_id, const char *topic,
1054:./mqtt/source/mqtt.c ****                         const char *payload, uint32_t size,
1055:./mqtt/source/mqtt.c ****                         enum MqttQosLevel qos, int retain, int own)
1056:./mqtt/source/mqtt.c **** {
1057:./mqtt/source/mqtt.c ****     int ret;
1058:./mqtt/source/mqtt.c ****     size_t topic_len, total_len;
1059:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head, *variable_head;
1060:./mqtt/source/mqtt.c ****     char *cursor;
1061:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 28


1062:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
1063:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1064:./mqtt/source/mqtt.c ****     }
1065:./mqtt/source/mqtt.c **** 
1066:./mqtt/source/mqtt.c ****     for(topic_len = 0; '\0' != topic[topic_len]; ++topic_len) {
1067:./mqtt/source/mqtt.c ****         if(('#' == topic[topic_len]) || ('+' == topic[topic_len])) {
1068:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
1069:./mqtt/source/mqtt.c ****         }
1070:./mqtt/source/mqtt.c ****     }
1071:./mqtt/source/mqtt.c **** 
1072:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
1073:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1074:./mqtt/source/mqtt.c ****     }
1075:./mqtt/source/mqtt.c **** 
1076:./mqtt/source/mqtt.c ****     fix_head = MqttBuffer_AllocExtent(buf, 5);
1077:./mqtt/source/mqtt.c ****     if(NULL == fix_head) {
1078:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1079:./mqtt/source/mqtt.c ****     }
1080:./mqtt/source/mqtt.c **** 
1081:./mqtt/source/mqtt.c ****     fix_head->payload[0] = MQTT_PKT_PUBLISH << 4;
1082:./mqtt/source/mqtt.c **** 
1083:./mqtt/source/mqtt.c ****     if(retain) {
1084:./mqtt/source/mqtt.c ****         fix_head->payload[0] |= 0x01;
1085:./mqtt/source/mqtt.c ****     }
1086:./mqtt/source/mqtt.c **** 
1087:./mqtt/source/mqtt.c ****     total_len = topic_len + size + 2;
1088:./mqtt/source/mqtt.c ****     switch(qos) {
1089:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0:
1090:./mqtt/source/mqtt.c ****         break;
1091:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL1:
1092:./mqtt/source/mqtt.c ****         fix_head->payload[0] |= 0x02;
1093:./mqtt/source/mqtt.c ****         total_len += 2;
1094:./mqtt/source/mqtt.c ****         break;
1095:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL2:
1096:./mqtt/source/mqtt.c ****         fix_head->payload[0] |= 0x04;
1097:./mqtt/source/mqtt.c ****         total_len += 2;
1098:./mqtt/source/mqtt.c ****         break;
1099:./mqtt/source/mqtt.c ****     default:
1100:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1101:./mqtt/source/mqtt.c ****     }
1102:./mqtt/source/mqtt.c **** 
1103:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(total_len, fix_head->payload + 1);
1104:./mqtt/source/mqtt.c ****     if(ret < 0) {
1105:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1106:./mqtt/source/mqtt.c ****     }
1107:./mqtt/source/mqtt.c ****     fix_head->len = ret + 1;
1108:./mqtt/source/mqtt.c **** 
1109:./mqtt/source/mqtt.c ****     variable_head = MqttBuffer_AllocExtent(buf, total_len - size);
1110:./mqtt/source/mqtt.c ****     if(NULL == variable_head) {
1111:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1112:./mqtt/source/mqtt.c ****     }
1113:./mqtt/source/mqtt.c ****     cursor = variable_head->payload;
1114:./mqtt/source/mqtt.c **** 
1115:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, topic, topic_len);
1116:./mqtt/source/mqtt.c ****     if(MQTT_QOS_LEVEL0 != qos) {
1117:./mqtt/source/mqtt.c ****         Mqtt_WB16(pkt_id, cursor);
1118:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 29


1119:./mqtt/source/mqtt.c **** 
1120:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, fix_head);
1121:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, variable_head);
1122:./mqtt/source/mqtt.c ****     if(0 != size) {
1123:./mqtt/source/mqtt.c ****         MqttBuffer_Append(buf, (char*)payload, size, own);
1124:./mqtt/source/mqtt.c ****     }
1125:./mqtt/source/mqtt.c **** 
1126:./mqtt/source/mqtt.c **** 
1127:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1128:./mqtt/source/mqtt.c **** }
1129:./mqtt/source/mqtt.c **** 
1130:./mqtt/source/mqtt.c **** int Mqtt_SetPktDup(struct MqttBuffer *buf)
1131:./mqtt/source/mqtt.c **** {
1132:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
1133:./mqtt/source/mqtt.c ****     uint8_t pkt_type = ((uint8_t)buf->first_ext->payload[0]) >> 4;
1134:./mqtt/source/mqtt.c ****     if(!fix_head || (MQTT_PKT_PUBLISH != pkt_type)) {
1135:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1136:./mqtt/source/mqtt.c ****     }
1137:./mqtt/source/mqtt.c **** 
1138:./mqtt/source/mqtt.c ****     buf->first_ext->payload[0] |= 0x08;
1139:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1140:./mqtt/source/mqtt.c **** }
1141:./mqtt/source/mqtt.c **** 
1142:./mqtt/source/mqtt.c **** static int Mqtt_PackPubAckPkt(struct MqttBuffer *buf, uint16_t pkt_id)
1143:./mqtt/source/mqtt.c **** {
1144:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1145:./mqtt/source/mqtt.c **** 
1146:./mqtt/source/mqtt.c ****     if(0 == pkt_id)  {
1147:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1148:./mqtt/source/mqtt.c ****     }
1149:./mqtt/source/mqtt.c **** 
1150:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, 4);
1151:./mqtt/source/mqtt.c ****     if(!ext) {
1152:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1153:./mqtt/source/mqtt.c ****     }
1154:./mqtt/source/mqtt.c **** 
1155:./mqtt/source/mqtt.c ****     ext->payload[0]= MQTT_PKT_PUBACK << 4;
1156:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
1157:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
1158:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1159:./mqtt/source/mqtt.c **** 
1160:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1161:./mqtt/source/mqtt.c **** }
1162:./mqtt/source/mqtt.c **** 
1163:./mqtt/source/mqtt.c **** static int Mqtt_PackPubRecPkt(struct MqttBuffer *buf, uint16_t pkt_id)
1164:./mqtt/source/mqtt.c **** {
1165:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1166:./mqtt/source/mqtt.c **** 
1167:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
1168:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1169:./mqtt/source/mqtt.c ****     }
1170:./mqtt/source/mqtt.c **** 
1171:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, 4);
1172:./mqtt/source/mqtt.c ****     if(!ext) {
1173:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1174:./mqtt/source/mqtt.c ****     }
1175:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 30


1176:./mqtt/source/mqtt.c ****     ext->payload[0]= MQTT_PKT_PUBREC << 4;
1177:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
1178:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
1179:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1180:./mqtt/source/mqtt.c **** 
1181:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1182:./mqtt/source/mqtt.c **** }
1183:./mqtt/source/mqtt.c **** 
1184:./mqtt/source/mqtt.c **** static int Mqtt_PackPubRelPkt(struct MqttBuffer *buf, uint16_t pkt_id)
1185:./mqtt/source/mqtt.c **** {
 456              		.loc 1 1185 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL54:
1186:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1187:./mqtt/source/mqtt.c **** 
1188:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 461              		.loc 1 1188 0
 462 0000 B9B1     		cbz	r1, .L41
1185:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 463              		.loc 1 1185 0
 464 0002 70B5     		push	{r4, r5, r6, lr}
 465              	.LCFI3:
 466              		.cfi_def_cfa_offset 16
 467              		.cfi_offset 4, -16
 468              		.cfi_offset 5, -12
 469              		.cfi_offset 6, -8
 470              		.cfi_offset 14, -4
 471 0004 0E46     		mov	r6, r1
 472 0006 0446     		mov	r4, r0
1189:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1190:./mqtt/source/mqtt.c ****     }
1191:./mqtt/source/mqtt.c **** 
1192:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, 4);
 473              		.loc 1 1192 0
 474 0008 0421     		movs	r1, #4
 475              	.LVL55:
 476 000a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 477              	.LVL56:
 478 000e 0546     		mov	r5, r0
 479              	.LVL57:
1193:./mqtt/source/mqtt.c ****     ext->payload[0]= MQTT_PKT_PUBREL << 4 | 0x02;
 480              		.loc 1 1193 0
 481 0010 4368     		ldr	r3, [r0, #4]
 482 0012 6222     		movs	r2, #98
 483 0014 1A70     		strb	r2, [r3]
1194:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
 484              		.loc 1 1194 0
 485 0016 4368     		ldr	r3, [r0, #4]
 486 0018 0222     		movs	r2, #2
 487 001a 5A70     		strb	r2, [r3, #1]
1195:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
 488              		.loc 1 1195 0
 489 001c 4168     		ldr	r1, [r0, #4]
 490 001e 1144     		add	r1, r1, r2
 491 0020 3046     		mov	r0, r6
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 31


 492              	.LVL58:
 493 0022 FFF7FEFF 		bl	Mqtt_WB16
 494              	.LVL59:
1196:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 495              		.loc 1 1196 0
 496 0026 2946     		mov	r1, r5
 497 0028 2046     		mov	r0, r4
 498 002a FFF7FEFF 		bl	MqttBuffer_AppendExtent
 499              	.LVL60:
1197:./mqtt/source/mqtt.c **** 
1198:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 500              		.loc 1 1198 0
 501 002e 0020     		movs	r0, #0
 502 0030 70BD     		pop	{r4, r5, r6, pc}
 503              	.LVL61:
 504              	.L41:
 505              	.LCFI4:
 506              		.cfi_def_cfa_offset 0
 507              		.cfi_restore 4
 508              		.cfi_restore 5
 509              		.cfi_restore 6
 510              		.cfi_restore 14
1189:./mqtt/source/mqtt.c ****     }
 511              		.loc 1 1189 0
 512 0032 6FF00600 		mvn	r0, #6
 513              	.LVL62:
 514 0036 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE36:
 518              		.section	.text.Mqtt_PackPubCompPkt,"ax",%progbits
 519              		.align	2
 520              		.thumb
 521              		.thumb_func
 523              	Mqtt_PackPubCompPkt:
 524              	.LFB37:
1199:./mqtt/source/mqtt.c **** }
1200:./mqtt/source/mqtt.c **** 
1201:./mqtt/source/mqtt.c **** static int Mqtt_PackPubCompPkt(struct MqttBuffer *buf, uint16_t pkt_id)
1202:./mqtt/source/mqtt.c **** {
 525              		.loc 1 1202 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              	.LVL63:
1203:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1204:./mqtt/source/mqtt.c **** 
1205:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 530              		.loc 1 1205 0
 531 0000 C1B1     		cbz	r1, .L46
1202:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 532              		.loc 1 1202 0
 533 0002 70B5     		push	{r4, r5, r6, lr}
 534              	.LCFI5:
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 4, -16
 537              		.cfi_offset 5, -12
 538              		.cfi_offset 6, -8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 32


 539              		.cfi_offset 14, -4
 540 0004 0E46     		mov	r6, r1
 541 0006 0446     		mov	r4, r0
1206:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1207:./mqtt/source/mqtt.c ****     }
1208:./mqtt/source/mqtt.c **** 
1209:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, 4);
 542              		.loc 1 1209 0
 543 0008 0421     		movs	r1, #4
 544              	.LVL64:
 545 000a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 546              	.LVL65:
1210:./mqtt/source/mqtt.c ****     if(!ext) {
 547              		.loc 1 1210 0
 548 000e 0546     		mov	r5, r0
 549 0010 98B1     		cbz	r0, .L47
1211:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1212:./mqtt/source/mqtt.c ****     }
1213:./mqtt/source/mqtt.c **** 
1214:./mqtt/source/mqtt.c ****     ext->payload[0]= MQTT_PKT_PUBCOMP << 4;
 550              		.loc 1 1214 0
 551 0012 4368     		ldr	r3, [r0, #4]
 552 0014 7022     		movs	r2, #112
 553 0016 1A70     		strb	r2, [r3]
1215:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
 554              		.loc 1 1215 0
 555 0018 4368     		ldr	r3, [r0, #4]
 556 001a 0222     		movs	r2, #2
 557 001c 5A70     		strb	r2, [r3, #1]
1216:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
 558              		.loc 1 1216 0
 559 001e 4168     		ldr	r1, [r0, #4]
 560 0020 1144     		add	r1, r1, r2
 561 0022 3046     		mov	r0, r6
 562              	.LVL66:
 563 0024 FFF7FEFF 		bl	Mqtt_WB16
 564              	.LVL67:
1217:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 565              		.loc 1 1217 0
 566 0028 2946     		mov	r1, r5
 567 002a 2046     		mov	r0, r4
 568 002c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 569              	.LVL68:
1218:./mqtt/source/mqtt.c **** 
1219:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 570              		.loc 1 1219 0
 571 0030 0020     		movs	r0, #0
 572 0032 70BD     		pop	{r4, r5, r6, pc}
 573              	.LVL69:
 574              	.L46:
 575              	.LCFI6:
 576              		.cfi_def_cfa_offset 0
 577              		.cfi_restore 4
 578              		.cfi_restore 5
 579              		.cfi_restore 6
 580              		.cfi_restore 14
1206:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 33


 581              		.loc 1 1206 0
 582 0034 6FF00600 		mvn	r0, #6
 583              	.LVL70:
1220:./mqtt/source/mqtt.c **** }
 584              		.loc 1 1220 0
 585 0038 7047     		bx	lr
 586              	.LVL71:
 587              	.L47:
 588              	.LCFI7:
 589              		.cfi_def_cfa_offset 16
 590              		.cfi_offset 4, -16
 591              		.cfi_offset 5, -12
 592              		.cfi_offset 6, -8
 593              		.cfi_offset 14, -4
1211:./mqtt/source/mqtt.c ****     }
 594              		.loc 1 1211 0
 595 003a 4FF0FF30 		mov	r0, #-1
 596              	.LVL72:
 597              		.loc 1 1220 0
 598 003e 70BD     		pop	{r4, r5, r6, pc}
 599              		.cfi_endproc
 600              	.LFE37:
 602              		.section	.text.Mqtt_PackPubRecPkt,"ax",%progbits
 603              		.align	2
 604              		.thumb
 605              		.thumb_func
 607              	Mqtt_PackPubRecPkt:
 608              	.LFB35:
1164:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 609              		.loc 1 1164 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              	.LVL73:
1167:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 614              		.loc 1 1167 0
 615 0000 C1B1     		cbz	r1, .L51
1164:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 616              		.loc 1 1164 0
 617 0002 70B5     		push	{r4, r5, r6, lr}
 618              	.LCFI8:
 619              		.cfi_def_cfa_offset 16
 620              		.cfi_offset 4, -16
 621              		.cfi_offset 5, -12
 622              		.cfi_offset 6, -8
 623              		.cfi_offset 14, -4
 624 0004 0E46     		mov	r6, r1
 625 0006 0446     		mov	r4, r0
1171:./mqtt/source/mqtt.c ****     if(!ext) {
 626              		.loc 1 1171 0
 627 0008 0421     		movs	r1, #4
 628              	.LVL74:
 629 000a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 630              	.LVL75:
1172:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 631              		.loc 1 1172 0
 632 000e 0546     		mov	r5, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 34


 633 0010 98B1     		cbz	r0, .L52
1176:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
 634              		.loc 1 1176 0
 635 0012 4368     		ldr	r3, [r0, #4]
 636 0014 5022     		movs	r2, #80
 637 0016 1A70     		strb	r2, [r3]
1177:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
 638              		.loc 1 1177 0
 639 0018 4368     		ldr	r3, [r0, #4]
 640 001a 0222     		movs	r2, #2
 641 001c 5A70     		strb	r2, [r3, #1]
1178:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 642              		.loc 1 1178 0
 643 001e 4168     		ldr	r1, [r0, #4]
 644 0020 1144     		add	r1, r1, r2
 645 0022 3046     		mov	r0, r6
 646              	.LVL76:
 647 0024 FFF7FEFF 		bl	Mqtt_WB16
 648              	.LVL77:
1179:./mqtt/source/mqtt.c **** 
 649              		.loc 1 1179 0
 650 0028 2946     		mov	r1, r5
 651 002a 2046     		mov	r0, r4
 652 002c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 653              	.LVL78:
1181:./mqtt/source/mqtt.c **** }
 654              		.loc 1 1181 0
 655 0030 0020     		movs	r0, #0
 656 0032 70BD     		pop	{r4, r5, r6, pc}
 657              	.LVL79:
 658              	.L51:
 659              	.LCFI9:
 660              		.cfi_def_cfa_offset 0
 661              		.cfi_restore 4
 662              		.cfi_restore 5
 663              		.cfi_restore 6
 664              		.cfi_restore 14
1168:./mqtt/source/mqtt.c ****     }
 665              		.loc 1 1168 0
 666 0034 6FF00600 		mvn	r0, #6
 667              	.LVL80:
1182:./mqtt/source/mqtt.c **** 
 668              		.loc 1 1182 0
 669 0038 7047     		bx	lr
 670              	.LVL81:
 671              	.L52:
 672              	.LCFI10:
 673              		.cfi_def_cfa_offset 16
 674              		.cfi_offset 4, -16
 675              		.cfi_offset 5, -12
 676              		.cfi_offset 6, -8
 677              		.cfi_offset 14, -4
1173:./mqtt/source/mqtt.c ****     }
 678              		.loc 1 1173 0
 679 003a 4FF0FF30 		mov	r0, #-1
 680              	.LVL82:
1182:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 35


 681              		.loc 1 1182 0
 682 003e 70BD     		pop	{r4, r5, r6, pc}
 683              		.cfi_endproc
 684              	.LFE35:
 686              		.section	.text.Mqtt_PackPubAckPkt,"ax",%progbits
 687              		.align	2
 688              		.thumb
 689              		.thumb_func
 691              	Mqtt_PackPubAckPkt:
 692              	.LFB34:
1143:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 693              		.loc 1 1143 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL83:
1146:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 698              		.loc 1 1146 0
 699 0000 C1B1     		cbz	r1, .L56
1143:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 700              		.loc 1 1143 0
 701 0002 70B5     		push	{r4, r5, r6, lr}
 702              	.LCFI11:
 703              		.cfi_def_cfa_offset 16
 704              		.cfi_offset 4, -16
 705              		.cfi_offset 5, -12
 706              		.cfi_offset 6, -8
 707              		.cfi_offset 14, -4
 708 0004 0E46     		mov	r6, r1
 709 0006 0446     		mov	r4, r0
1150:./mqtt/source/mqtt.c ****     if(!ext) {
 710              		.loc 1 1150 0
 711 0008 0421     		movs	r1, #4
 712              	.LVL84:
 713 000a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 714              	.LVL85:
1151:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 715              		.loc 1 1151 0
 716 000e 0546     		mov	r5, r0
 717 0010 98B1     		cbz	r0, .L57
1155:./mqtt/source/mqtt.c ****     ext->payload[1] = 2;
 718              		.loc 1 1155 0
 719 0012 4368     		ldr	r3, [r0, #4]
 720 0014 4022     		movs	r2, #64
 721 0016 1A70     		strb	r2, [r3]
1156:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, ext->payload + 2);
 722              		.loc 1 1156 0
 723 0018 4368     		ldr	r3, [r0, #4]
 724 001a 0222     		movs	r2, #2
 725 001c 5A70     		strb	r2, [r3, #1]
1157:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 726              		.loc 1 1157 0
 727 001e 4168     		ldr	r1, [r0, #4]
 728 0020 1144     		add	r1, r1, r2
 729 0022 3046     		mov	r0, r6
 730              	.LVL86:
 731 0024 FFF7FEFF 		bl	Mqtt_WB16
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 36


 732              	.LVL87:
1158:./mqtt/source/mqtt.c **** 
 733              		.loc 1 1158 0
 734 0028 2946     		mov	r1, r5
 735 002a 2046     		mov	r0, r4
 736 002c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 737              	.LVL88:
1160:./mqtt/source/mqtt.c **** }
 738              		.loc 1 1160 0
 739 0030 0020     		movs	r0, #0
 740 0032 70BD     		pop	{r4, r5, r6, pc}
 741              	.LVL89:
 742              	.L56:
 743              	.LCFI12:
 744              		.cfi_def_cfa_offset 0
 745              		.cfi_restore 4
 746              		.cfi_restore 5
 747              		.cfi_restore 6
 748              		.cfi_restore 14
1147:./mqtt/source/mqtt.c ****     }
 749              		.loc 1 1147 0
 750 0034 6FF00600 		mvn	r0, #6
 751              	.LVL90:
1161:./mqtt/source/mqtt.c **** 
 752              		.loc 1 1161 0
 753 0038 7047     		bx	lr
 754              	.LVL91:
 755              	.L57:
 756              	.LCFI13:
 757              		.cfi_def_cfa_offset 16
 758              		.cfi_offset 4, -16
 759              		.cfi_offset 5, -12
 760              		.cfi_offset 6, -8
 761              		.cfi_offset 14, -4
1152:./mqtt/source/mqtt.c ****     }
 762              		.loc 1 1152 0
 763 003a 4FF0FF30 		mov	r0, #-1
 764              	.LVL92:
1161:./mqtt/source/mqtt.c **** 
 765              		.loc 1 1161 0
 766 003e 70BD     		pop	{r4, r5, r6, pc}
 767              		.cfi_endproc
 768              	.LFE34:
 770              		.section	.text.Mqtt_WB32,"ax",%progbits
 771              		.align	2
 772              		.global	Mqtt_WB32
 773              		.thumb
 774              		.thumb_func
 776              	Mqtt_WB32:
 777              	.LFB5:
 108:./mqtt/source/mqtt.c ****     uint8_t *uo = (uint8_t*)out;
 778              		.loc 1 108 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 783              	.LVL93:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 37


 110:./mqtt/source/mqtt.c ****     uo[1] = (uint8_t)(v >> 16);
 784              		.loc 1 110 0
 785 0000 030E     		lsrs	r3, r0, #24
 786 0002 0B70     		strb	r3, [r1]
 111:./mqtt/source/mqtt.c ****     uo[2] = (uint8_t)(v >> 8);
 787              		.loc 1 111 0
 788 0004 C0F30743 		ubfx	r3, r0, #16, #8
 789 0008 4B70     		strb	r3, [r1, #1]
 112:./mqtt/source/mqtt.c ****     uo[3] = (uint8_t)(v);
 790              		.loc 1 112 0
 791 000a C0F30723 		ubfx	r3, r0, #8, #8
 792 000e 8B70     		strb	r3, [r1, #2]
 113:./mqtt/source/mqtt.c **** }
 793              		.loc 1 113 0
 794 0010 C870     		strb	r0, [r1, #3]
 795 0012 7047     		bx	lr
 796              		.cfi_endproc
 797              	.LFE5:
 799              		.section	.text.Mqtt_ReadLength,"ax",%progbits
 800              		.align	2
 801              		.global	Mqtt_ReadLength
 802              		.thumb
 803              		.thumb_func
 805              	Mqtt_ReadLength:
 806              	.LFB6:
 117:./mqtt/source/mqtt.c ****     int i;
 807              		.loc 1 117 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812              	.LVL94:
 813 0000 70B4     		push	{r4, r5, r6}
 814              	.LCFI14:
 815              		.cfi_def_cfa_offset 12
 816              		.cfi_offset 4, -12
 817              		.cfi_offset 5, -8
 818              		.cfi_offset 6, -4
 819              	.LVL95:
 122:./mqtt/source/mqtt.c ****     for(i = 0; i < size; ++i) {
 820              		.loc 1 122 0
 821 0002 0023     		movs	r3, #0
 822 0004 1360     		str	r3, [r2]
 823              	.LVL96:
 120:./mqtt/source/mqtt.c **** 
 824              		.loc 1 120 0
 825 0006 0125     		movs	r5, #1
 123:./mqtt/source/mqtt.c ****         *len += (in[i] & 0x7f) * multiplier;
 826              		.loc 1 123 0
 827 0008 10E0     		b	.L61
 828              	.LVL97:
 829              	.L64:
 124:./mqtt/source/mqtt.c **** 
 830              		.loc 1 124 0
 831 000a C45C     		ldrb	r4, [r0, r3]	@ zero_extendqisi2
 832 000c 04F07F04 		and	r4, r4, #127
 833 0010 1668     		ldr	r6, [r2]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 38


 834 0012 05FB0464 		mla	r4, r5, r4, r6
 835 0016 1460     		str	r4, [r2]
 126:./mqtt/source/mqtt.c ****             return i + 1;
 836              		.loc 1 126 0
 837 0018 C456     		ldrsb	r4, [r0, r3]
 838 001a 002C     		cmp	r4, #0
 839 001c 01DB     		blt	.L62
 127:./mqtt/source/mqtt.c ****         }
 840              		.loc 1 127 0
 841 001e 581C     		adds	r0, r3, #1
 842              	.LVL98:
 843 0020 0BE0     		b	.L63
 844              	.LVL99:
 845              	.L62:
 130:./mqtt/source/mqtt.c ****         if(multiplier >= 128 * 128 * 128) {
 846              		.loc 1 130 0
 847 0022 ED01     		lsls	r5, r5, #7
 848              	.LVL100:
 131:./mqtt/source/mqtt.c ****             return -2; // error, out of range
 849              		.loc 1 131 0
 850 0024 B5F5001F 		cmp	r5, #2097152
 851 0028 05D2     		bcs	.L65
 123:./mqtt/source/mqtt.c ****         *len += (in[i] & 0x7f) * multiplier;
 852              		.loc 1 123 0 discriminator 2
 853 002a 0133     		adds	r3, r3, #1
 854              	.LVL101:
 855              	.L61:
 123:./mqtt/source/mqtt.c ****         *len += (in[i] & 0x7f) * multiplier;
 856              		.loc 1 123 0 is_stmt 0 discriminator 1
 857 002c 8B42     		cmp	r3, r1
 858 002e ECDB     		blt	.L64
 136:./mqtt/source/mqtt.c **** }
 859              		.loc 1 136 0 is_stmt 1
 860 0030 4FF0FF30 		mov	r0, #-1
 861              	.LVL102:
 862 0034 01E0     		b	.L63
 863              	.LVL103:
 864              	.L65:
 132:./mqtt/source/mqtt.c ****         }
 865              		.loc 1 132 0
 866 0036 6FF00100 		mvn	r0, #1
 867              	.LVL104:
 868              	.L63:
 137:./mqtt/source/mqtt.c **** 
 869              		.loc 1 137 0
 870 003a 70BC     		pop	{r4, r5, r6}
 871              	.LCFI15:
 872              		.cfi_restore 6
 873              		.cfi_restore 5
 874              		.cfi_restore 4
 875              		.cfi_def_cfa_offset 0
 876              	.LVL105:
 877 003c 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE6:
 881 003e 00BF     		.section	.text.Mqtt_DumpLength,"ax",%progbits
 882              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 39


 883              		.global	Mqtt_DumpLength
 884              		.thumb
 885              		.thumb_func
 887              	Mqtt_DumpLength:
 888              	.LFB7:
 140:./mqtt/source/mqtt.c ****     int i;
 889              		.loc 1 140 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893              		@ link register save eliminated.
 894              	.LVL106:
 142:./mqtt/source/mqtt.c ****         *((uint8_t*)buf) = len % 128;
 895              		.loc 1 142 0
 896 0000 0122     		movs	r2, #1
 897 0002 09E0     		b	.L68
 898              	.LVL107:
 899              	.L70:
 143:./mqtt/source/mqtt.c ****         len /= 128;
 900              		.loc 1 143 0
 901 0004 00F07F03 		and	r3, r0, #127
 902 0008 0B70     		strb	r3, [r1]
 903              	.LVL108:
 145:./mqtt/source/mqtt.c ****             *buf |= 128;
 904              		.loc 1 145 0
 905 000a C009     		lsrs	r0, r0, #7
 906              	.LVL109:
 907 000c 09D0     		beq	.L71
 146:./mqtt/source/mqtt.c ****             ++buf;
 908              		.loc 1 146 0
 909 000e 63F07F03 		orn	r3, r3, #127
 910 0012 01F8013B 		strb	r3, [r1], #1
 911              	.LVL110:
 142:./mqtt/source/mqtt.c ****         *((uint8_t*)buf) = len % 128;
 912              		.loc 1 142 0
 913 0016 0132     		adds	r2, r2, #1
 914              	.LVL111:
 915              	.L68:
 142:./mqtt/source/mqtt.c ****         *((uint8_t*)buf) = len % 128;
 916              		.loc 1 142 0 is_stmt 0 discriminator 1
 917 0018 042A     		cmp	r2, #4
 918 001a F3DD     		ble	.L70
 154:./mqtt/source/mqtt.c **** }
 919              		.loc 1 154 0 is_stmt 1
 920 001c 4FF0FF30 		mov	r0, #-1
 921              	.LVL112:
 922 0020 7047     		bx	lr
 923              	.LVL113:
 924              	.L71:
 150:./mqtt/source/mqtt.c ****         }
 925              		.loc 1 150 0
 926 0022 1046     		mov	r0, r2
 927              	.LVL114:
 155:./mqtt/source/mqtt.c **** 
 928              		.loc 1 155 0
 929 0024 7047     		bx	lr
 930              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 40


 931              	.LFE7:
 933 0026 00BF     		.section	.text.Mqtt_AppendLength,"ax",%progbits
 934              		.align	2
 935              		.global	Mqtt_AppendLength
 936              		.thumb
 937              		.thumb_func
 939              	Mqtt_AppendLength:
 940              	.LFB8:
 158:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 941              		.loc 1 158 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 8
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL115:
 946 0000 30B5     		push	{r4, r5, lr}
 947              	.LCFI16:
 948              		.cfi_def_cfa_offset 12
 949              		.cfi_offset 4, -12
 950              		.cfi_offset 5, -8
 951              		.cfi_offset 14, -4
 952 0002 83B0     		sub	sp, sp, #12
 953              	.LCFI17:
 954              		.cfi_def_cfa_offset 24
 955 0004 0D46     		mov	r5, r1
 159:./mqtt/source/mqtt.c ****     uint32_t pkt_len;
 956              		.loc 1 159 0
 957 0006 0468     		ldr	r4, [r0]
 958              	.LVL116:
 164:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 959              		.loc 1 164 0
 960 0008 6068     		ldr	r0, [r4, #4]
 961              	.LVL117:
 962 000a 01AA     		add	r2, sp, #4
 963 000c 0421     		movs	r1, #4
 964              	.LVL118:
 965 000e 0130     		adds	r0, r0, #1
 966 0010 FFF7FEFF 		bl	Mqtt_ReadLength
 967              	.LVL119:
 968 0014 0028     		cmp	r0, #0
 969 0016 0DDB     		blt	.L74
 168:./mqtt/source/mqtt.c **** 
 970              		.loc 1 168 0
 971 0018 0198     		ldr	r0, [sp, #4]
 972 001a 2844     		add	r0, r0, r5
 973 001c 0190     		str	r0, [sp, #4]
 170:./mqtt/source/mqtt.c ****     if(fix_head->len < 2) {
 974              		.loc 1 170 0
 975 001e 6168     		ldr	r1, [r4, #4]
 976 0020 0131     		adds	r1, r1, #1
 977 0022 FFF7FEFF 		bl	Mqtt_DumpLength
 978              	.LVL120:
 979 0026 0130     		adds	r0, r0, #1
 980 0028 2060     		str	r0, [r4]
 171:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 981              		.loc 1 171 0
 982 002a 0128     		cmp	r0, #1
 983 002c 05D8     		bhi	.L75
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 41


 172:./mqtt/source/mqtt.c ****     }
 984              		.loc 1 172 0
 985 002e 6FF00700 		mvn	r0, #7
 986 0032 03E0     		b	.L73
 987              	.L74:
 165:./mqtt/source/mqtt.c ****     }
 988              		.loc 1 165 0
 989 0034 6FF00600 		mvn	r0, #6
 990 0038 00E0     		b	.L73
 991              	.L75:
 175:./mqtt/source/mqtt.c **** }
 992              		.loc 1 175 0
 993 003a 0020     		movs	r0, #0
 994              	.L73:
 176:./mqtt/source/mqtt.c **** 
 995              		.loc 1 176 0
 996 003c 03B0     		add	sp, sp, #12
 997              	.LCFI18:
 998              		.cfi_def_cfa_offset 12
 999              		@ sp needed
 1000 003e 30BD     		pop	{r4, r5, pc}
 1001              		.cfi_endproc
 1002              	.LFE8:
 1004              		.section	.text.Mqtt_EraseLength,"ax",%progbits
 1005              		.align	2
 1006              		.global	Mqtt_EraseLength
 1007              		.thumb
 1008              		.thumb_func
 1010              	Mqtt_EraseLength:
 1011              	.LFB9:
 179:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 1012              		.loc 1 179 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 8
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              	.LVL121:
 1017 0000 70B5     		push	{r4, r5, r6, lr}
 1018              	.LCFI19:
 1019              		.cfi_def_cfa_offset 16
 1020              		.cfi_offset 4, -16
 1021              		.cfi_offset 5, -12
 1022              		.cfi_offset 6, -8
 1023              		.cfi_offset 14, -4
 1024 0002 82B0     		sub	sp, sp, #8
 1025              	.LCFI20:
 1026              		.cfi_def_cfa_offset 24
 1027 0004 0546     		mov	r5, r0
 1028 0006 0E46     		mov	r6, r1
 180:./mqtt/source/mqtt.c ****     uint32_t pkt_len;
 1029              		.loc 1 180 0
 1030 0008 0468     		ldr	r4, [r0]
 1031              	.LVL122:
 185:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 1032              		.loc 1 185 0
 1033 000a 6068     		ldr	r0, [r4, #4]
 1034              	.LVL123:
 1035 000c 01AA     		add	r2, sp, #4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 42


 1036 000e 0421     		movs	r1, #4
 1037              	.LVL124:
 1038 0010 0130     		adds	r0, r0, #1
 1039 0012 FFF7FEFF 		bl	Mqtt_ReadLength
 1040              	.LVL125:
 1041 0016 0028     		cmp	r0, #0
 1042 0018 0FDB     		blt	.L79
 189:./mqtt/source/mqtt.c ****         // critical bug
 1043              		.loc 1 189 0
 1044 001a 0198     		ldr	r0, [sp, #4]
 1045 001c B042     		cmp	r0, r6
 1046 001e 0FD3     		bcc	.L80
 194:./mqtt/source/mqtt.c ****     buf->buffered_bytes -= len;
 1047              		.loc 1 194 0
 1048 0020 801B     		subs	r0, r0, r6
 1049 0022 0190     		str	r0, [sp, #4]
 195:./mqtt/source/mqtt.c **** 
 1050              		.loc 1 195 0
 1051 0024 EB69     		ldr	r3, [r5, #28]
 1052 0026 9E1B     		subs	r6, r3, r6
 1053              	.LVL126:
 1054 0028 EE61     		str	r6, [r5, #28]
 197:./mqtt/source/mqtt.c ****     //assert(fix_head->len >= 2);
 1055              		.loc 1 197 0
 1056 002a 6168     		ldr	r1, [r4, #4]
 1057 002c 0131     		adds	r1, r1, #1
 1058 002e FFF7FEFF 		bl	Mqtt_DumpLength
 1059              	.LVL127:
 1060 0032 0130     		adds	r0, r0, #1
 1061 0034 2060     		str	r0, [r4]
 200:./mqtt/source/mqtt.c **** }
 1062              		.loc 1 200 0
 1063 0036 0020     		movs	r0, #0
 1064 0038 04E0     		b	.L78
 1065              	.LVL128:
 1066              	.L79:
 186:./mqtt/source/mqtt.c ****     }
 1067              		.loc 1 186 0
 1068 003a 6FF00600 		mvn	r0, #6
 1069 003e 01E0     		b	.L78
 1070              	.L80:
 191:./mqtt/source/mqtt.c ****     }
 1071              		.loc 1 191 0
 1072 0040 6FF00A00 		mvn	r0, #10
 1073              	.LVL129:
 1074              	.L78:
 201:./mqtt/source/mqtt.c **** 
 1075              		.loc 1 201 0
 1076 0044 02B0     		add	sp, sp, #8
 1077              	.LCFI21:
 1078              		.cfi_def_cfa_offset 16
 1079              		@ sp needed
 1080 0046 70BD     		pop	{r4, r5, r6, pc}
 1081              		.cfi_endproc
 1082              	.LFE9:
 1084              		.section	.text.Mqtt_PktWriteString,"ax",%progbits
 1085              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 43


 1086              		.global	Mqtt_PktWriteString
 1087              		.thumb
 1088              		.thumb_func
 1090              	Mqtt_PktWriteString:
 1091              	.LFB10:
 204:./mqtt/source/mqtt.c ****     Mqtt_WB16(len, *buf);
 1092              		.loc 1 204 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL130:
 1097 0000 70B5     		push	{r4, r5, r6, lr}
 1098              	.LCFI22:
 1099              		.cfi_def_cfa_offset 16
 1100              		.cfi_offset 4, -16
 1101              		.cfi_offset 5, -12
 1102              		.cfi_offset 6, -8
 1103              		.cfi_offset 14, -4
 1104 0002 0546     		mov	r5, r0
 1105 0004 0E46     		mov	r6, r1
 1106 0006 1446     		mov	r4, r2
 205:./mqtt/source/mqtt.c ****     memcpy(*buf + 2, str, len);
 1107              		.loc 1 205 0
 1108 0008 0168     		ldr	r1, [r0]
 1109              	.LVL131:
 1110 000a 1046     		mov	r0, r2
 1111              	.LVL132:
 1112 000c FFF7FEFF 		bl	Mqtt_WB16
 1113              	.LVL133:
 206:./mqtt/source/mqtt.c ****     *buf += 2 + len;
 1114              		.loc 1 206 0
 1115 0010 2868     		ldr	r0, [r5]
 1116 0012 2246     		mov	r2, r4
 1117 0014 3146     		mov	r1, r6
 1118 0016 0230     		adds	r0, r0, #2
 1119 0018 FFF7FEFF 		bl	memcpy
 1120              	.LVL134:
 207:./mqtt/source/mqtt.c **** }
 1121              		.loc 1 207 0
 1122 001c 0234     		adds	r4, r4, #2
 1123 001e 2B68     		ldr	r3, [r5]
 1124 0020 1C44     		add	r4, r4, r3
 1125 0022 2C60     		str	r4, [r5]
 1126 0024 70BD     		pop	{r4, r5, r6, pc}
 1127              		.cfi_endproc
 1128              	.LFE10:
 1130 0026 00BF     		.section	.text.Mqtt_CheckClentIdentifier,"ax",%progbits
 1131              		.align	2
 1132              		.global	Mqtt_CheckClentIdentifier
 1133              		.thumb
 1134              		.thumb_func
 1136              	Mqtt_CheckClentIdentifier:
 1137              	.LFB11:
 211:./mqtt/source/mqtt.c ****     int len;
 1138              		.loc 1 211 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 44


 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              	.LVL135:
 1143 0000 38B5     		push	{r3, r4, r5, lr}
 1144              	.LCFI23:
 1145              		.cfi_def_cfa_offset 16
 1146              		.cfi_offset 3, -16
 1147              		.cfi_offset 4, -12
 1148              		.cfi_offset 5, -8
 1149              		.cfi_offset 14, -4
 1150 0002 0546     		mov	r5, r0
 1151              	.LVL136:
 213:./mqtt/source/mqtt.c ****         if(!isalnum(id[len])) {
 1152              		.loc 1 213 0
 1153 0004 0024     		movs	r4, #0
 1154 0006 08E0     		b	.L85
 1155              	.LVL137:
 1156              	.L87:
 214:./mqtt/source/mqtt.c ****             return -1;
 1157              		.loc 1 214 0
 1158 0008 FFF7FEFF 		bl	__locale_ctype_ptr
 1159              	.LVL138:
 1160 000c 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 1161 000e 1844     		add	r0, r0, r3
 1162 0010 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1163 0012 13F0070F 		tst	r3, #7
 1164 0016 05D0     		beq	.L88
 213:./mqtt/source/mqtt.c ****         if(!isalnum(id[len])) {
 1165              		.loc 1 213 0 discriminator 2
 1166 0018 0134     		adds	r4, r4, #1
 1167              	.LVL139:
 1168              	.L85:
 213:./mqtt/source/mqtt.c ****         if(!isalnum(id[len])) {
 1169              		.loc 1 213 0 is_stmt 0 discriminator 1
 1170 001a 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 1171 001c 002B     		cmp	r3, #0
 1172 001e F3D1     		bne	.L87
 219:./mqtt/source/mqtt.c **** }
 1173              		.loc 1 219 0 is_stmt 1
 1174 0020 2046     		mov	r0, r4
 1175 0022 38BD     		pop	{r3, r4, r5, pc}
 1176              	.LVL140:
 1177              	.L88:
 215:./mqtt/source/mqtt.c ****         }
 1178              		.loc 1 215 0
 1179 0024 4FF0FF30 		mov	r0, #-1
 220:./mqtt/source/mqtt.c **** 
 1180              		.loc 1 220 0
 1181 0028 38BD     		pop	{r3, r4, r5, pc}
 1182              		.cfi_endproc
 1183              	.LFE11:
 1185 002a 00BF     		.section	.text.Mqtt_GetDataPointPktInfo,"ax",%progbits
 1186              		.align	2
 1187              		.global	Mqtt_GetDataPointPktInfo
 1188              		.thumb
 1189              		.thumb_func
 1191              	Mqtt_GetDataPointPktInfo:
 1192              	.LFB14:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 45


 310:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 1193              		.loc 1 310 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198              	.LVL141:
 311:./mqtt/source/mqtt.c ****     struct MqttExtent *first_payload;
 1199              		.loc 1 311 0
 1200 0000 0268     		ldr	r2, [r0]
 1201              	.LVL142:
 315:./mqtt/source/mqtt.c ****         return NULL;
 1202              		.loc 1 315 0
 1203 0002 BAB1     		cbz	r2, .L92
 319:./mqtt/source/mqtt.c ****         return NULL;
 1204              		.loc 1 319 0
 1205 0004 5368     		ldr	r3, [r2, #4]
 1206 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1207 0008 1B09     		lsrs	r3, r3, #4
 1208 000a 032B     		cmp	r3, #3
 1209 000c 14D1     		bne	.L93
 323:./mqtt/source/mqtt.c ****        (MQTT_DPTYPE_TRIPLE != first_payload->payload[0])) {
 1210              		.loc 1 323 0
 1211 000e 9368     		ldr	r3, [r2, #8]
 1212 0010 A3B1     		cbz	r3, .L94
 323:./mqtt/source/mqtt.c ****        (MQTT_DPTYPE_TRIPLE != first_payload->payload[0])) {
 1213              		.loc 1 323 0 is_stmt 0 discriminator 1
 1214 0012 9B68     		ldr	r3, [r3, #8]
 1215              	.LVL143:
 1216 0014 A3B1     		cbz	r3, .L95
 324:./mqtt/source/mqtt.c ****         return NULL;
 1217              		.loc 1 324 0 is_stmt 1 discriminator 2
 1218 0016 5A68     		ldr	r2, [r3, #4]
 1219              	.LVL144:
 1220 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 323:./mqtt/source/mqtt.c ****        (MQTT_DPTYPE_TRIPLE != first_payload->payload[0])) {
 1221              		.loc 1 323 0 discriminator 2
 1222 001a 0229     		cmp	r1, #2
 1223 001c 12D1     		bne	.L96
 328:./mqtt/source/mqtt.c ****         return NULL;
 1224              		.loc 1 328 0
 1225 001e 1B68     		ldr	r3, [r3]
 1226              	.LVL145:
 1227 0020 062B     		cmp	r3, #6
 1228 0022 11D1     		bne	.L97
 332:./mqtt/source/mqtt.c ****     if(DATA_POINT_PKT_TAG != info->tag) {
 1229              		.loc 1 332 0
 1230 0024 901C     		adds	r0, r2, #2
 1231              	.LVL146:
 333:./mqtt/source/mqtt.c ****         return NULL;
 1232              		.loc 1 333 0
 1233 0026 B2F90220 		ldrsh	r2, [r2, #2]
 1234 002a 084B     		ldr	r3, .L99
 1235 002c 9A42     		cmp	r2, r3
 1236 002e 0CD0     		beq	.L91
 334:./mqtt/source/mqtt.c ****     }
 1237              		.loc 1 334 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 46


 1238 0030 0020     		movs	r0, #0
 1239              	.LVL147:
 1240 0032 7047     		bx	lr
 1241              	.LVL148:
 1242              	.L92:
 316:./mqtt/source/mqtt.c ****     }
 1243              		.loc 1 316 0
 1244 0034 0020     		movs	r0, #0
 1245              	.LVL149:
 1246 0036 7047     		bx	lr
 1247              	.LVL150:
 1248              	.L93:
 320:./mqtt/source/mqtt.c ****     }
 1249              		.loc 1 320 0
 1250 0038 0020     		movs	r0, #0
 1251              	.LVL151:
 1252 003a 7047     		bx	lr
 1253              	.LVL152:
 1254              	.L94:
 325:./mqtt/source/mqtt.c ****     }
 1255              		.loc 1 325 0
 1256 003c 0020     		movs	r0, #0
 1257              	.LVL153:
 1258 003e 7047     		bx	lr
 1259              	.LVL154:
 1260              	.L95:
 1261 0040 0020     		movs	r0, #0
 1262              	.LVL155:
 1263 0042 7047     		bx	lr
 1264              	.LVL156:
 1265              	.L96:
 1266 0044 0020     		movs	r0, #0
 1267              	.LVL157:
 1268 0046 7047     		bx	lr
 1269              	.LVL158:
 1270              	.L97:
 329:./mqtt/source/mqtt.c ****     }
 1271              		.loc 1 329 0
 1272 0048 0020     		movs	r0, #0
 1273              	.LVL159:
 1274              	.L91:
 338:./mqtt/source/mqtt.c **** 
 1275              		.loc 1 338 0
 1276 004a 7047     		bx	lr
 1277              	.L100:
 1278              		.align	2
 1279              	.L99:
 1280 004c 9CC1FFFF 		.word	-15972
 1281              		.cfi_endproc
 1282              	.LFE14:
 1284              		.section	.text.Mqtt_HasIllegalCharacter,"ax",%progbits
 1285              		.align	2
 1286              		.global	Mqtt_HasIllegalCharacter
 1287              		.thumb
 1288              		.thumb_func
 1290              	Mqtt_HasIllegalCharacter:
 1291              	.LFB15:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 47


 341:./mqtt/source/mqtt.c ****     // TODO:
 1292              		.loc 1 341 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              		@ link register save eliminated.
 1297              	.LVL160:
 344:./mqtt/source/mqtt.c **** 
 1298              		.loc 1 344 0
 1299 0000 0020     		movs	r0, #0
 1300              	.LVL161:
 1301 0002 7047     		bx	lr
 1302              		.cfi_endproc
 1303              	.LFE15:
 1305              		.section	.text.Mqtt_AppendDPSubvalue,"ax",%progbits
 1306              		.align	2
 1307              		.thumb
 1308              		.thumb_func
 1310              	Mqtt_AppendDPSubvalue:
 1311              	.LFB53:
1221:./mqtt/source/mqtt.c **** 
1222:./mqtt/source/mqtt.c **** int Mqtt_PackSubscribePkt(struct MqttBuffer *buf, uint16_t pkt_id,
1223:./mqtt/source/mqtt.c ****                           enum MqttQosLevel qos, const char *topics[], int topics_len)
1224:./mqtt/source/mqtt.c **** {
1225:./mqtt/source/mqtt.c ****     int i=0;
1226:./mqtt/source/mqtt.c ****     int ret;
1227:./mqtt/source/mqtt.c ****     size_t topic_len, remaining_len;
1228:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head, *ext;
1229:./mqtt/source/mqtt.c ****     char *cursor;
1230:./mqtt/source/mqtt.c ****     size_t topic_total_len = 0;
1231:./mqtt/source/mqtt.c ****     const char *topic;
1232:./mqtt/source/mqtt.c **** 
1233:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
1234:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1235:./mqtt/source/mqtt.c ****     }
1236:./mqtt/source/mqtt.c **** 
1237:./mqtt/source/mqtt.c ****     
1238:./mqtt/source/mqtt.c ****     for(i=0; i<topics_len; ++i){
1239:./mqtt/source/mqtt.c ****         topic = topics[i];
1240:./mqtt/source/mqtt.c ****         if(!topic)
1241:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
1242:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
1243:./mqtt/source/mqtt.c ****         topic_total_len += topic_len;
1244:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
1245:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
1246:./mqtt/source/mqtt.c ****         }
1247:./mqtt/source/mqtt.c ****     }
1248:./mqtt/source/mqtt.c **** 
1249:./mqtt/source/mqtt.c ****     fixed_head = MqttBuffer_AllocExtent(buf, 5);
1250:./mqtt/source/mqtt.c ****     if(NULL == fixed_head) {
1251:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1252:./mqtt/source/mqtt.c ****     }
1253:./mqtt/source/mqtt.c ****     fixed_head->payload[0] = (char)((MQTT_PKT_SUBSCRIBE << 4) | 0x00);
1254:./mqtt/source/mqtt.c **** 
1255:./mqtt/source/mqtt.c ****     remaining_len = 2 + 2*topics_len+ topic_total_len + topics_len;  // 2 bytes packet id, 2 bytes 
1256:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, remaining_len);
1257:./mqtt/source/mqtt.c ****     if(NULL == ext) {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 48


1258:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1259:./mqtt/source/mqtt.c ****     }
1260:./mqtt/source/mqtt.c **** 
1261:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
1262:./mqtt/source/mqtt.c ****     if(ret < 0) {
1263:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1264:./mqtt/source/mqtt.c ****     }
1265:./mqtt/source/mqtt.c ****     fixed_head->len = ret + 1;
1266:./mqtt/source/mqtt.c **** 
1267:./mqtt/source/mqtt.c ****     cursor = ext->payload;
1268:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, cursor);
1269:./mqtt/source/mqtt.c ****     cursor += 2;
1270:./mqtt/source/mqtt.c **** 
1271:./mqtt/source/mqtt.c ****     //write payload
1272:./mqtt/source/mqtt.c ****     for(i=0; i<topics_len; ++i){
1273:./mqtt/source/mqtt.c ****         topic = topics[i];
1274:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
1275:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, topic, topic_len);
1276:./mqtt/source/mqtt.c ****         
1277:./mqtt/source/mqtt.c ****         //write request qos		add by jw
1278:./mqtt/source/mqtt.c ****         Mqtt_WB8((char)qos, cursor);
1279:./mqtt/source/mqtt.c ****         cursor++;
1280:./mqtt/source/mqtt.c ****     }
1281:./mqtt/source/mqtt.c ****     
1282:./mqtt/source/mqtt.c **** 
1283:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, fixed_head);
1284:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1285:./mqtt/source/mqtt.c **** 
1286:./mqtt/source/mqtt.c **** 
1287:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1288:./mqtt/source/mqtt.c **** }
1289:./mqtt/source/mqtt.c **** 
1290:./mqtt/source/mqtt.c **** int Mqtt_AppendSubscribeTopic(struct MqttBuffer *buf, const char *topic, enum MqttQosLevel qos)
1291:./mqtt/source/mqtt.c **** {
1292:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head = buf->first_ext;
1293:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1294:./mqtt/source/mqtt.c ****     size_t topic_len;
1295:./mqtt/source/mqtt.c ****     uint32_t remaining_len;
1296:./mqtt/source/mqtt.c ****     char *cursor;
1297:./mqtt/source/mqtt.c ****     int ret;
1298:./mqtt/source/mqtt.c ****     const char sub_type = (char)(MQTT_PKT_SUBSCRIBE << 4 | 0x02);
1299:./mqtt/source/mqtt.c ****     if(!fixed_head || (sub_type != fixed_head->payload[0]) || !topic) {
1300:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1301:./mqtt/source/mqtt.c ****     }
1302:./mqtt/source/mqtt.c **** 
1303:./mqtt/source/mqtt.c ****     topic_len = strlen(topic);
1304:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, topic_len + 3);
1305:./mqtt/source/mqtt.c ****     if(!ext) {
1306:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1307:./mqtt/source/mqtt.c ****     }
1308:./mqtt/source/mqtt.c **** 
1309:./mqtt/source/mqtt.c ****     cursor = ext->payload;
1310:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, topic, topic_len);
1311:./mqtt/source/mqtt.c ****     cursor[0] = qos;
1312:./mqtt/source/mqtt.c **** 
1313:./mqtt/source/mqtt.c ****     if(Mqtt_ReadLength(fixed_head->payload + 1, 4, &remaining_len) < 0) {
1314:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 49


1315:./mqtt/source/mqtt.c ****     }
1316:./mqtt/source/mqtt.c **** 
1317:./mqtt/source/mqtt.c ****     remaining_len += topic_len + 3;
1318:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
1319:./mqtt/source/mqtt.c ****     if(ret < 0) {
1320:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1321:./mqtt/source/mqtt.c ****     }
1322:./mqtt/source/mqtt.c **** 
1323:./mqtt/source/mqtt.c ****     fixed_head->len = ret + 1;
1324:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1325:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1326:./mqtt/source/mqtt.c **** }
1327:./mqtt/source/mqtt.c **** 
1328:./mqtt/source/mqtt.c **** int Mqtt_PackUnsubscribePkt(struct MqttBuffer *buf, uint16_t pkt_id, const char *topics[], int topi
1329:./mqtt/source/mqtt.c **** {
1330:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head, *ext;
1331:./mqtt/source/mqtt.c ****     size_t topic_len;
1332:./mqtt/source/mqtt.c ****     uint32_t remaining_len;
1333:./mqtt/source/mqtt.c ****     char *cursor;
1334:./mqtt/source/mqtt.c ****     int ret;
1335:./mqtt/source/mqtt.c ****     int topic_total_len = 0;
1336:./mqtt/source/mqtt.c ****     int i;
1337:./mqtt/source/mqtt.c ****     const char* topic;
1338:./mqtt/source/mqtt.c **** 
1339:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
1340:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1341:./mqtt/source/mqtt.c ****     }
1342:./mqtt/source/mqtt.c **** 
1343:./mqtt/source/mqtt.c ****     for(i=0; i<topics_len; ++i){
1344:./mqtt/source/mqtt.c ****         topic = topics[i];
1345:./mqtt/source/mqtt.c ****         if(!topic)
1346:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
1347:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
1348:./mqtt/source/mqtt.c ****         topic_total_len += topic_len;
1349:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
1350:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
1351:./mqtt/source/mqtt.c ****         }
1352:./mqtt/source/mqtt.c ****     }
1353:./mqtt/source/mqtt.c **** 
1354:./mqtt/source/mqtt.c ****     remaining_len = 2 + 2*topics_len + topic_total_len; // 2 bytes for packet id + 2 bytest topic_l
1355:./mqtt/source/mqtt.c **** 
1356:./mqtt/source/mqtt.c ****     fixed_head = MqttBuffer_AllocExtent(buf, 5);
1357:./mqtt/source/mqtt.c ****     if(!fixed_head) {
1358:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1359:./mqtt/source/mqtt.c ****     }
1360:./mqtt/source/mqtt.c **** 
1361:./mqtt/source/mqtt.c ****     fixed_head->payload[0] = (char)(MQTT_PKT_UNSUBSCRIBE << 4 | 0x00);
1362:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
1363:./mqtt/source/mqtt.c ****     if(ret < 0) {
1364:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1365:./mqtt/source/mqtt.c ****     }
1366:./mqtt/source/mqtt.c ****     fixed_head->len = ret + 1;
1367:./mqtt/source/mqtt.c **** 
1368:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, remaining_len);
1369:./mqtt/source/mqtt.c ****     if(!ext) {
1370:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1371:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 50


1372:./mqtt/source/mqtt.c **** 
1373:./mqtt/source/mqtt.c ****     cursor = ext->payload;
1374:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, cursor);
1375:./mqtt/source/mqtt.c ****     cursor += 2;
1376:./mqtt/source/mqtt.c **** 
1377:./mqtt/source/mqtt.c ****     //write paylod
1378:./mqtt/source/mqtt.c ****     for(i=0; i<topics_len; ++i){
1379:./mqtt/source/mqtt.c ****         topic = topics[i];
1380:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
1381:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, topic, topic_len);
1382:./mqtt/source/mqtt.c ****     }
1383:./mqtt/source/mqtt.c **** 
1384:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, fixed_head);
1385:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1386:./mqtt/source/mqtt.c **** 
1387:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1388:./mqtt/source/mqtt.c **** }
1389:./mqtt/source/mqtt.c **** 
1390:./mqtt/source/mqtt.c **** int Mqtt_AppendUnsubscribeTopic(struct MqttBuffer *buf, const char *topic)
1391:./mqtt/source/mqtt.c **** {
1392:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head = buf->first_ext;
1393:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1394:./mqtt/source/mqtt.c ****     size_t topic_len;
1395:./mqtt/source/mqtt.c ****     uint32_t remaining_len;
1396:./mqtt/source/mqtt.c ****     char *cursor;
1397:./mqtt/source/mqtt.c ****     int ret;
1398:./mqtt/source/mqtt.c ****     const char unsub_type =(char)(MQTT_PKT_UNSUBSCRIBE << 4 | 0x02);
1399:./mqtt/source/mqtt.c ****     if(!fixed_head || (unsub_type != fixed_head->payload[0]) || !topic) {
1400:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1401:./mqtt/source/mqtt.c ****     }
1402:./mqtt/source/mqtt.c **** 
1403:./mqtt/source/mqtt.c ****     topic_len = strlen(topic);
1404:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, topic_len + 2);
1405:./mqtt/source/mqtt.c ****     if(!ext) {
1406:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1407:./mqtt/source/mqtt.c ****     }
1408:./mqtt/source/mqtt.c **** 
1409:./mqtt/source/mqtt.c ****     cursor = ext->payload;
1410:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, topic, topic_len);
1411:./mqtt/source/mqtt.c **** 
1412:./mqtt/source/mqtt.c ****     if(Mqtt_ReadLength(fixed_head->payload + 1, 4, &remaining_len) < 0) {
1413:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1414:./mqtt/source/mqtt.c ****     }
1415:./mqtt/source/mqtt.c **** 
1416:./mqtt/source/mqtt.c ****     remaining_len += topic_len + 2;
1417:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
1418:./mqtt/source/mqtt.c ****     if(ret < 0) {
1419:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
1420:./mqtt/source/mqtt.c ****     }
1421:./mqtt/source/mqtt.c ****     fixed_head->len = ret + 1;
1422:./mqtt/source/mqtt.c **** 
1423:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1424:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1425:./mqtt/source/mqtt.c **** }
1426:./mqtt/source/mqtt.c **** 
1427:./mqtt/source/mqtt.c **** int Mqtt_PackPingReqPkt(struct MqttBuffer *buf)
1428:./mqtt/source/mqtt.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 51


1429:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, 2);
1430:./mqtt/source/mqtt.c ****     if(!ext) {
1431:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1432:./mqtt/source/mqtt.c ****     }
1433:./mqtt/source/mqtt.c **** 
1434:./mqtt/source/mqtt.c ****     ext->payload[0] = (char)(MQTT_PKT_PINGREQ << 4);
1435:./mqtt/source/mqtt.c ****     ext->payload[1] = 0;
1436:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1437:./mqtt/source/mqtt.c **** 
1438:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1439:./mqtt/source/mqtt.c **** }
1440:./mqtt/source/mqtt.c **** 
1441:./mqtt/source/mqtt.c **** int Mqtt_PackDisconnectPkt(struct MqttBuffer *buf)
1442:./mqtt/source/mqtt.c **** {
1443:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, 2);
1444:./mqtt/source/mqtt.c ****     if(!ext) {
1445:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1446:./mqtt/source/mqtt.c ****     }
1447:./mqtt/source/mqtt.c **** 
1448:./mqtt/source/mqtt.c ****     ext->payload[0] = (char)(MQTT_PKT_DISCONNECT << 4);
1449:./mqtt/source/mqtt.c ****     ext->payload[1] = 0;
1450:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1451:./mqtt/source/mqtt.c **** 
1452:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1453:./mqtt/source/mqtt.c **** }
1454:./mqtt/source/mqtt.c **** 
1455:./mqtt/source/mqtt.c **** int Mqtt_PackCmdRetPkt(struct MqttBuffer *buf, uint16_t pkt_id, const char *cmdid,
1456:./mqtt/source/mqtt.c ****                        const char *ret, uint32_t ret_len,
1457:./mqtt/source/mqtt.c ****                        enum MqttQosLevel qos, int own)
1458:./mqtt/source/mqtt.c **** {
1459:./mqtt/source/mqtt.c ****     size_t cmdid_size = strlen(cmdid) + 1;
1460:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, cmdid_size + CMD_TOPIC_PREFIX_LEN);
1461:./mqtt/source/mqtt.c ****     if(!ext) {
1462:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1463:./mqtt/source/mqtt.c ****     }
1464:./mqtt/source/mqtt.c **** 
1465:./mqtt/source/mqtt.c ****     memcpy(ext->payload, RESP_CMD_TOPIC_PREFIX, RESP_CMD_TOPIC_PREFIX_LEN);
1466:./mqtt/source/mqtt.c ****     strcpy(ext->payload + RESP_CMD_TOPIC_PREFIX_LEN, cmdid);
1467:./mqtt/source/mqtt.c **** 
1468:./mqtt/source/mqtt.c **** 	printf("test!!!!!!!Qos: %d\r\n", qos);
1469:./mqtt/source/mqtt.c **** 
1470:./mqtt/source/mqtt.c ****     return (MQTT_QOS_LEVEL1 == qos)?
1471:./mqtt/source/mqtt.c ****         Mqtt_PackPublishPkt(buf, pkt_id, ext->payload, ret, ret_len,
1472:./mqtt/source/mqtt.c ****                             MQTT_QOS_LEVEL1, 0, own):
1473:./mqtt/source/mqtt.c ****         Mqtt_PackPublishPkt(buf, pkt_id, ext->payload, ret, ret_len,
1474:./mqtt/source/mqtt.c ****                             MQTT_QOS_LEVEL0, 0, own);
1475:./mqtt/source/mqtt.c **** }
1476:./mqtt/source/mqtt.c **** 
1477:./mqtt/source/mqtt.c **** int Mqtt_PackDataPointStart(struct MqttBuffer *buf, uint16_t pkt_id,
1478:./mqtt/source/mqtt.c ****                             enum MqttQosLevel qos, int retain, int topic)
1479:./mqtt/source/mqtt.c **** {
1480:./mqtt/source/mqtt.c ****     int err;
1481:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1482:./mqtt/source/mqtt.c **** 
1483:./mqtt/source/mqtt.c ****     if(buf->first_ext) {
1484:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1485:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 52


1486:./mqtt/source/mqtt.c **** 
1487:./mqtt/source/mqtt.c ****     if(topic) {
1488:./mqtt/source/mqtt.c ****         err = Mqtt_PackPublishPkt(buf, pkt_id, "$dp", NULL, 0, qos, retain, 0);
1489:./mqtt/source/mqtt.c ****     }
1490:./mqtt/source/mqtt.c ****     else {
1491:./mqtt/source/mqtt.c ****         err = Mqtt_PackPublishPkt(buf, pkt_id, "$crsp", NULL, 0, qos, retain, 0);
1492:./mqtt/source/mqtt.c ****     }
1493:./mqtt/source/mqtt.c **** 
1494:./mqtt/source/mqtt.c ****     if(err != MQTTERR_NOERROR) {
1495:./mqtt/source/mqtt.c ****         return err;
1496:./mqtt/source/mqtt.c ****     }
1497:./mqtt/source/mqtt.c **** 
1498:./mqtt/source/mqtt.c ****     /*
1499:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, 2 + sizeof(struct DataPointPktInfo));
1500:./mqtt/source/mqtt.c ****     if(!ext) {
1501:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1502:./mqtt/source/mqtt.c ****     }
1503:./mqtt/source/mqtt.c **** 
1504:./mqtt/source/mqtt.c ****     ext->payload[0] = MQTT_DPTYPE_FLOAT;
1505:./mqtt/source/mqtt.c ****     ext->payload[1] = '{';
1506:./mqtt/source/mqtt.c **** 
1507:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info = (struct DataPointPktInfo*)(ext->payload + 2);
1508:./mqtt/source/mqtt.c ****     info->tag = DATA_POINT_PKT_TAG;
1509:./mqtt/source/mqtt.c ****     info->subobj_depth = 0;
1510:./mqtt/source/mqtt.c **** 
1511:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendLength(buf, ext->len))) {
1512:./mqtt/source/mqtt.c ****         return err;
1513:./mqtt/source/mqtt.c ****     }
1514:./mqtt/source/mqtt.c **** 
1515:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1516:./mqtt/source/mqtt.c ****     */
1517:./mqtt/source/mqtt.c **** 
1518:./mqtt/source/mqtt.c **** 
1519:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1520:./mqtt/source/mqtt.c **** }
1521:./mqtt/source/mqtt.c **** 
1522:./mqtt/source/mqtt.c **** static int Mqtt_AppendDP(struct MqttBuffer *buf, const char *dsid, int64_t ts,
1523:./mqtt/source/mqtt.c ****                          const char *value, size_t value_len, int str)
1524:./mqtt/source/mqtt.c **** {
1525:./mqtt/source/mqtt.c ****     int err;
1526:./mqtt/source/mqtt.c ****     size_t dsid_len, total_len;
1527:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1528:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
1529:./mqtt/source/mqtt.c ****     char *cursor;
1530:./mqtt/source/mqtt.c **** 
1531:./mqtt/source/mqtt.c ****     info = Mqtt_GetDataPointPktInfo(buf);
1532:./mqtt/source/mqtt.c ****     if(!info) {
1533:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1534:./mqtt/source/mqtt.c ****     }
1535:./mqtt/source/mqtt.c **** 
1536:./mqtt/source/mqtt.c ****     if(!dsid || (0 == (dsid_len = strlen(dsid)))) {
1537:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1538:./mqtt/source/mqtt.c ****     }
1539:./mqtt/source/mqtt.c **** 
1540:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(dsid, dsid_len) != dsid_len) {
1541:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1542:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 53


1543:./mqtt/source/mqtt.c **** 
1544:./mqtt/source/mqtt.c ****     if(Mqtt_HasIllegalCharacter(dsid, dsid_len)) {
1545:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
1546:./mqtt/source/mqtt.c ****     }
1547:./mqtt/source/mqtt.c **** 
1548:./mqtt/source/mqtt.c ****     if(!value) {
1549:./mqtt/source/mqtt.c ****         value_len = 4;
1550:./mqtt/source/mqtt.c ****     }
1551:./mqtt/source/mqtt.c **** 
1552:./mqtt/source/mqtt.c ****     total_len = dsid_len + 9 + (ts > 0 ? FORMAT_TIME_STRING_SIZE : 0) +
1553:./mqtt/source/mqtt.c ****         value_len + (str ? 2 : 0);
1554:./mqtt/source/mqtt.c **** 
1555:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, (uint32_t)total_len);
1556:./mqtt/source/mqtt.c ****     if(!ext) {
1557:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1558:./mqtt/source/mqtt.c ****     }
1559:./mqtt/source/mqtt.c ****     cursor = ext->payload;
1560:./mqtt/source/mqtt.c **** 
1561:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
1562:./mqtt/source/mqtt.c ****     memcpy(cursor, dsid, dsid_len);
1563:./mqtt/source/mqtt.c ****     cursor += dsid_len;
1564:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
1565:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
1566:./mqtt/source/mqtt.c ****     *(cursor++) = '{';
1567:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
1568:./mqtt/source/mqtt.c **** 
1569:./mqtt/source/mqtt.c ****     if(ts > 0) {
1570:./mqtt/source/mqtt.c ****         if(0 == Mqtt_FormatTime(ts, cursor)) {
1571:./mqtt/source/mqtt.c ****             return MQTTERR_INTERNAL;
1572:./mqtt/source/mqtt.c ****         }
1573:./mqtt/source/mqtt.c ****         cursor += FORMAT_TIME_STRING_SIZE;
1574:./mqtt/source/mqtt.c ****     }
1575:./mqtt/source/mqtt.c **** 
1576:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
1577:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
1578:./mqtt/source/mqtt.c **** 
1579:./mqtt/source/mqtt.c ****     if(str) {
1580:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
1581:./mqtt/source/mqtt.c ****     }
1582:./mqtt/source/mqtt.c **** 
1583:./mqtt/source/mqtt.c ****     if(value) {
1584:./mqtt/source/mqtt.c ****         memcpy(cursor, value, value_len);
1585:./mqtt/source/mqtt.c ****         cursor += value_len;
1586:./mqtt/source/mqtt.c ****     }
1587:./mqtt/source/mqtt.c ****     else {
1588:./mqtt/source/mqtt.c ****         *(cursor++) = 'n';
1589:./mqtt/source/mqtt.c ****         *(cursor++) = 'u';
1590:./mqtt/source/mqtt.c ****         *(cursor++) = 'l';
1591:./mqtt/source/mqtt.c ****         *(cursor++) = 'l';
1592:./mqtt/source/mqtt.c ****     }
1593:./mqtt/source/mqtt.c **** 
1594:./mqtt/source/mqtt.c ****     if(str) {
1595:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
1596:./mqtt/source/mqtt.c ****     }
1597:./mqtt/source/mqtt.c ****     *(cursor++) = '}';
1598:./mqtt/source/mqtt.c ****     *(cursor++) = ',';
1599:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 54


1600:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendLength(buf, ext->len))) {
1601:./mqtt/source/mqtt.c ****         return err;
1602:./mqtt/source/mqtt.c ****     }
1603:./mqtt/source/mqtt.c **** 
1604:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
1605:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
1606:./mqtt/source/mqtt.c **** }
1607:./mqtt/source/mqtt.c **** 
1608:./mqtt/source/mqtt.c **** int Mqtt_AppendDPNull(struct MqttBuffer *buf, const char *dsid)
1609:./mqtt/source/mqtt.c **** {
1610:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, 0, NULL, 0, 0);
1611:./mqtt/source/mqtt.c **** }
1612:./mqtt/source/mqtt.c **** 
1613:./mqtt/source/mqtt.c **** int Mqtt_AppendDPInt(struct MqttBuffer *buf, const char *dsid,
1614:./mqtt/source/mqtt.c ****                      int64_t ts, int value)
1615:./mqtt/source/mqtt.c **** {
1616:./mqtt/source/mqtt.c ****     char intbuf[MAX_INTBUF_SIZE];
1617:./mqtt/source/mqtt.c ****     size_t bytes = (size_t)snprintf(intbuf, MAX_INTBUF_SIZE, "%d", value);
1618:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, ts, intbuf, bytes, 0);
1619:./mqtt/source/mqtt.c **** }
1620:./mqtt/source/mqtt.c **** 
1621:./mqtt/source/mqtt.c **** int Mqtt_AppendDPDouble(struct MqttBuffer *buf, const char *dsid,
1622:./mqtt/source/mqtt.c ****                         int64_t ts, double value)
1623:./mqtt/source/mqtt.c **** {
1624:./mqtt/source/mqtt.c ****     char dblbuf[MAX_DBLBUF_SIZE];
1625:./mqtt/source/mqtt.c ****     size_t bytes = (size_t)snprintf(dblbuf, MAX_DBLBUF_SIZE, "%lf", value);
1626:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, ts, dblbuf, bytes, 0);
1627:./mqtt/source/mqtt.c **** }
1628:./mqtt/source/mqtt.c **** 
1629:./mqtt/source/mqtt.c **** int Mqtt_AppendDPString(struct MqttBuffer *buf, const char *dsid,
1630:./mqtt/source/mqtt.c ****                         int64_t ts, const char *value)
1631:./mqtt/source/mqtt.c **** {
1632:./mqtt/source/mqtt.c ****     size_t bytes;
1633:./mqtt/source/mqtt.c ****     if(!value) {
1634:./mqtt/source/mqtt.c ****         value = "";
1635:./mqtt/source/mqtt.c ****     }
1636:./mqtt/source/mqtt.c **** 
1637:./mqtt/source/mqtt.c ****     bytes = strlen(value);
1638:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(value, bytes) != bytes) {
1639:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1640:./mqtt/source/mqtt.c ****     }
1641:./mqtt/source/mqtt.c **** 
1642:./mqtt/source/mqtt.c ****     if(Mqtt_HasIllegalCharacter(value, bytes)) {
1643:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
1644:./mqtt/source/mqtt.c ****     }
1645:./mqtt/source/mqtt.c **** 
1646:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, ts, value, bytes, 1);
1647:./mqtt/source/mqtt.c **** }
1648:./mqtt/source/mqtt.c **** 
1649:./mqtt/source/mqtt.c **** int Mqtt_AppendDPStartObject(struct MqttBuffer *buf, const char *dsid, int64_t ts)
1650:./mqtt/source/mqtt.c **** {
1651:./mqtt/source/mqtt.c ****     int err;
1652:./mqtt/source/mqtt.c ****     char strtime[FORMAT_TIME_STRING_SIZE + 1];
1653:./mqtt/source/mqtt.c **** 
1654:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendDPStartSubobject(buf, dsid))) {
1655:./mqtt/source/mqtt.c ****         return err;
1656:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 55


1657:./mqtt/source/mqtt.c **** 
1658:./mqtt/source/mqtt.c ****     if(ts > 0) {
1659:./mqtt/source/mqtt.c ****         if(0 == Mqtt_FormatTime(ts, strtime)) {
1660:./mqtt/source/mqtt.c ****             return MQTTERR_INTERNAL;
1661:./mqtt/source/mqtt.c ****         }
1662:./mqtt/source/mqtt.c ****         strtime[FORMAT_TIME_STRING_SIZE] ='\0';
1663:./mqtt/source/mqtt.c ****     }
1664:./mqtt/source/mqtt.c ****     else {
1665:./mqtt/source/mqtt.c ****         strtime[0] = '\0';
1666:./mqtt/source/mqtt.c ****     }
1667:./mqtt/source/mqtt.c **** 
1668:./mqtt/source/mqtt.c ****     return Mqtt_AppendDPStartSubobject(buf, strtime);
1669:./mqtt/source/mqtt.c **** }
1670:./mqtt/source/mqtt.c **** 
1671:./mqtt/source/mqtt.c **** int Mqtt_AppendDPFinishObject(struct MqttBuffer *buf)
1672:./mqtt/source/mqtt.c **** {
1673:./mqtt/source/mqtt.c ****     int err;
1674:./mqtt/source/mqtt.c **** 
1675:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendDPFinishSubobject(buf))) {
1676:./mqtt/source/mqtt.c ****         return err;
1677:./mqtt/source/mqtt.c ****     }
1678:./mqtt/source/mqtt.c **** 
1679:./mqtt/source/mqtt.c ****     return Mqtt_AppendDPFinishSubobject(buf);
1680:./mqtt/source/mqtt.c **** }
1681:./mqtt/source/mqtt.c **** 
1682:./mqtt/source/mqtt.c **** static int Mqtt_AppendDPSubvalue(struct MqttBuffer *buf, const char *name,
1683:./mqtt/source/mqtt.c ****                                  const char *value, size_t value_len, int str)
1684:./mqtt/source/mqtt.c **** {
 1312              		.loc 1 1684 0
 1313              		.cfi_startproc
 1314              		@ args = 4, pretend = 0, frame = 8
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              	.LVL162:
 1317 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1318              	.LCFI24:
 1319              		.cfi_def_cfa_offset 36
 1320              		.cfi_offset 4, -36
 1321              		.cfi_offset 5, -32
 1322              		.cfi_offset 6, -28
 1323              		.cfi_offset 7, -24
 1324              		.cfi_offset 8, -20
 1325              		.cfi_offset 9, -16
 1326              		.cfi_offset 10, -12
 1327              		.cfi_offset 11, -8
 1328              		.cfi_offset 14, -4
 1329 0004 83B0     		sub	sp, sp, #12
 1330              	.LCFI25:
 1331              		.cfi_def_cfa_offset 48
 1332 0006 0090     		str	r0, [sp]
 1333 0008 0D46     		mov	r5, r1
 1334 000a 0192     		str	r2, [sp, #4]
 1335 000c 1E46     		mov	r6, r3
 1336 000e 0C9F     		ldr	r7, [sp, #48]
1685:./mqtt/source/mqtt.c ****     int err;
1686:./mqtt/source/mqtt.c ****     size_t name_len;
1687:./mqtt/source/mqtt.c ****     size_t total_len;
1688:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 56


1689:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
1690:./mqtt/source/mqtt.c ****     char *cursor;
1691:./mqtt/source/mqtt.c **** 
1692:./mqtt/source/mqtt.c ****     info = Mqtt_GetDataPointPktInfo(buf);
 1337              		.loc 1 1692 0
 1338 0010 FFF7FEFF 		bl	Mqtt_GetDataPointPktInfo
 1339              	.LVL163:
1693:./mqtt/source/mqtt.c ****     if(!info) {
 1340              		.loc 1 1693 0
 1341 0014 0028     		cmp	r0, #0
 1342 0016 51D0     		beq	.L107
1694:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1695:./mqtt/source/mqtt.c ****     }
1696:./mqtt/source/mqtt.c **** 
1697:./mqtt/source/mqtt.c ****     if(info->subobj_depth <= 0) {
 1343              		.loc 1 1697 0
 1344 0018 B0F90230 		ldrsh	r3, [r0, #2]
 1345 001c 002B     		cmp	r3, #0
 1346 001e 50DD     		ble	.L108
1698:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_IN_SUBOBJECT;
1699:./mqtt/source/mqtt.c ****     }
1700:./mqtt/source/mqtt.c **** 
1701:./mqtt/source/mqtt.c ****     // 1 byte for : and 1 byte for ,
1702:./mqtt/source/mqtt.c ****     // if value is string 2 bytes for "" of value
1703:./mqtt/source/mqtt.c ****     // format like this: "name":"value",
1704:./mqtt/source/mqtt.c ****     total_len = value_len + 2 + (str ? 2 : 0);
 1347              		.loc 1 1704 0
 1348 0020 0FB1     		cbz	r7, .L109
 1349 0022 0221     		movs	r1, #2
 1350 0024 00E0     		b	.L104
 1351              	.L109:
 1352 0026 0021     		movs	r1, #0
 1353              	.L104:
 1354              		.loc 1 1704 0 is_stmt 0 discriminator 4
 1355 0028 3144     		add	r1, r1, r6
 1356 002a 01F10208 		add	r8, r1, #2
 1357              	.LVL164:
1705:./mqtt/source/mqtt.c ****     name_len = strlen(name);
 1358              		.loc 1 1705 0 is_stmt 1 discriminator 4
 1359 002e 2846     		mov	r0, r5
 1360              	.LVL165:
 1361 0030 FFF7FEFF 		bl	strlen
 1362              	.LVL166:
 1363 0034 0446     		mov	r4, r0
 1364              	.LVL167:
1706:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(name, name_len) != name_len) {
 1365              		.loc 1 1706 0 discriminator 4
 1366 0036 0146     		mov	r1, r0
 1367 0038 2846     		mov	r0, r5
 1368 003a FFF7FEFF 		bl	Mqtt_CheckUtf8
 1369              	.LVL168:
 1370 003e 8442     		cmp	r4, r0
 1371 0040 42D1     		bne	.L110
1707:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1708:./mqtt/source/mqtt.c ****     }
1709:./mqtt/source/mqtt.c **** 
1710:./mqtt/source/mqtt.c ****     if(Mqtt_HasIllegalCharacter(name, name_len)) {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 57


 1372              		.loc 1 1710 0
 1373 0042 2146     		mov	r1, r4
 1374 0044 2846     		mov	r0, r5
 1375 0046 FFF7FEFF 		bl	Mqtt_HasIllegalCharacter
 1376              	.LVL169:
 1377 004a 8146     		mov	r9, r0
 1378 004c 0028     		cmp	r0, #0
 1379 004e 3ED1     		bne	.L111
1711:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
1712:./mqtt/source/mqtt.c ****     }
1713:./mqtt/source/mqtt.c ****     total_len += name_len + 2;
 1380              		.loc 1 1713 0
 1381 0050 08EB0401 		add	r1, r8, r4
 1382              	.LVL170:
1714:./mqtt/source/mqtt.c **** 
1715:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, (uint32_t)total_len);
 1383              		.loc 1 1715 0
 1384 0054 0231     		adds	r1, r1, #2
 1385              	.LVL171:
 1386 0056 0098     		ldr	r0, [sp]
 1387 0058 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 1388              	.LVL172:
1716:./mqtt/source/mqtt.c ****     if(!ext) {
 1389              		.loc 1 1716 0
 1390 005c 8246     		mov	r10, r0
 1391 005e C8B3     		cbz	r0, .L112
1717:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1718:./mqtt/source/mqtt.c ****     }
1719:./mqtt/source/mqtt.c **** 
1720:./mqtt/source/mqtt.c ****     cursor = ext->payload;
 1392              		.loc 1 1720 0
 1393 0060 4368     		ldr	r3, [r0, #4]
 1394              	.LVL173:
1721:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 1395              		.loc 1 1721 0
 1396 0062 03F10108 		add	r8, r3, #1
 1397              	.LVL174:
 1398 0066 4FF0220B 		mov	fp, #34
 1399 006a 83F800B0 		strb	fp, [r3]
1722:./mqtt/source/mqtt.c ****     memcpy(cursor, name, name_len);
 1400              		.loc 1 1722 0
 1401 006e 2246     		mov	r2, r4
 1402 0070 2946     		mov	r1, r5
 1403 0072 4046     		mov	r0, r8
 1404              	.LVL175:
 1405 0074 FFF7FEFF 		bl	memcpy
 1406              	.LVL176:
1723:./mqtt/source/mqtt.c ****     cursor += name_len;
 1407              		.loc 1 1723 0
 1408 0078 08EB0403 		add	r3, r8, r4
 1409              	.LVL177:
1724:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 1410              		.loc 1 1724 0
 1411 007c 08F804B0 		strb	fp, [r8, r4]
1725:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
 1412              		.loc 1 1725 0
 1413 0080 9C1C     		adds	r4, r3, #2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 58


 1414              	.LVL178:
 1415 0082 3A22     		movs	r2, #58
 1416 0084 5A70     		strb	r2, [r3, #1]
1726:./mqtt/source/mqtt.c **** 
1727:./mqtt/source/mqtt.c ****     if(str) {
 1417              		.loc 1 1727 0
 1418 0086 17B1     		cbz	r7, .L105
1728:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
 1419              		.loc 1 1728 0
 1420 0088 DC1C     		adds	r4, r3, #3
 1421              	.LVL179:
 1422 008a 83F802B0 		strb	fp, [r3, #2]
 1423              	.L105:
1729:./mqtt/source/mqtt.c ****     }
1730:./mqtt/source/mqtt.c **** 
1731:./mqtt/source/mqtt.c ****     memcpy(cursor, value, value_len);
 1424              		.loc 1 1731 0
 1425 008e 3246     		mov	r2, r6
 1426 0090 0199     		ldr	r1, [sp, #4]
 1427 0092 2046     		mov	r0, r4
 1428 0094 FFF7FEFF 		bl	memcpy
 1429              	.LVL180:
1732:./mqtt/source/mqtt.c ****     cursor += value_len;
 1430              		.loc 1 1732 0
 1431 0098 A319     		adds	r3, r4, r6
 1432              	.LVL181:
1733:./mqtt/source/mqtt.c **** 
1734:./mqtt/source/mqtt.c ****     if(str) {
 1433              		.loc 1 1734 0
 1434 009a 17B1     		cbz	r7, .L106
 1435              	.LVL182:
1735:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
 1436              		.loc 1 1735 0
 1437 009c 2222     		movs	r2, #34
 1438 009e A255     		strb	r2, [r4, r6]
 1439 00a0 0133     		adds	r3, r3, #1
 1440              	.LVL183:
 1441              	.L106:
1736:./mqtt/source/mqtt.c ****     }
1737:./mqtt/source/mqtt.c **** 
1738:./mqtt/source/mqtt.c ****     *(cursor++) = ',';
 1442              		.loc 1 1738 0
 1443 00a2 2C22     		movs	r2, #44
 1444 00a4 1A70     		strb	r2, [r3]
1739:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendLength(buf, ext->len))) {
 1445              		.loc 1 1739 0
 1446 00a6 DAF80010 		ldr	r1, [r10]
 1447 00aa 0098     		ldr	r0, [sp]
 1448 00ac FFF7FEFF 		bl	Mqtt_AppendLength
 1449              	.LVL184:
 1450 00b0 98B9     		cbnz	r0, .L113
1740:./mqtt/source/mqtt.c ****         return err;
1741:./mqtt/source/mqtt.c ****     }
1742:./mqtt/source/mqtt.c **** 
1743:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 1451              		.loc 1 1743 0
 1452 00b2 5146     		mov	r1, r10
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 59


 1453 00b4 0098     		ldr	r0, [sp]
 1454              	.LVL185:
 1455 00b6 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 1456              	.LVL186:
1744:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 1457              		.loc 1 1744 0
 1458 00ba 0FE0     		b	.L103
 1459              	.LVL187:
 1460              	.L107:
1694:./mqtt/source/mqtt.c ****     }
 1461              		.loc 1 1694 0
 1462 00bc 6FF00609 		mvn	r9, #6
 1463 00c0 0CE0     		b	.L103
 1464              	.L108:
1698:./mqtt/source/mqtt.c ****     }
 1465              		.loc 1 1698 0
 1466 00c2 6FF00B09 		mvn	r9, #11
 1467 00c6 09E0     		b	.L103
 1468              	.LVL188:
 1469              	.L110:
1707:./mqtt/source/mqtt.c ****     }
 1470              		.loc 1 1707 0
 1471 00c8 6FF00509 		mvn	r9, #5
 1472 00cc 06E0     		b	.L103
 1473              	.L111:
1711:./mqtt/source/mqtt.c ****     }
 1474              		.loc 1 1711 0
 1475 00ce 6FF00409 		mvn	r9, #4
 1476 00d2 03E0     		b	.L103
 1477              	.LVL189:
 1478              	.L112:
1717:./mqtt/source/mqtt.c ****     }
 1479              		.loc 1 1717 0
 1480 00d4 4FF0FF39 		mov	r9, #-1
 1481 00d8 00E0     		b	.L103
 1482              	.LVL190:
 1483              	.L113:
1740:./mqtt/source/mqtt.c ****     }
 1484              		.loc 1 1740 0
 1485 00da 8146     		mov	r9, r0
 1486              	.LVL191:
 1487              	.L103:
1745:./mqtt/source/mqtt.c **** }
 1488              		.loc 1 1745 0
 1489 00dc 4846     		mov	r0, r9
 1490 00de 03B0     		add	sp, sp, #12
 1491              	.LCFI26:
 1492              		.cfi_def_cfa_offset 36
 1493              	.LVL192:
 1494              		@ sp needed
 1495 00e0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1496              		.cfi_endproc
 1497              	.LFE53:
 1499              		.global	__aeabi_ldivmod
 1500              		.section	.text.Mqtt_FormatTime,"ax",%progbits
 1501              		.align	2
 1502              		.global	Mqtt_FormatTime
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 60


 1503              		.thumb
 1504              		.thumb_func
 1506              	Mqtt_FormatTime:
 1507              	.LFB16:
 347:./mqtt/source/mqtt.c ****     int64_t millisecond = ts % 1000;
 1508              		.loc 1 347 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 8
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              	.LVL193:
 1513 0000 70B5     		push	{r4, r5, r6, lr}
 1514              	.LCFI27:
 1515              		.cfi_def_cfa_offset 16
 1516              		.cfi_offset 4, -16
 1517              		.cfi_offset 5, -12
 1518              		.cfi_offset 6, -8
 1519              		.cfi_offset 14, -4
 1520 0002 82B0     		sub	sp, sp, #8
 1521              	.LCFI28:
 1522              		.cfi_def_cfa_offset 24
 1523 0004 0446     		mov	r4, r0
 1524 0006 1546     		mov	r5, r2
 348:./mqtt/source/mqtt.c ****     struct tm *t;
 1525              		.loc 1 348 0
 1526 0008 4FF47A72 		mov	r2, #1000
 1527              	.LVL194:
 1528 000c 0023     		movs	r3, #0
 1529 000e FFF7FEFF 		bl	__aeabi_ldivmod
 1530              	.LVL195:
 1531 0012 1646     		mov	r6, r2
 1532              	.LVL196:
 350:./mqtt/source/mqtt.c ****     t = gmtime(&tt);
 1533              		.loc 1 350 0
 1534 0014 0F4B     		ldr	r3, .L120
 1535              	.LVL197:
 1536 0016 83FB0423 		smull	r2, r3, r3, r4
 1537 001a E417     		asrs	r4, r4, #31
 1538 001c C4EBA314 		rsb	r4, r4, r3, asr #6
 1539 0020 02A8     		add	r0, sp, #8
 1540 0022 40F8044D 		str	r4, [r0, #-4]!
 351:./mqtt/source/mqtt.c ****     if(!t) {
 1541              		.loc 1 351 0
 1542 0026 FFF7FEFF 		bl	gmtime
 1543              	.LVL198:
 352:./mqtt/source/mqtt.c ****         return 0;
 1544              		.loc 1 352 0
 1545 002a 70B1     		cbz	r0, .L117
 1546 002c 0346     		mov	r3, r0
 356:./mqtt/source/mqtt.c ****         return 0;
 1547              		.loc 1 356 0
 1548 002e 0A4A     		ldr	r2, .L120+4
 1549 0030 1821     		movs	r1, #24
 1550 0032 2846     		mov	r0, r5
 1551              	.LVL199:
 1552 0034 FFF7FEFF 		bl	strftime
 1553              	.LVL200:
 1554 0038 48B1     		cbz	r0, .L118
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 61


 360:./mqtt/source/mqtt.c ****     return FORMAT_TIME_STRING_SIZE;
 1555              		.loc 1 360 0
 1556 003a 3246     		mov	r2, r6
 1557 003c 0749     		ldr	r1, .L120+8
 1558 003e 05F11300 		add	r0, r5, #19
 1559 0042 FFF7FEFF 		bl	sprintf
 1560              	.LVL201:
 361:./mqtt/source/mqtt.c **** }
 1561              		.loc 1 361 0
 1562 0046 1720     		movs	r0, #23
 1563 0048 02E0     		b	.L116
 1564              	.LVL202:
 1565              	.L117:
 353:./mqtt/source/mqtt.c ****     }
 1566              		.loc 1 353 0
 1567 004a 0020     		movs	r0, #0
 1568              	.LVL203:
 1569 004c 00E0     		b	.L116
 1570              	.L118:
 357:./mqtt/source/mqtt.c ****     }
 1571              		.loc 1 357 0
 1572 004e 0020     		movs	r0, #0
 1573              	.L116:
 362:./mqtt/source/mqtt.c **** 
 1574              		.loc 1 362 0
 1575 0050 02B0     		add	sp, sp, #8
 1576              	.LCFI29:
 1577              		.cfi_def_cfa_offset 16
 1578              		@ sp needed
 1579 0052 70BD     		pop	{r4, r5, r6, pc}
 1580              	.LVL204:
 1581              	.L121:
 1582              		.align	2
 1583              	.L120:
 1584 0054 D34D6210 		.word	274877907
 1585 0058 00000000 		.word	.LC0
 1586 005c 14000000 		.word	.LC1
 1587              		.cfi_endproc
 1588              	.LFE16:
 1590              		.section	.text.Mqtt_AppendDP,"ax",%progbits
 1591              		.align	2
 1592              		.thumb
 1593              		.thumb_func
 1595              	Mqtt_AppendDP:
 1596              	.LFB46:
1524:./mqtt/source/mqtt.c ****     int err;
 1597              		.loc 1 1524 0
 1598              		.cfi_startproc
 1599              		@ args = 12, pretend = 0, frame = 8
 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601              	.LVL205:
 1602 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1603              	.LCFI30:
 1604              		.cfi_def_cfa_offset 36
 1605              		.cfi_offset 4, -36
 1606              		.cfi_offset 5, -32
 1607              		.cfi_offset 6, -28
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 62


 1608              		.cfi_offset 7, -24
 1609              		.cfi_offset 8, -20
 1610              		.cfi_offset 9, -16
 1611              		.cfi_offset 10, -12
 1612              		.cfi_offset 11, -8
 1613              		.cfi_offset 14, -4
 1614 0004 83B0     		sub	sp, sp, #12
 1615              	.LCFI31:
 1616              		.cfi_def_cfa_offset 48
 1617 0006 8146     		mov	r9, r0
 1618 0008 0D46     		mov	r5, r1
 1619 000a CDE90023 		strd	r2, [sp]
 1620 000e 0E9E     		ldr	r6, [sp, #56]
1531:./mqtt/source/mqtt.c ****     if(!info) {
 1621              		.loc 1 1531 0
 1622 0010 FFF7FEFF 		bl	Mqtt_GetDataPointPktInfo
 1623              	.LVL206:
1532:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 1624              		.loc 1 1532 0
 1625 0014 0028     		cmp	r0, #0
 1626 0016 00F08380 		beq	.L132
1536:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 1627              		.loc 1 1536 0
 1628 001a 002D     		cmp	r5, #0
 1629 001c 00F08380 		beq	.L133
1536:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 1630              		.loc 1 1536 0 is_stmt 0 discriminator 1
 1631 0020 2846     		mov	r0, r5
 1632              	.LVL207:
 1633 0022 FFF7FEFF 		bl	strlen
 1634              	.LVL208:
 1635 0026 0446     		mov	r4, r0
 1636 0028 0028     		cmp	r0, #0
 1637 002a 7FD0     		beq	.L134
1540:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
 1638              		.loc 1 1540 0 is_stmt 1
 1639 002c 0146     		mov	r1, r0
 1640 002e 2846     		mov	r0, r5
 1641 0030 FFF7FEFF 		bl	Mqtt_CheckUtf8
 1642              	.LVL209:
 1643 0034 8442     		cmp	r4, r0
 1644 0036 7CD1     		bne	.L135
1544:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
 1645              		.loc 1 1544 0
 1646 0038 2146     		mov	r1, r4
 1647 003a 2846     		mov	r0, r5
 1648 003c FFF7FEFF 		bl	Mqtt_HasIllegalCharacter
 1649              	.LVL210:
 1650 0040 8346     		mov	fp, r0
 1651 0042 0028     		cmp	r0, #0
 1652 0044 78D1     		bne	.L136
1548:./mqtt/source/mqtt.c ****         value_len = 4;
 1653              		.loc 1 1548 0
 1654 0046 0C9B     		ldr	r3, [sp, #48]
 1655 0048 0BB9     		cbnz	r3, .L124
1549:./mqtt/source/mqtt.c ****     }
 1656              		.loc 1 1549 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 63


 1657 004a 0423     		movs	r3, #4
 1658 004c 0D93     		str	r3, [sp, #52]
 1659              	.L124:
1552:./mqtt/source/mqtt.c ****         value_len + (str ? 2 : 0);
 1660              		.loc 1 1552 0
 1661 004e DDE90023 		ldrd	r2, [sp]
 1662 0052 012A     		cmp	r2, #1
 1663 0054 73F10003 		sbcs	r3, r3, #0
 1664 0058 01DB     		blt	.L138
 1665 005a 1721     		movs	r1, #23
 1666 005c 00E0     		b	.L125
 1667              	.L138:
 1668 005e 0021     		movs	r1, #0
 1669              	.L125:
1552:./mqtt/source/mqtt.c ****         value_len + (str ? 2 : 0);
 1670              		.loc 1 1552 0 is_stmt 0 discriminator 4
 1671 0060 2144     		add	r1, r1, r4
 1672 0062 0D9B     		ldr	r3, [sp, #52]
 1673 0064 0B44     		add	r3, r3, r1
1553:./mqtt/source/mqtt.c **** 
 1674              		.loc 1 1553 0 is_stmt 1 discriminator 4
 1675 0066 0EB1     		cbz	r6, .L139
1553:./mqtt/source/mqtt.c **** 
 1676              		.loc 1 1553 0 is_stmt 0
 1677 0068 0221     		movs	r1, #2
 1678 006a 00E0     		b	.L126
 1679              	.L139:
 1680 006c 0021     		movs	r1, #0
 1681              	.L126:
1553:./mqtt/source/mqtt.c **** 
 1682              		.loc 1 1553 0 discriminator 4
 1683 006e 1944     		add	r1, r1, r3
 1684              	.LVL211:
1555:./mqtt/source/mqtt.c ****     if(!ext) {
 1685              		.loc 1 1555 0 is_stmt 1 discriminator 4
 1686 0070 0931     		adds	r1, r1, #9
 1687              	.LVL212:
 1688 0072 4846     		mov	r0, r9
 1689 0074 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 1690              	.LVL213:
1556:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 1691              		.loc 1 1556 0 discriminator 4
 1692 0078 8246     		mov	r10, r0
 1693 007a 0028     		cmp	r0, #0
 1694 007c 5FD0     		beq	.L140
1559:./mqtt/source/mqtt.c **** 
 1695              		.loc 1 1559 0
 1696 007e 4368     		ldr	r3, [r0, #4]
 1697              	.LVL214:
1561:./mqtt/source/mqtt.c ****     memcpy(cursor, dsid, dsid_len);
 1698              		.loc 1 1561 0
 1699 0080 03F10108 		add	r8, r3, #1
 1700              	.LVL215:
 1701 0084 2227     		movs	r7, #34
 1702 0086 1F70     		strb	r7, [r3]
1562:./mqtt/source/mqtt.c ****     cursor += dsid_len;
 1703              		.loc 1 1562 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 64


 1704 0088 2246     		mov	r2, r4
 1705 008a 2946     		mov	r1, r5
 1706 008c 4046     		mov	r0, r8
 1707              	.LVL216:
 1708 008e FFF7FEFF 		bl	memcpy
 1709              	.LVL217:
1563:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 1710              		.loc 1 1563 0
 1711 0092 08EB0405 		add	r5, r8, r4
 1712              	.LVL218:
1564:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
 1713              		.loc 1 1564 0
 1714 0096 08F80470 		strb	r7, [r8, r4]
 1715              	.LVL219:
1565:./mqtt/source/mqtt.c ****     *(cursor++) = '{';
 1716              		.loc 1 1565 0
 1717 009a 3A23     		movs	r3, #58
 1718 009c 6B70     		strb	r3, [r5, #1]
 1719              	.LVL220:
1566:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 1720              		.loc 1 1566 0
 1721 009e 7B23     		movs	r3, #123
 1722 00a0 AB70     		strb	r3, [r5, #2]
1567:./mqtt/source/mqtt.c **** 
 1723              		.loc 1 1567 0
 1724 00a2 2A1D     		adds	r2, r5, #4
 1725              	.LVL221:
 1726 00a4 EF70     		strb	r7, [r5, #3]
1569:./mqtt/source/mqtt.c ****         if(0 == Mqtt_FormatTime(ts, cursor)) {
 1727              		.loc 1 1569 0
 1728 00a6 DDE90034 		ldrd	r3, [sp]
 1729 00aa 012B     		cmp	r3, #1
 1730 00ac 74F10001 		sbcs	r1, r4, #0
 1731 00b0 07DB     		blt	.L127
1570:./mqtt/source/mqtt.c ****             return MQTTERR_INTERNAL;
 1732              		.loc 1 1570 0
 1733 00b2 1846     		mov	r0, r3
 1734 00b4 2146     		mov	r1, r4
 1735 00b6 FFF7FEFF 		bl	Mqtt_FormatTime
 1736              	.LVL222:
 1737 00ba 0028     		cmp	r0, #0
 1738 00bc 42D0     		beq	.L141
1573:./mqtt/source/mqtt.c ****     }
 1739              		.loc 1 1573 0
 1740 00be 05F11B02 		add	r2, r5, #27
 1741              	.LVL223:
 1742              	.L127:
1576:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
 1743              		.loc 1 1576 0
 1744 00c2 1446     		mov	r4, r2
 1745 00c4 2223     		movs	r3, #34
 1746 00c6 04F8023B 		strb	r3, [r4], #2
 1747              	.LVL224:
1577:./mqtt/source/mqtt.c **** 
 1748              		.loc 1 1577 0
 1749 00ca 3A23     		movs	r3, #58
 1750 00cc 5370     		strb	r3, [r2, #1]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 65


1579:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
 1751              		.loc 1 1579 0
 1752 00ce 16B1     		cbz	r6, .L128
1580:./mqtt/source/mqtt.c ****     }
 1753              		.loc 1 1580 0
 1754 00d0 D41C     		adds	r4, r2, #3
 1755              	.LVL225:
 1756 00d2 2223     		movs	r3, #34
 1757 00d4 9370     		strb	r3, [r2, #2]
 1758              	.L128:
1583:./mqtt/source/mqtt.c ****         memcpy(cursor, value, value_len);
 1759              		.loc 1 1583 0
 1760 00d6 0C9B     		ldr	r3, [sp, #48]
 1761 00d8 3BB1     		cbz	r3, .L129
1584:./mqtt/source/mqtt.c ****         cursor += value_len;
 1762              		.loc 1 1584 0
 1763 00da 0D9A     		ldr	r2, [sp, #52]
 1764 00dc 1946     		mov	r1, r3
 1765 00de 2046     		mov	r0, r4
 1766 00e0 FFF7FEFF 		bl	memcpy
 1767              	.LVL226:
1585:./mqtt/source/mqtt.c ****     }
 1768              		.loc 1 1585 0
 1769 00e4 0D9B     		ldr	r3, [sp, #52]
 1770 00e6 E318     		adds	r3, r4, r3
 1771              	.LVL227:
 1772 00e8 07E0     		b	.L130
 1773              	.LVL228:
 1774              	.L129:
1588:./mqtt/source/mqtt.c ****         *(cursor++) = 'u';
 1775              		.loc 1 1588 0
 1776 00ea 6E23     		movs	r3, #110
 1777 00ec 2370     		strb	r3, [r4]
 1778              	.LVL229:
1589:./mqtt/source/mqtt.c ****         *(cursor++) = 'l';
 1779              		.loc 1 1589 0
 1780 00ee 7523     		movs	r3, #117
 1781 00f0 6370     		strb	r3, [r4, #1]
 1782              	.LVL230:
1590:./mqtt/source/mqtt.c ****         *(cursor++) = 'l';
 1783              		.loc 1 1590 0
 1784 00f2 6C22     		movs	r2, #108
 1785 00f4 A270     		strb	r2, [r4, #2]
1591:./mqtt/source/mqtt.c ****     }
 1786              		.loc 1 1591 0
 1787 00f6 231D     		adds	r3, r4, #4
 1788              	.LVL231:
 1789 00f8 E270     		strb	r2, [r4, #3]
 1790              	.L130:
1594:./mqtt/source/mqtt.c ****         *(cursor++) = '\"';
 1791              		.loc 1 1594 0
 1792 00fa 16B1     		cbz	r6, .L131
 1793              	.LVL232:
1595:./mqtt/source/mqtt.c ****     }
 1794              		.loc 1 1595 0
 1795 00fc 2222     		movs	r2, #34
 1796 00fe 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 66


 1797 0100 0133     		adds	r3, r3, #1
 1798              	.LVL233:
 1799              	.L131:
1597:./mqtt/source/mqtt.c ****     *(cursor++) = ',';
 1800              		.loc 1 1597 0
 1801 0102 7D22     		movs	r2, #125
 1802 0104 1A70     		strb	r2, [r3]
 1803              	.LVL234:
1598:./mqtt/source/mqtt.c **** 
 1804              		.loc 1 1598 0
 1805 0106 2C22     		movs	r2, #44
 1806 0108 5A70     		strb	r2, [r3, #1]
1600:./mqtt/source/mqtt.c ****         return err;
 1807              		.loc 1 1600 0
 1808 010a DAF80010 		ldr	r1, [r10]
 1809 010e 4846     		mov	r0, r9
 1810 0110 FFF7FEFF 		bl	Mqtt_AppendLength
 1811              	.LVL235:
 1812 0114 C8B9     		cbnz	r0, .L142
1604:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 1813              		.loc 1 1604 0
 1814 0116 5146     		mov	r1, r10
 1815 0118 4846     		mov	r0, r9
 1816              	.LVL236:
 1817 011a FFF7FEFF 		bl	MqttBuffer_AppendExtent
 1818              	.LVL237:
1605:./mqtt/source/mqtt.c **** }
 1819              		.loc 1 1605 0
 1820 011e 15E0     		b	.L123
 1821              	.LVL238:
 1822              	.L132:
1533:./mqtt/source/mqtt.c ****     }
 1823              		.loc 1 1533 0
 1824 0120 6FF0060B 		mvn	fp, #6
 1825 0124 12E0     		b	.L123
 1826              	.L133:
1537:./mqtt/source/mqtt.c ****     }
 1827              		.loc 1 1537 0
 1828 0126 6FF0060B 		mvn	fp, #6
 1829 012a 0FE0     		b	.L123
 1830              	.LVL239:
 1831              	.L134:
 1832 012c 6FF0060B 		mvn	fp, #6
 1833 0130 0CE0     		b	.L123
 1834              	.L135:
1541:./mqtt/source/mqtt.c ****     }
 1835              		.loc 1 1541 0
 1836 0132 6FF0050B 		mvn	fp, #5
 1837 0136 09E0     		b	.L123
 1838              	.L136:
1545:./mqtt/source/mqtt.c ****     }
 1839              		.loc 1 1545 0
 1840 0138 6FF0040B 		mvn	fp, #4
 1841 013c 06E0     		b	.L123
 1842              	.LVL240:
 1843              	.L140:
1557:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 67


 1844              		.loc 1 1557 0
 1845 013e 4FF0FF3B 		mov	fp, #-1
 1846 0142 03E0     		b	.L123
 1847              	.LVL241:
 1848              	.L141:
1571:./mqtt/source/mqtt.c ****         }
 1849              		.loc 1 1571 0
 1850 0144 6FF00A0B 		mvn	fp, #10
 1851 0148 00E0     		b	.L123
 1852              	.LVL242:
 1853              	.L142:
1601:./mqtt/source/mqtt.c ****     }
 1854              		.loc 1 1601 0
 1855 014a 8346     		mov	fp, r0
 1856              	.LVL243:
 1857              	.L123:
1606:./mqtt/source/mqtt.c **** 
 1858              		.loc 1 1606 0
 1859 014c 5846     		mov	r0, fp
 1860 014e 03B0     		add	sp, sp, #12
 1861              	.LCFI32:
 1862              		.cfi_def_cfa_offset 36
 1863              	.LVL244:
 1864              		@ sp needed
 1865 0150 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1866              		.cfi_endproc
 1867              	.LFE46:
 1869              		.section	.text.Mqtt_HandlePingResp,"ax",%progbits
 1870              		.align	2
 1871              		.global	Mqtt_HandlePingResp
 1872              		.thumb
 1873              		.thumb_func
 1875              	Mqtt_HandlePingResp:
 1876              	.LFB17:
 366:./mqtt/source/mqtt.c ****     if((0 != flags) || (0 != size)) {
 1877              		.loc 1 366 0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 1881              	.LVL245:
 367:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1882              		.loc 1 367 0
 1883 0000 29B9     		cbnz	r1, .L146
 367:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1884              		.loc 1 367 0 is_stmt 0 discriminator 1
 1885 0002 3BB9     		cbnz	r3, .L147
 366:./mqtt/source/mqtt.c ****     if((0 != flags) || (0 != size)) {
 1886              		.loc 1 366 0 is_stmt 1
 1887 0004 08B5     		push	{r3, lr}
 1888              	.LCFI33:
 1889              		.cfi_def_cfa_offset 8
 1890              		.cfi_offset 3, -8
 1891              		.cfi_offset 14, -4
 371:./mqtt/source/mqtt.c **** }
 1892              		.loc 1 371 0
 1893 0006 036A     		ldr	r3, [r0, #32]
 1894              	.LVL246:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 68


 1895 0008 C069     		ldr	r0, [r0, #28]
 1896              	.LVL247:
 1897 000a 9847     		blx	r3
 1898              	.LVL248:
 1899 000c 08BD     		pop	{r3, pc}
 1900              	.LVL249:
 1901              	.L146:
 1902              	.LCFI34:
 1903              		.cfi_def_cfa_offset 0
 1904              		.cfi_restore 3
 1905              		.cfi_restore 14
 368:./mqtt/source/mqtt.c ****     }
 1906              		.loc 1 368 0
 1907 000e 6FF00300 		mvn	r0, #3
 1908              	.LVL250:
 1909 0012 7047     		bx	lr
 1910              	.LVL251:
 1911              	.L147:
 1912 0014 6FF00300 		mvn	r0, #3
 1913              	.LVL252:
 1914 0018 7047     		bx	lr
 1915              		.cfi_endproc
 1916              	.LFE17:
 1918 001a 00BF     		.section	.text.Mqtt_HandleConnAck,"ax",%progbits
 1919              		.align	2
 1920              		.global	Mqtt_HandleConnAck
 1921              		.thumb
 1922              		.thumb_func
 1924              	Mqtt_HandleConnAck:
 1925              	.LFB18:
 376:./mqtt/source/mqtt.c ****     char ack_flags, ret_code;
 1926              		.loc 1 376 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              	.LVL253:
 379:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1931              		.loc 1 379 0
 1932 0000 71B9     		cbnz	r1, .L153
 379:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1933              		.loc 1 379 0 is_stmt 0 discriminator 1
 1934 0002 022B     		cmp	r3, #2
 1935 0004 0FD1     		bne	.L154
 383:./mqtt/source/mqtt.c ****     ret_code = pkt[1];
 1936              		.loc 1 383 0 is_stmt 1
 1937 0006 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1938              	.LVL254:
 384:./mqtt/source/mqtt.c **** 
 1939              		.loc 1 384 0
 1940 0008 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 1941              	.LVL255:
 386:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1942              		.loc 1 386 0
 1943 000a 11F0010F 		tst	r1, #1
 1944 000e 00D0     		beq	.L152
 386:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1945              		.loc 1 386 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 69


 1946 0010 62B9     		cbnz	r2, .L155
 1947              	.L152:
 386:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 1948              		.loc 1 386 0 discriminator 3
 1949 0012 052A     		cmp	r2, #5
 1950 0014 0DD8     		bhi	.L156
 376:./mqtt/source/mqtt.c ****     char ack_flags, ret_code;
 1951              		.loc 1 376 0 is_stmt 1
 1952 0016 08B5     		push	{r3, lr}
 1953              	.LCFI35:
 1954              		.cfi_def_cfa_offset 8
 1955              		.cfi_offset 3, -8
 1956              		.cfi_offset 14, -4
 390:./mqtt/source/mqtt.c **** }
 1957              		.loc 1 390 0
 1958 0018 836A     		ldr	r3, [r0, #40]
 1959              	.LVL256:
 1960 001a 406A     		ldr	r0, [r0, #36]
 1961              	.LVL257:
 1962 001c 9847     		blx	r3
 1963              	.LVL258:
 1964 001e 08BD     		pop	{r3, pc}
 1965              	.LVL259:
 1966              	.L153:
 1967              	.LCFI36:
 1968              		.cfi_def_cfa_offset 0
 1969              		.cfi_restore 3
 1970              		.cfi_restore 14
 380:./mqtt/source/mqtt.c ****     }
 1971              		.loc 1 380 0
 1972 0020 6FF00300 		mvn	r0, #3
 1973              	.LVL260:
 1974 0024 7047     		bx	lr
 1975              	.LVL261:
 1976              	.L154:
 1977 0026 6FF00300 		mvn	r0, #3
 1978              	.LVL262:
 1979 002a 7047     		bx	lr
 1980              	.LVL263:
 1981              	.L155:
 387:./mqtt/source/mqtt.c ****     }
 1982              		.loc 1 387 0
 1983 002c 6FF00300 		mvn	r0, #3
 1984              	.LVL264:
 1985 0030 7047     		bx	lr
 1986              	.LVL265:
 1987              	.L156:
 1988 0032 6FF00300 		mvn	r0, #3
 1989              	.LVL266:
 1990 0036 7047     		bx	lr
 1991              		.cfi_endproc
 1992              	.LFE18:
 1994              		.section	.text.Mqtt_HandlePubAck,"ax",%progbits
 1995              		.align	2
 1996              		.global	Mqtt_HandlePubAck
 1997              		.thumb
 1998              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 70


 2000              	Mqtt_HandlePubAck:
 2001              	.LFB20:
 581:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2002              		.loc 1 581 0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 2006              	.LVL267:
 584:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2007              		.loc 1 584 0
 2008 0000 61B9     		cbnz	r1, .L161
 581:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2009              		.loc 1 581 0 discriminator 1
 2010 0002 10B5     		push	{r4, lr}
 2011              	.LCFI37:
 2012              		.cfi_def_cfa_offset 8
 2013              		.cfi_offset 4, -8
 2014              		.cfi_offset 14, -4
 2015 0004 0446     		mov	r4, r0
 584:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2016              		.loc 1 584 0 discriminator 1
 2017 0006 022B     		cmp	r3, #2
 2018 0008 0BD1     		bne	.L162
 2019 000a 1046     		mov	r0, r2
 2020              	.LVL268:
 588:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2021              		.loc 1 588 0
 2022 000c FFF7FEFF 		bl	Mqtt_RB16
 2023              	.LVL269:
 589:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2024              		.loc 1 589 0
 2025 0010 0146     		mov	r1, r0
 2026 0012 48B1     		cbz	r0, .L163
 593:./mqtt/source/mqtt.c **** }
 2027              		.loc 1 593 0
 2028 0014 A36B     		ldr	r3, [r4, #56]
 2029 0016 606B     		ldr	r0, [r4, #52]
 2030              	.LVL270:
 2031 0018 9847     		blx	r3
 2032              	.LVL271:
 2033 001a 10BD     		pop	{r4, pc}
 2034              	.LVL272:
 2035              	.L161:
 2036              	.LCFI38:
 2037              		.cfi_def_cfa_offset 0
 2038              		.cfi_restore 4
 2039              		.cfi_restore 14
 585:./mqtt/source/mqtt.c ****     }
 2040              		.loc 1 585 0
 2041 001c 6FF00300 		mvn	r0, #3
 2042              	.LVL273:
 594:./mqtt/source/mqtt.c **** 
 2043              		.loc 1 594 0
 2044 0020 7047     		bx	lr
 2045              	.LVL274:
 2046              	.L162:
 2047              	.LCFI39:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 71


 2048              		.cfi_def_cfa_offset 8
 2049              		.cfi_offset 4, -8
 2050              		.cfi_offset 14, -4
 585:./mqtt/source/mqtt.c ****     }
 2051              		.loc 1 585 0
 2052 0022 6FF00300 		mvn	r0, #3
 2053              	.LVL275:
 2054 0026 10BD     		pop	{r4, pc}
 2055              	.LVL276:
 2056              	.L163:
 590:./mqtt/source/mqtt.c ****     }
 2057              		.loc 1 590 0
 2058 0028 6FF00300 		mvn	r0, #3
 2059              	.LVL277:
 594:./mqtt/source/mqtt.c **** 
 2060              		.loc 1 594 0
 2061 002c 10BD     		pop	{r4, pc}
 2062              		.cfi_endproc
 2063              	.LFE20:
 2065 002e 00BF     		.section	.text.Mqtt_HandlePubComp,"ax",%progbits
 2066              		.align	2
 2067              		.global	Mqtt_HandlePubComp
 2068              		.thumb
 2069              		.thumb_func
 2071              	Mqtt_HandlePubComp:
 2072              	.LFB23:
 662:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2073              		.loc 1 662 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              	.LVL278:
 665:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2078              		.loc 1 665 0
 2079 0000 61B9     		cbnz	r1, .L167
 662:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2080              		.loc 1 662 0 discriminator 1
 2081 0002 10B5     		push	{r4, lr}
 2082              	.LCFI40:
 2083              		.cfi_def_cfa_offset 8
 2084              		.cfi_offset 4, -8
 2085              		.cfi_offset 14, -4
 2086 0004 0446     		mov	r4, r0
 665:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2087              		.loc 1 665 0 discriminator 1
 2088 0006 022B     		cmp	r3, #2
 2089 0008 0BD1     		bne	.L168
 2090 000a 1046     		mov	r0, r2
 2091              	.LVL279:
 669:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2092              		.loc 1 669 0
 2093 000c FFF7FEFF 		bl	Mqtt_RB16
 2094              	.LVL280:
 670:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2095              		.loc 1 670 0
 2096 0010 0146     		mov	r1, r0
 2097 0012 48B1     		cbz	r0, .L169
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 72


 674:./mqtt/source/mqtt.c **** }
 2098              		.loc 1 674 0
 2099 0014 236D     		ldr	r3, [r4, #80]
 2100 0016 E06C     		ldr	r0, [r4, #76]
 2101              	.LVL281:
 2102 0018 9847     		blx	r3
 2103              	.LVL282:
 2104 001a 10BD     		pop	{r4, pc}
 2105              	.LVL283:
 2106              	.L167:
 2107              	.LCFI41:
 2108              		.cfi_def_cfa_offset 0
 2109              		.cfi_restore 4
 2110              		.cfi_restore 14
 666:./mqtt/source/mqtt.c ****     }
 2111              		.loc 1 666 0
 2112 001c 6FF00300 		mvn	r0, #3
 2113              	.LVL284:
 675:./mqtt/source/mqtt.c **** 
 2114              		.loc 1 675 0
 2115 0020 7047     		bx	lr
 2116              	.LVL285:
 2117              	.L168:
 2118              	.LCFI42:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 4, -8
 2121              		.cfi_offset 14, -4
 666:./mqtt/source/mqtt.c ****     }
 2122              		.loc 1 666 0
 2123 0022 6FF00300 		mvn	r0, #3
 2124              	.LVL286:
 2125 0026 10BD     		pop	{r4, pc}
 2126              	.LVL287:
 2127              	.L169:
 671:./mqtt/source/mqtt.c ****     }
 2128              		.loc 1 671 0
 2129 0028 6FF00300 		mvn	r0, #3
 2130              	.LVL288:
 675:./mqtt/source/mqtt.c **** 
 2131              		.loc 1 675 0
 2132 002c 10BD     		pop	{r4, pc}
 2133              		.cfi_endproc
 2134              	.LFE23:
 2136 002e 00BF     		.section	.text.Mqtt_HandleSubAck,"ax",%progbits
 2137              		.align	2
 2138              		.global	Mqtt_HandleSubAck
 2139              		.thumb
 2140              		.thumb_func
 2142              	Mqtt_HandleSubAck:
 2143              	.LFB24:
 679:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2144              		.loc 1 679 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              	.LVL289:
 683:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 73


 2149              		.loc 1 683 0
 2150 0000 F1B9     		cbnz	r1, .L175
 683:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2151              		.loc 1 683 0 is_stmt 0 discriminator 1
 2152 0002 012B     		cmp	r3, #1
 2153 0004 1FD9     		bls	.L176
 679:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2154              		.loc 1 679 0 is_stmt 1
 2155 0006 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2156              	.LCFI43:
 2157              		.cfi_def_cfa_offset 24
 2158              		.cfi_offset 4, -24
 2159              		.cfi_offset 5, -20
 2160              		.cfi_offset 6, -16
 2161              		.cfi_offset 7, -12
 2162              		.cfi_offset 8, -8
 2163              		.cfi_offset 14, -4
 2164 000a 1F46     		mov	r7, r3
 2165 000c 1646     		mov	r6, r2
 2166 000e 8046     		mov	r8, r0
 687:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2167              		.loc 1 687 0
 2168 0010 1046     		mov	r0, r2
 2169              	.LVL290:
 2170 0012 FFF7FEFF 		bl	Mqtt_RB16
 2171              	.LVL291:
 688:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2172              		.loc 1 688 0
 2173 0016 0146     		mov	r1, r0
 2174 0018 C0B1     		cbz	r0, .L177
 692:./mqtt/source/mqtt.c ****         if(*code & 0x7C) {
 2175              		.loc 1 692 0
 2176 001a B21C     		adds	r2, r6, #2
 2177              	.LVL292:
 2178 001c 1446     		mov	r4, r2
 2179 001e 04E0     		b	.L173
 2180              	.LVL293:
 2181              	.L174:
 693:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2182              		.loc 1 693 0
 2183 0020 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 2184 0022 15F07C0F 		tst	r5, #124
 2185 0026 15D1     		bne	.L178
 692:./mqtt/source/mqtt.c ****         if(*code & 0x7C) {
 2186              		.loc 1 692 0 discriminator 2
 2187 0028 0134     		adds	r4, r4, #1
 2188              	.LVL294:
 2189              	.L173:
 692:./mqtt/source/mqtt.c ****         if(*code & 0x7C) {
 2190              		.loc 1 692 0 is_stmt 0 discriminator 1
 2191 002a F519     		adds	r5, r6, r7
 2192 002c AC42     		cmp	r4, r5
 2193 002e F7D3     		bcc	.L174
 698:./mqtt/source/mqtt.c **** }
 2194              		.loc 1 698 0 is_stmt 1
 2195 0030 D8F85840 		ldr	r4, [r8, #88]
 2196              	.LVL295:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 74


 2197 0034 BB1E     		subs	r3, r7, #2
 2198 0036 D8F85400 		ldr	r0, [r8, #84]
 2199              	.LVL296:
 2200 003a A047     		blx	r4
 2201              	.LVL297:
 2202 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2203              	.LVL298:
 2204              	.L175:
 2205              	.LCFI44:
 2206              		.cfi_def_cfa_offset 0
 2207              		.cfi_restore 4
 2208              		.cfi_restore 5
 2209              		.cfi_restore 6
 2210              		.cfi_restore 7
 2211              		.cfi_restore 8
 2212              		.cfi_restore 14
 684:./mqtt/source/mqtt.c ****     }
 2213              		.loc 1 684 0
 2214 0040 6FF00300 		mvn	r0, #3
 2215              	.LVL299:
 699:./mqtt/source/mqtt.c **** 
 2216              		.loc 1 699 0
 2217 0044 7047     		bx	lr
 2218              	.LVL300:
 2219              	.L176:
 684:./mqtt/source/mqtt.c ****     }
 2220              		.loc 1 684 0
 2221 0046 6FF00300 		mvn	r0, #3
 2222              	.LVL301:
 2223 004a 7047     		bx	lr
 2224              	.LVL302:
 2225              	.L177:
 2226              	.LCFI45:
 2227              		.cfi_def_cfa_offset 24
 2228              		.cfi_offset 4, -24
 2229              		.cfi_offset 5, -20
 2230              		.cfi_offset 6, -16
 2231              		.cfi_offset 7, -12
 2232              		.cfi_offset 8, -8
 2233              		.cfi_offset 14, -4
 689:./mqtt/source/mqtt.c ****     }
 2234              		.loc 1 689 0
 2235 004c 6FF00300 		mvn	r0, #3
 2236              	.LVL303:
 2237 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2238              	.LVL304:
 2239              	.L178:
 694:./mqtt/source/mqtt.c ****         }
 2240              		.loc 1 694 0
 2241 0054 6FF00300 		mvn	r0, #3
 2242              	.LVL305:
 699:./mqtt/source/mqtt.c **** 
 2243              		.loc 1 699 0
 2244 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2245              		.cfi_endproc
 2246              	.LFE24:
 2248              		.section	.text.Mqtt_HandleUnsubAck,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 75


 2249              		.align	2
 2250              		.global	Mqtt_HandleUnsubAck
 2251              		.thumb
 2252              		.thumb_func
 2254              	Mqtt_HandleUnsubAck:
 2255              	.LFB25:
 703:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2256              		.loc 1 703 0
 2257              		.cfi_startproc
 2258              		@ args = 0, pretend = 0, frame = 0
 2259              		@ frame_needed = 0, uses_anonymous_args = 0
 2260              	.LVL306:
 706:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2261              		.loc 1 706 0
 2262 0000 61B9     		cbnz	r1, .L183
 703:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2263              		.loc 1 703 0 discriminator 1
 2264 0002 10B5     		push	{r4, lr}
 2265              	.LCFI46:
 2266              		.cfi_def_cfa_offset 8
 2267              		.cfi_offset 4, -8
 2268              		.cfi_offset 14, -4
 2269 0004 0446     		mov	r4, r0
 706:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2270              		.loc 1 706 0 discriminator 1
 2271 0006 022B     		cmp	r3, #2
 2272 0008 0BD1     		bne	.L184
 2273 000a 1046     		mov	r0, r2
 2274              	.LVL307:
 710:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2275              		.loc 1 710 0
 2276 000c FFF7FEFF 		bl	Mqtt_RB16
 2277              	.LVL308:
 711:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2278              		.loc 1 711 0
 2279 0010 0146     		mov	r1, r0
 2280 0012 48B1     		cbz	r0, .L185
 715:./mqtt/source/mqtt.c **** }
 2281              		.loc 1 715 0
 2282 0014 236E     		ldr	r3, [r4, #96]
 2283 0016 E06D     		ldr	r0, [r4, #92]
 2284              	.LVL309:
 2285 0018 9847     		blx	r3
 2286              	.LVL310:
 2287 001a 10BD     		pop	{r4, pc}
 2288              	.LVL311:
 2289              	.L183:
 2290              	.LCFI47:
 2291              		.cfi_def_cfa_offset 0
 2292              		.cfi_restore 4
 2293              		.cfi_restore 14
 707:./mqtt/source/mqtt.c ****     }
 2294              		.loc 1 707 0
 2295 001c 6FF00300 		mvn	r0, #3
 2296              	.LVL312:
 716:./mqtt/source/mqtt.c **** 
 2297              		.loc 1 716 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 76


 2298 0020 7047     		bx	lr
 2299              	.LVL313:
 2300              	.L184:
 2301              	.LCFI48:
 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 4, -8
 2304              		.cfi_offset 14, -4
 707:./mqtt/source/mqtt.c ****     }
 2305              		.loc 1 707 0
 2306 0022 6FF00300 		mvn	r0, #3
 2307              	.LVL314:
 2308 0026 10BD     		pop	{r4, pc}
 2309              	.LVL315:
 2310              	.L185:
 712:./mqtt/source/mqtt.c ****     }
 2311              		.loc 1 712 0
 2312 0028 6FF00300 		mvn	r0, #3
 2313              	.LVL316:
 716:./mqtt/source/mqtt.c **** 
 2314              		.loc 1 716 0
 2315 002c 10BD     		pop	{r4, pc}
 2316              		.cfi_endproc
 2317              	.LFE25:
 2319 002e 00BF     		.section	.text.Mqtt_InitContext,"ax",%progbits
 2320              		.align	2
 2321              		.global	Mqtt_InitContext
 2322              		.thumb
 2323              		.thumb_func
 2325              	Mqtt_InitContext:
 2326              	.LFB27:
 758:./mqtt/source/mqtt.c ****     memset(ctx, 0, sizeof(*ctx));
 2327              		.loc 1 758 0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 0
 2330              		@ frame_needed = 0, uses_anonymous_args = 0
 2331              	.LVL317:
 2332 0000 38B5     		push	{r3, r4, r5, lr}
 2333              	.LCFI49:
 2334              		.cfi_def_cfa_offset 16
 2335              		.cfi_offset 3, -16
 2336              		.cfi_offset 4, -12
 2337              		.cfi_offset 5, -8
 2338              		.cfi_offset 14, -4
 2339 0002 0546     		mov	r5, r0
 2340 0004 0C46     		mov	r4, r1
 759:./mqtt/source/mqtt.c **** 
 2341              		.loc 1 759 0
 2342 0006 6C22     		movs	r2, #108
 2343 0008 0021     		movs	r1, #0
 2344              	.LVL318:
 2345 000a FFF7FEFF 		bl	memset
 2346              	.LVL319:
 761:./mqtt/source/mqtt.c ****     if(NULL == ctx->bgn) {
 2347              		.loc 1 761 0
 2348 000e 2046     		mov	r0, r4
 2349 0010 FFF7FEFF 		bl	malloc
 2350              	.LVL320:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 77


 2351 0014 2860     		str	r0, [r5]
 762:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 2352              		.loc 1 762 0
 2353 0016 20B1     		cbz	r0, .L189
 766:./mqtt/source/mqtt.c ****     ctx->pos = ctx->bgn;
 2354              		.loc 1 766 0
 2355 0018 0444     		add	r4, r4, r0
 2356              	.LVL321:
 2357 001a 6C60     		str	r4, [r5, #4]
 767:./mqtt/source/mqtt.c **** 
 2358              		.loc 1 767 0
 2359 001c A860     		str	r0, [r5, #8]
 769:./mqtt/source/mqtt.c **** }
 2360              		.loc 1 769 0
 2361 001e 0020     		movs	r0, #0
 2362 0020 38BD     		pop	{r3, r4, r5, pc}
 2363              	.LVL322:
 2364              	.L189:
 763:./mqtt/source/mqtt.c ****     }
 2365              		.loc 1 763 0
 2366 0022 4FF0FF30 		mov	r0, #-1
 770:./mqtt/source/mqtt.c **** 
 2367              		.loc 1 770 0
 2368 0026 38BD     		pop	{r3, r4, r5, pc}
 2369              		.cfi_endproc
 2370              	.LFE27:
 2372              		.section	.text.Mqtt_DestroyContext,"ax",%progbits
 2373              		.align	2
 2374              		.global	Mqtt_DestroyContext
 2375              		.thumb
 2376              		.thumb_func
 2378              	Mqtt_DestroyContext:
 2379              	.LFB28:
 773:./mqtt/source/mqtt.c ****     free(ctx->bgn);
 2380              		.loc 1 773 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              	.LVL323:
 2385 0000 10B5     		push	{r4, lr}
 2386              	.LCFI50:
 2387              		.cfi_def_cfa_offset 8
 2388              		.cfi_offset 4, -8
 2389              		.cfi_offset 14, -4
 2390 0002 0446     		mov	r4, r0
 774:./mqtt/source/mqtt.c ****     memset(ctx, 0, sizeof(*ctx));
 2391              		.loc 1 774 0
 2392 0004 0068     		ldr	r0, [r0]
 2393              	.LVL324:
 2394 0006 FFF7FEFF 		bl	free
 2395              	.LVL325:
 775:./mqtt/source/mqtt.c **** }
 2396              		.loc 1 775 0
 2397 000a 6C22     		movs	r2, #108
 2398 000c 0021     		movs	r1, #0
 2399 000e 2046     		mov	r0, r4
 2400 0010 FFF7FEFF 		bl	memset
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 78


 2401              	.LVL326:
 2402 0014 10BD     		pop	{r4, pc}
 2403              		.cfi_endproc
 2404              	.LFE28:
 2406 0016 00BF     		.section	.text.Mqtt_SendPkt,"ax",%progbits
 2407              		.align	2
 2408              		.global	Mqtt_SendPkt
 2409              		.thumb
 2410              		.thumb_func
 2412              	Mqtt_SendPkt:
 2413              	.LFB30:
 846:./mqtt/source/mqtt.c ****     const struct MqttExtent *cursor;
 2414              		.loc 1 846 0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 0
 2417              		@ frame_needed = 0, uses_anonymous_args = 0
 2418              	.LVL327:
 2419 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2420              	.LCFI51:
 2421              		.cfi_def_cfa_offset 32
 2422              		.cfi_offset 3, -32
 2423              		.cfi_offset 4, -28
 2424              		.cfi_offset 5, -24
 2425              		.cfi_offset 6, -20
 2426              		.cfi_offset 7, -16
 2427              		.cfi_offset 8, -12
 2428              		.cfi_offset 9, -8
 2429              		.cfi_offset 14, -4
 854:./mqtt/source/mqtt.c ****         return 0;
 2430              		.loc 1 854 0
 2431 0004 CB69     		ldr	r3, [r1, #28]
 2432 0006 9342     		cmp	r3, r2
 2433 0008 43D9     		bls	.L201
 858:./mqtt/source/mqtt.c ****     bytes = 0;
 2434              		.loc 1 858 0
 2435 000a 0C68     		ldr	r4, [r1]
 2436              	.LVL328:
 859:./mqtt/source/mqtt.c ****     while(cursor && bytes < offset) {
 2437              		.loc 1 859 0
 2438 000c 0025     		movs	r5, #0
 860:./mqtt/source/mqtt.c ****         bytes += cursor->len;
 2439              		.loc 1 860 0
 2440 000e 02E0     		b	.L195
 2441              	.LVL329:
 2442              	.L197:
 861:./mqtt/source/mqtt.c ****         cursor = cursor->next;
 2443              		.loc 1 861 0
 2444 0010 2368     		ldr	r3, [r4]
 2445 0012 1D44     		add	r5, r5, r3
 2446              	.LVL330:
 862:./mqtt/source/mqtt.c ****     }
 2447              		.loc 1 862 0
 2448 0014 A468     		ldr	r4, [r4, #8]
 2449              	.LVL331:
 2450              	.L195:
 860:./mqtt/source/mqtt.c ****         bytes += cursor->len;
 2451              		.loc 1 860 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 79


 2452 0016 3CB1     		cbz	r4, .L202
 860:./mqtt/source/mqtt.c ****         bytes += cursor->len;
 2453              		.loc 1 860 0 is_stmt 0 discriminator 1
 2454 0018 9542     		cmp	r5, r2
 2455 001a F9D3     		bcc	.L197
 2456 001c 2346     		mov	r3, r4
 2457 001e 0026     		movs	r6, #0
 2458 0020 04E0     		b	.L196
 2459              	.LVL332:
 2460              	.L198:
 868:./mqtt/source/mqtt.c ****     }
 2461              		.loc 1 868 0 is_stmt 1 discriminator 2
 2462 0022 0136     		adds	r6, r6, #1
 2463              	.LVL333:
 867:./mqtt/source/mqtt.c ****         ++ext_count;
 2464              		.loc 1 867 0 discriminator 2
 2465 0024 9B68     		ldr	r3, [r3, #8]
 2466              	.LVL334:
 2467 0026 01E0     		b	.L196
 2468              	.LVL335:
 2469              	.L202:
 2470 0028 2346     		mov	r3, r4
 2471 002a 0026     		movs	r6, #0
 2472              	.LVL336:
 2473              	.L196:
 867:./mqtt/source/mqtt.c ****         ++ext_count;
 2474              		.loc 1 867 0 is_stmt 0 discriminator 1
 2475 002c 002B     		cmp	r3, #0
 2476 002e F8D1     		bne	.L198
 871:./mqtt/source/mqtt.c ****         return 0;
 2477              		.loc 1 871 0 is_stmt 1
 2478 0030 96B3     		cbz	r6, .L203
 2479 0032 9146     		mov	r9, r2
 2480 0034 8046     		mov	r8, r0
 877:./mqtt/source/mqtt.c ****     if(!iov) {
 2481              		.loc 1 877 0
 2482 0036 F000     		lsls	r0, r6, #3
 2483              	.LVL337:
 2484 0038 FFF7FEFF 		bl	malloc
 2485              	.LVL338:
 878:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 2486              		.loc 1 878 0
 2487 003c 0746     		mov	r7, r0
 2488 003e 70B3     		cbz	r0, .L204
 882:./mqtt/source/mqtt.c ****     iov[0].iov_len = first_ext->len - (offset - bytes);
 2489              		.loc 1 882 0
 2490 0040 6268     		ldr	r2, [r4, #4]
 2491 0042 C5EB0903 		rsb	r3, r5, r9
 2492 0046 1344     		add	r3, r3, r2
 2493 0048 0360     		str	r3, [r0]
 883:./mqtt/source/mqtt.c **** 
 2494              		.loc 1 883 0
 2495 004a 2368     		ldr	r3, [r4]
 2496 004c C9EB0505 		rsb	r5, r9, r5
 2497              	.LVL339:
 2498 0050 1D44     		add	r5, r5, r3
 2499 0052 4560     		str	r5, [r0, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 80


 2500              	.LVL340:
 886:./mqtt/source/mqtt.c ****         iov[i].iov_base = cursor->payload;
 2501              		.loc 1 886 0
 2502 0054 A368     		ldr	r3, [r4, #8]
 2503              	.LVL341:
 885:./mqtt/source/mqtt.c ****     for(cursor = first_ext->next; cursor; cursor = cursor->next) {
 2504              		.loc 1 885 0
 2505 0056 0122     		movs	r2, #1
 886:./mqtt/source/mqtt.c ****         iov[i].iov_base = cursor->payload;
 2506              		.loc 1 886 0
 2507 0058 08E0     		b	.L199
 2508              	.LVL342:
 2509              	.L200:
 887:./mqtt/source/mqtt.c ****         iov[i].iov_len = cursor->len;
 2510              		.loc 1 887 0 discriminator 3
 2511 005a 07EBC201 		add	r1, r7, r2, lsl #3
 2512 005e 5868     		ldr	r0, [r3, #4]
 2513 0060 47F83200 		str	r0, [r7, r2, lsl #3]
 888:./mqtt/source/mqtt.c ****         ++i;
 2514              		.loc 1 888 0 discriminator 3
 2515 0064 1868     		ldr	r0, [r3]
 2516 0066 4860     		str	r0, [r1, #4]
 889:./mqtt/source/mqtt.c ****     }
 2517              		.loc 1 889 0 discriminator 3
 2518 0068 0132     		adds	r2, r2, #1
 2519              	.LVL343:
 886:./mqtt/source/mqtt.c ****         iov[i].iov_base = cursor->payload;
 2520              		.loc 1 886 0 discriminator 3
 2521 006a 9B68     		ldr	r3, [r3, #8]
 2522              	.LVL344:
 2523              	.L199:
 886:./mqtt/source/mqtt.c ****         iov[i].iov_base = cursor->payload;
 2524              		.loc 1 886 0 is_stmt 0 discriminator 1
 2525 006c 002B     		cmp	r3, #0
 2526 006e F4D1     		bne	.L200
 892:./mqtt/source/mqtt.c ****     i = ctx->writev_func(ctx->writev_func_arg, iov, ext_count);
 2527              		.loc 1 892 0 is_stmt 1
 2528 0070 0D48     		ldr	r0, .L206
 2529 0072 FFF7FEFF 		bl	puts
 2530              	.LVL345:
 893:./mqtt/source/mqtt.c ****     free(iov);
 2531              		.loc 1 893 0
 2532 0076 D8F81830 		ldr	r3, [r8, #24]
 2533 007a 3246     		mov	r2, r6
 2534 007c 3946     		mov	r1, r7
 2535 007e D8F81400 		ldr	r0, [r8, #20]
 2536 0082 9847     		blx	r3
 2537              	.LVL346:
 2538 0084 0446     		mov	r4, r0
 2539              	.LVL347:
 894:./mqtt/source/mqtt.c **** 
 2540              		.loc 1 894 0
 2541 0086 3846     		mov	r0, r7
 2542              	.LVL348:
 2543 0088 FFF7FEFF 		bl	free
 2544              	.LVL349:
 896:./mqtt/source/mqtt.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 81


 2545              		.loc 1 896 0
 2546 008c 2046     		mov	r0, r4
 2547 008e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2548              	.LVL350:
 2549              	.L201:
 855:./mqtt/source/mqtt.c ****     }
 2550              		.loc 1 855 0
 2551 0092 0020     		movs	r0, #0
 2552              	.LVL351:
 2553 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2554              	.LVL352:
 2555              	.L203:
 872:./mqtt/source/mqtt.c ****     }
 2556              		.loc 1 872 0
 2557 0098 0020     		movs	r0, #0
 2558              	.LVL353:
 2559 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2560              	.LVL354:
 2561              	.L204:
 879:./mqtt/source/mqtt.c ****     }
 2562              		.loc 1 879 0
 2563 009e 4FF0FF30 		mov	r0, #-1
 2564              	.LVL355:
 897:./mqtt/source/mqtt.c **** 
 2565              		.loc 1 897 0
 2566 00a2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2567              	.LVL356:
 2568              	.L207:
 2569 00a6 00BF     		.align	2
 2570              	.L206:
 2571 00a8 1C000000 		.word	.LC2
 2572              		.cfi_endproc
 2573              	.LFE30:
 2575              		.section	.text.Mqtt_HandlePubRec,"ax",%progbits
 2576              		.align	2
 2577              		.global	Mqtt_HandlePubRec
 2578              		.thumb
 2579              		.thumb_func
 2581              	Mqtt_HandlePubRec:
 2582              	.LFB21:
 598:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2583              		.loc 1 598 0
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 32
 2586              		@ frame_needed = 0, uses_anonymous_args = 0
 2587              	.LVL357:
 602:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2588              		.loc 1 602 0
 2589 0000 39BB     		cbnz	r1, .L211
 598:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2590              		.loc 1 598 0 discriminator 1
 2591 0002 30B5     		push	{r4, r5, lr}
 2592              	.LCFI52:
 2593              		.cfi_def_cfa_offset 12
 2594              		.cfi_offset 4, -12
 2595              		.cfi_offset 5, -8
 2596              		.cfi_offset 14, -4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 82


 2597 0004 89B0     		sub	sp, sp, #36
 2598              	.LCFI53:
 2599              		.cfi_def_cfa_offset 48
 2600 0006 0446     		mov	r4, r0
 602:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2601              		.loc 1 602 0 discriminator 1
 2602 0008 022B     		cmp	r3, #2
 2603 000a 25D1     		bne	.L212
 2604 000c 1046     		mov	r0, r2
 2605              	.LVL358:
 606:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2606              		.loc 1 606 0
 2607 000e FFF7FEFF 		bl	Mqtt_RB16
 2608              	.LVL359:
 607:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2609              		.loc 1 607 0
 2610 0012 0546     		mov	r5, r0
 2611 0014 18B3     		cbz	r0, .L213
 611:./mqtt/source/mqtt.c ****     if(err >= 0) {
 2612              		.loc 1 611 0
 2613 0016 236C     		ldr	r3, [r4, #64]
 2614 0018 0146     		mov	r1, r0
 2615 001a E06B     		ldr	r0, [r4, #60]
 2616              	.LVL360:
 2617 001c 9847     		blx	r3
 2618              	.LVL361:
 612:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 2619              		.loc 1 612 0
 2620 001e 0028     		cmp	r0, #0
 2621 0020 1FDB     		blt	.L209
 2622              	.LBB4:
 614:./mqtt/source/mqtt.c **** 
 2623              		.loc 1 614 0
 2624 0022 6846     		mov	r0, sp
 2625              	.LVL362:
 2626 0024 FFF7FEFF 		bl	MqttBuffer_Init
 2627              	.LVL363:
 616:./mqtt/source/mqtt.c ****         if(MQTTERR_NOERROR == err) {
 2628              		.loc 1 616 0
 2629 0028 2946     		mov	r1, r5
 2630 002a 6846     		mov	r0, sp
 2631 002c FFF7FEFF 		bl	Mqtt_PackPubRelPkt
 2632              	.LVL364:
 617:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 2633              		.loc 1 617 0
 2634 0030 0546     		mov	r5, r0
 2635 0032 48B9     		cbnz	r0, .L210
 618:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 2636              		.loc 1 618 0
 2637 0034 0022     		movs	r2, #0
 2638 0036 6946     		mov	r1, sp
 2639 0038 2046     		mov	r0, r4
 2640              	.LVL365:
 2641 003a FFF7FEFF 		bl	Mqtt_SendPkt
 2642              	.LVL366:
 2643 003e 079B     		ldr	r3, [sp, #28]
 2644 0040 9842     		cmp	r0, r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 83


 2645 0042 01D0     		beq	.L210
 619:./mqtt/source/mqtt.c ****             }
 2646              		.loc 1 619 0
 2647 0044 6FF00D05 		mvn	r5, #13
 2648              	.LVL367:
 2649              	.L210:
 623:./mqtt/source/mqtt.c ****     }
 2650              		.loc 1 623 0
 2651 0048 6846     		mov	r0, sp
 2652 004a FFF7FEFF 		bl	MqttBuffer_Destroy
 2653              	.LVL368:
 2654 004e 2846     		mov	r0, r5
 2655 0050 07E0     		b	.L209
 2656              	.LVL369:
 2657              	.L211:
 2658              	.LCFI54:
 2659              		.cfi_def_cfa_offset 0
 2660              		.cfi_restore 4
 2661              		.cfi_restore 5
 2662              		.cfi_restore 14
 2663              	.LBE4:
 603:./mqtt/source/mqtt.c ****     }
 2664              		.loc 1 603 0
 2665 0052 6FF00300 		mvn	r0, #3
 2666              	.LVL370:
 627:./mqtt/source/mqtt.c **** 
 2667              		.loc 1 627 0
 2668 0056 7047     		bx	lr
 2669              	.LVL371:
 2670              	.L212:
 2671              	.LCFI55:
 2672              		.cfi_def_cfa_offset 48
 2673              		.cfi_offset 4, -12
 2674              		.cfi_offset 5, -8
 2675              		.cfi_offset 14, -4
 603:./mqtt/source/mqtt.c ****     }
 2676              		.loc 1 603 0
 2677 0058 6FF00300 		mvn	r0, #3
 2678              	.LVL372:
 2679 005c 01E0     		b	.L209
 2680              	.LVL373:
 2681              	.L213:
 608:./mqtt/source/mqtt.c ****     }
 2682              		.loc 1 608 0
 2683 005e 6FF00300 		mvn	r0, #3
 2684              	.LVL374:
 2685              	.L209:
 627:./mqtt/source/mqtt.c **** 
 2686              		.loc 1 627 0
 2687 0062 09B0     		add	sp, sp, #36
 2688              	.LCFI56:
 2689              		.cfi_def_cfa_offset 12
 2690              		@ sp needed
 2691 0064 30BD     		pop	{r4, r5, pc}
 2692              		.cfi_endproc
 2693              	.LFE21:
 2695 0066 00BF     		.section	.text.Mqtt_HandlePubRel,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 84


 2696              		.align	2
 2697              		.global	Mqtt_HandlePubRel
 2698              		.thumb
 2699              		.thumb_func
 2701              	Mqtt_HandlePubRel:
 2702              	.LFB22:
 631:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2703              		.loc 1 631 0
 2704              		.cfi_startproc
 2705              		@ args = 0, pretend = 0, frame = 32
 2706              		@ frame_needed = 0, uses_anonymous_args = 0
 2707              	.LVL375:
 635:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2708              		.loc 1 635 0
 2709 0000 0229     		cmp	r1, #2
 2710 0002 27D1     		bne	.L220
 631:./mqtt/source/mqtt.c ****     uint16_t pkt_id;
 2711              		.loc 1 631 0 discriminator 1
 2712 0004 30B5     		push	{r4, r5, lr}
 2713              	.LCFI57:
 2714              		.cfi_def_cfa_offset 12
 2715              		.cfi_offset 4, -12
 2716              		.cfi_offset 5, -8
 2717              		.cfi_offset 14, -4
 2718 0006 89B0     		sub	sp, sp, #36
 2719              	.LCFI58:
 2720              		.cfi_def_cfa_offset 48
 2721 0008 0446     		mov	r4, r0
 635:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2722              		.loc 1 635 0 discriminator 1
 2723 000a 022B     		cmp	r3, #2
 2724 000c 25D1     		bne	.L221
 2725 000e 1046     		mov	r0, r2
 2726              	.LVL376:
 639:./mqtt/source/mqtt.c ****     if(0 == pkt_id) {
 2727              		.loc 1 639 0
 2728 0010 FFF7FEFF 		bl	Mqtt_RB16
 2729              	.LVL377:
 640:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2730              		.loc 1 640 0
 2731 0014 0546     		mov	r5, r0
 2732 0016 18B3     		cbz	r0, .L222
 644:./mqtt/source/mqtt.c ****     if(err >= 0) {
 2733              		.loc 1 644 0
 2734 0018 A36C     		ldr	r3, [r4, #72]
 2735 001a 0146     		mov	r1, r0
 2736 001c 606C     		ldr	r0, [r4, #68]
 2737              	.LVL378:
 2738 001e 9847     		blx	r3
 2739              	.LVL379:
 645:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 2740              		.loc 1 645 0
 2741 0020 0028     		cmp	r0, #0
 2742 0022 1FDB     		blt	.L218
 2743              	.LBB5:
 647:./mqtt/source/mqtt.c ****         err = Mqtt_PackPubCompPkt(response, pkt_id);
 2744              		.loc 1 647 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 85


 2745 0024 6846     		mov	r0, sp
 2746              	.LVL380:
 2747 0026 FFF7FEFF 		bl	MqttBuffer_Init
 2748              	.LVL381:
 648:./mqtt/source/mqtt.c ****         if(MQTTERR_NOERROR == err) {
 2749              		.loc 1 648 0
 2750 002a 2946     		mov	r1, r5
 2751 002c 6846     		mov	r0, sp
 2752 002e FFF7FEFF 		bl	Mqtt_PackPubCompPkt
 2753              	.LVL382:
 649:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 2754              		.loc 1 649 0
 2755 0032 0546     		mov	r5, r0
 2756 0034 48B9     		cbnz	r0, .L219
 650:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 2757              		.loc 1 650 0
 2758 0036 0022     		movs	r2, #0
 2759 0038 6946     		mov	r1, sp
 2760 003a 2046     		mov	r0, r4
 2761              	.LVL383:
 2762 003c FFF7FEFF 		bl	Mqtt_SendPkt
 2763              	.LVL384:
 2764 0040 079B     		ldr	r3, [sp, #28]
 2765 0042 9842     		cmp	r0, r3
 2766 0044 01D0     		beq	.L219
 651:./mqtt/source/mqtt.c ****             }
 2767              		.loc 1 651 0
 2768 0046 6FF00D05 		mvn	r5, #13
 2769              	.LVL385:
 2770              	.L219:
 654:./mqtt/source/mqtt.c ****     }
 2771              		.loc 1 654 0
 2772 004a 6846     		mov	r0, sp
 2773 004c FFF7FEFF 		bl	MqttBuffer_Destroy
 2774              	.LVL386:
 2775 0050 2846     		mov	r0, r5
 2776 0052 07E0     		b	.L218
 2777              	.LVL387:
 2778              	.L220:
 2779              	.LCFI59:
 2780              		.cfi_def_cfa_offset 0
 2781              		.cfi_restore 4
 2782              		.cfi_restore 5
 2783              		.cfi_restore 14
 2784              	.LBE5:
 636:./mqtt/source/mqtt.c ****     }
 2785              		.loc 1 636 0
 2786 0054 6FF00300 		mvn	r0, #3
 2787              	.LVL388:
 658:./mqtt/source/mqtt.c **** 
 2788              		.loc 1 658 0
 2789 0058 7047     		bx	lr
 2790              	.LVL389:
 2791              	.L221:
 2792              	.LCFI60:
 2793              		.cfi_def_cfa_offset 48
 2794              		.cfi_offset 4, -12
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 86


 2795              		.cfi_offset 5, -8
 2796              		.cfi_offset 14, -4
 636:./mqtt/source/mqtt.c ****     }
 2797              		.loc 1 636 0
 2798 005a 6FF00300 		mvn	r0, #3
 2799              	.LVL390:
 2800 005e 01E0     		b	.L218
 2801              	.LVL391:
 2802              	.L222:
 641:./mqtt/source/mqtt.c ****     }
 2803              		.loc 1 641 0
 2804 0060 6FF00300 		mvn	r0, #3
 2805              	.LVL392:
 2806              	.L218:
 658:./mqtt/source/mqtt.c **** 
 2807              		.loc 1 658 0
 2808 0064 09B0     		add	sp, sp, #36
 2809              	.LCFI61:
 2810              		.cfi_def_cfa_offset 12
 2811              		@ sp needed
 2812 0066 30BD     		pop	{r4, r5, pc}
 2813              		.cfi_endproc
 2814              	.LFE22:
 2816              		.section	.text.Mqtt_HandlePublish,"ax",%progbits
 2817              		.align	2
 2818              		.thumb
 2819              		.thumb_func
 2821              	Mqtt_HandlePublish:
 2822              	.LFB19:
 395:./mqtt/source/mqtt.c ****     const char dup = flags & 0x08;
 2823              		.loc 1 395 0
 2824              		.cfi_startproc
 2825              		@ args = 0, pretend = 0, frame = 40
 2826              		@ frame_needed = 0, uses_anonymous_args = 0
 2827              	.LVL393:
 2828 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2829              	.LCFI62:
 2830              		.cfi_def_cfa_offset 36
 2831              		.cfi_offset 4, -36
 2832              		.cfi_offset 5, -32
 2833              		.cfi_offset 6, -28
 2834              		.cfi_offset 7, -24
 2835              		.cfi_offset 8, -20
 2836              		.cfi_offset 9, -16
 2837              		.cfi_offset 10, -12
 2838              		.cfi_offset 11, -8
 2839              		.cfi_offset 14, -4
 2840 0004 93B0     		sub	sp, sp, #76
 2841              	.LCFI63:
 2842              		.cfi_def_cfa_offset 112
 2843              	.LVL394:
 397:./mqtt/source/mqtt.c ****     const char retain = flags & 0x01;
 2844              		.loc 1 397 0
 2845 0006 C1F34108 		ubfx	r8, r1, #1, #2
 2846              	.LVL395:
 405:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2847              		.loc 1 405 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 87


 2848 000a 012B     		cmp	r3, #1
 2849 000c 40F2B080 		bls	.L240
 2850 0010 01F00806 		and	r6, r1, #8
 2851 0014 F6B2     		uxtb	r6, r6
 2852 0016 01F00101 		and	r1, r1, #1
 2853              	.LVL396:
 409:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2854              		.loc 1 409 0
 2855 001a 0029     		cmp	r1, #0
 2856 001c 40F0AB80 		bne	.L241
 2857 0020 1C46     		mov	r4, r3
 2858 0022 1546     		mov	r5, r2
 2859 0024 0746     		mov	r7, r0
 413:./mqtt/source/mqtt.c ****     if(size < (size_t)(2 + topic_len)) {
 2860              		.loc 1 413 0
 2861 0026 1046     		mov	r0, r2
 2862              	.LVL397:
 2863 0028 FFF7FEFF 		bl	Mqtt_RB16
 2864              	.LVL398:
 2865 002c 8346     		mov	fp, r0
 2866              	.LVL399:
 414:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2867              		.loc 1 414 0
 2868 002e 831C     		adds	r3, r0, #2
 2869 0030 9C42     		cmp	r4, r3
 2870 0032 C0F0A380 		bcc	.L242
 418:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0: // qos0 have no packet identifier
 2871              		.loc 1 418 0
 2872 0036 B8F1000F 		cmp	r8, #0
 2873 003a 04D0     		beq	.L228
 2874 003c B8F1020F 		cmp	r8, #2
 2875 0040 00F29F80 		bhi	.L243
 2876 0044 11E0     		b	.L254
 2877              	.L228:
 420:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2878              		.loc 1 420 0
 2879 0046 002E     		cmp	r6, #0
 2880 0048 40F09E80 		bne	.L244
 424:./mqtt/source/mqtt.c ****         topic = pkt;
 2881              		.loc 1 424 0
 2882 004c 0246     		mov	r2, r0
 2883 004e A91C     		adds	r1, r5, #2
 2884 0050 2846     		mov	r0, r5
 2885              	.LVL400:
 2886 0052 FFF7FEFF 		bl	memmove
 2887              	.LVL401:
 427:./mqtt/source/mqtt.c ****         payload = pkt + 2 + topic_len;
 2888              		.loc 1 427 0
 2889 0056 CBEB0404 		rsb	r4, fp, r4
 2890              	.LVL402:
 2891 005a 023C     		subs	r4, r4, #2
 2892              	.LVL403:
 428:./mqtt/source/mqtt.c ****         break;
 2893              		.loc 1 428 0
 2894 005c 0BF1020A 		add	r10, fp, #2
 2895 0060 AA44     		add	r10, r10, r5
 2896              	.LVL404:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 88


 425:./mqtt/source/mqtt.c **** 
 2897              		.loc 1 425 0
 2898 0062 A946     		mov	r9, r5
 399:./mqtt/source/mqtt.c ****     size_t payload_len;
 2899              		.loc 1 399 0
 2900 0064 0023     		movs	r3, #0
 2901 0066 0993     		str	r3, [sp, #36]
 429:./mqtt/source/mqtt.c **** 
 2902              		.loc 1 429 0
 2903 0068 13E0     		b	.L230
 2904              	.LVL405:
 2905              	.L254:
 433:./mqtt/source/mqtt.c ****         if(topic_len + 4 > size) {
 2906              		.loc 1 433 0
 2907 006a 05F10209 		add	r9, r5, #2
 2908              	.LVL406:
 434:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2909              		.loc 1 434 0
 2910 006e 031D     		adds	r3, r0, #4
 2911 0070 9C42     		cmp	r4, r3
 2912 0072 C0F08C80 		bcc	.L245
 438:./mqtt/source/mqtt.c ****         if(0 == pkt_id) {
 2913              		.loc 1 438 0
 2914 0076 0230     		adds	r0, r0, #2
 2915              	.LVL407:
 2916 0078 2844     		add	r0, r0, r5
 2917 007a FFF7FEFF 		bl	Mqtt_RB16
 2918              	.LVL408:
 439:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2919              		.loc 1 439 0
 2920 007e 0990     		str	r0, [sp, #36]
 2921 0080 0028     		cmp	r0, #0
 2922 0082 00F08780 		beq	.L246
 442:./mqtt/source/mqtt.c ****         payload = pkt + 4 + topic_len;
 2923              		.loc 1 442 0
 2924 0086 CBEB0404 		rsb	r4, fp, r4
 2925              	.LVL409:
 2926 008a 043C     		subs	r4, r4, #4
 2927              	.LVL410:
 443:./mqtt/source/mqtt.c ****         break;
 2928              		.loc 1 443 0
 2929 008c 0BF1040A 		add	r10, fp, #4
 2930 0090 AA44     		add	r10, r10, r5
 2931              	.LVL411:
 2932              	.L230:
 451:./mqtt/source/mqtt.c **** 
 2933              		.loc 1 451 0
 2934 0092 0023     		movs	r3, #0
 2935 0094 09F80B30 		strb	r3, [r9, fp]
 453:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_PKT;
 2936              		.loc 1 453 0
 2937 0098 5946     		mov	r1, fp
 2938 009a 4846     		mov	r0, r9
 2939 009c FFF7FEFF 		bl	Mqtt_CheckUtf8
 2940              	.LVL412:
 2941 00a0 8345     		cmp	fp, r0
 2942 00a2 7AD1     		bne	.L247
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 89


 2943 00a4 4A46     		mov	r2, r9
 2944 00a6 04E0     		b	.L231
 2945              	.LVL413:
 2946              	.L232:
 459:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2947              		.loc 1 459 0
 2948 00a8 2B2B     		cmp	r3, #43
 2949 00aa 79D0     		beq	.L248
 459:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 2950              		.loc 1 459 0 is_stmt 0 discriminator 1
 2951 00ac 232B     		cmp	r3, #35
 2952 00ae 7AD0     		beq	.L249
 462:./mqtt/source/mqtt.c ****     }
 2953              		.loc 1 462 0 is_stmt 1
 2954 00b0 0132     		adds	r2, r2, #1
 2955              	.LVL414:
 2956              	.L231:
 458:./mqtt/source/mqtt.c ****         if(('+' == *cursor) || ('#' == *cursor)) {
 2957              		.loc 1 458 0
 2958 00b2 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2959 00b4 002B     		cmp	r3, #0
 2960 00b6 F7D1     		bne	.L232
 466:./mqtt/source/mqtt.c ****         if(topic == strstr(topic, CMD_TOPIC_PREFIX)) {		/* 若是命令下发 */
 2961              		.loc 1 466 0
 2962 00b8 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2963 00bc 242B     		cmp	r3, #36
 2964 00be 19D1     		bne	.L233
 467:./mqtt/source/mqtt.c ****             //$creq/cmdid
 2965              		.loc 1 467 0
 2966 00c0 3C49     		ldr	r1, .L256
 2967 00c2 4846     		mov	r0, r9
 2968 00c4 FFF7FEFF 		bl	strstr
 2969              	.LVL415:
 2970 00c8 8145     		cmp	r9, r0
 2971 00ca 1FD1     		bne	.L250
 2972              	.LVL416:
 2973              	.LBB6:
 527:./mqtt/source/mqtt.c ****                                   ts, desc, arg, arg_len, dup,
 2974              		.loc 1 527 0
 2975 00cc BB6E     		ldr	r3, [r7, #104]
 2976 00ce CDF81880 		str	r8, [sp, #24]
 2977 00d2 0596     		str	r6, [sp, #20]
 2978 00d4 0494     		str	r4, [sp, #16]
 2979 00d6 CDF80CA0 		str	r10, [sp, #12]
 2980 00da 374A     		ldr	r2, .L256+4
 2981 00dc 0292     		str	r2, [sp, #8]
 2982 00de 0020     		movs	r0, #0
 2983 00e0 0021     		movs	r1, #0
 2984 00e2 CDE90001 		strd	r0, [sp]
 2985 00e6 09F10602 		add	r2, r9, #6
 2986              	.LVL417:
 2987 00ea 0999     		ldr	r1, [sp, #36]
 2988 00ec 786E     		ldr	r0, [r7, #100]
 2989 00ee 9847     		blx	r3
 2990              	.LVL418:
 2991 00f0 0446     		mov	r4, r0
 2992              	.LVL419:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 90


 2993 00f2 0CE0     		b	.L234
 2994              	.LVL420:
 2995              	.L233:
 2996              	.LBE6:
 539:./mqtt/source/mqtt.c ****                                   payload, payload_len, dup,
 2997              		.loc 1 539 0
 2998 00f4 3D6B     		ldr	r5, [r7, #48]
 2999              	.LVL421:
 3000 00f6 CDF80880 		str	r8, [sp, #8]
 3001 00fa 0196     		str	r6, [sp, #4]
 3002 00fc 0094     		str	r4, [sp]
 3003 00fe 5346     		mov	r3, r10
 3004 0100 4A46     		mov	r2, r9
 3005              	.LVL422:
 3006 0102 0999     		ldr	r1, [sp, #36]
 3007 0104 F86A     		ldr	r0, [r7, #44]
 3008 0106 A847     		blx	r5
 3009              	.LVL423:
 3010 0108 0446     		mov	r4, r0
 3011              	.LVL424:
 3012 010a 00E0     		b	.L234
 3013              	.LVL425:
 3014              	.L250:
 403:./mqtt/source/mqtt.c **** 
 3015              		.loc 1 403 0
 3016 010c 0024     		movs	r4, #0
 3017              	.LVL426:
 3018              	.L234:
 545:./mqtt/source/mqtt.c ****         struct MqttBuffer response[1];
 3019              		.loc 1 545 0
 3020 010e 002C     		cmp	r4, #0
 3021 0110 4CDB     		blt	.L251
 3022              	.LBB7:
 547:./mqtt/source/mqtt.c **** 
 3023              		.loc 1 547 0
 3024 0112 0AA8     		add	r0, sp, #40
 3025 0114 FFF7FEFF 		bl	MqttBuffer_Init
 3026              	.LVL427:
 549:./mqtt/source/mqtt.c ****         case MQTT_QOS_LEVEL2:
 3027              		.loc 1 549 0
 3028 0118 B8F1010F 		cmp	r8, #1
 3029 011c 08D0     		beq	.L236
 3030 011e B8F1020F 		cmp	r8, #2
 3031 0122 0AD1     		bne	.L235
 552:./mqtt/source/mqtt.c ****             break;
 3032              		.loc 1 552 0
 3033 0124 0999     		ldr	r1, [sp, #36]
 3034 0126 0AA8     		add	r0, sp, #40
 3035 0128 FFF7FEFF 		bl	Mqtt_PackPubRecPkt
 3036              	.LVL428:
 3037 012c 0446     		mov	r4, r0
 3038              	.LVL429:
 553:./mqtt/source/mqtt.c **** 
 3039              		.loc 1 553 0
 3040 012e 04E0     		b	.L235
 3041              	.LVL430:
 3042              	.L236:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 91


 557:./mqtt/source/mqtt.c ****             break;
 3043              		.loc 1 557 0
 3044 0130 0999     		ldr	r1, [sp, #36]
 3045 0132 0AA8     		add	r0, sp, #40
 3046 0134 FFF7FEFF 		bl	Mqtt_PackPubAckPkt
 3047              	.LVL431:
 3048 0138 0446     		mov	r4, r0
 3049              	.LVL432:
 3050              	.L235:
 564:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 3051              		.loc 1 564 0
 3052 013a 5CB9     		cbnz	r4, .L238
 564:./mqtt/source/mqtt.c ****             if(Mqtt_SendPkt(ctx, response, 0) != response->buffered_bytes) {
 3053              		.loc 1 564 0 is_stmt 0 discriminator 1
 3054 013c B8F1000F 		cmp	r8, #0
 3055 0140 08D0     		beq	.L238
 565:./mqtt/source/mqtt.c ****                 err = MQTTERR_FAILED_SEND_RESPONSE;
 3056              		.loc 1 565 0 is_stmt 1
 3057 0142 0022     		movs	r2, #0
 3058 0144 0AA9     		add	r1, sp, #40
 3059 0146 3846     		mov	r0, r7
 3060 0148 FFF7FEFF 		bl	Mqtt_SendPkt
 3061              	.LVL433:
 3062 014c 119B     		ldr	r3, [sp, #68]
 3063 014e 9842     		cmp	r0, r3
 3064 0150 04D1     		bne	.L252
 3065 0152 08E0     		b	.L239
 3066              	.L238:
 569:./mqtt/source/mqtt.c ****             err = MQTTERR_FAILED_SEND_RESPONSE;
 3067              		.loc 1 569 0
 3068 0154 B8F1000F 		cmp	r8, #0
 3069 0158 03D1     		bne	.L253
 3070 015a 04E0     		b	.L239
 3071              	.L252:
 566:./mqtt/source/mqtt.c ****             }
 3072              		.loc 1 566 0
 3073 015c 6FF00D04 		mvn	r4, #13
 3074              	.LVL434:
 3075 0160 01E0     		b	.L239
 3076              	.LVL435:
 3077              	.L253:
 570:./mqtt/source/mqtt.c ****         }
 3078              		.loc 1 570 0
 3079 0162 6FF00D04 		mvn	r4, #13
 3080              	.LVL436:
 3081              	.L239:
 573:./mqtt/source/mqtt.c ****     }
 3082              		.loc 1 573 0 discriminator 1
 3083 0166 0AA8     		add	r0, sp, #40
 3084 0168 FFF7FEFF 		bl	MqttBuffer_Destroy
 3085              	.LVL437:
 3086 016c 2046     		mov	r0, r4
 3087 016e 1EE0     		b	.L227
 3088              	.LVL438:
 3089              	.L240:
 3090              	.LBE7:
 406:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 92


 3091              		.loc 1 406 0
 3092 0170 6FF00300 		mvn	r0, #3
 3093              	.LVL439:
 3094 0174 1BE0     		b	.L227
 3095              	.LVL440:
 3096              	.L241:
 410:./mqtt/source/mqtt.c ****     }
 3097              		.loc 1 410 0
 3098 0176 6FF00300 		mvn	r0, #3
 3099              	.LVL441:
 3100 017a 18E0     		b	.L227
 3101              	.LVL442:
 3102              	.L242:
 415:./mqtt/source/mqtt.c ****     }
 3103              		.loc 1 415 0
 3104 017c 6FF00300 		mvn	r0, #3
 3105              	.LVL443:
 3106 0180 15E0     		b	.L227
 3107              	.LVL444:
 3108              	.L243:
 447:./mqtt/source/mqtt.c ****     }
 3109              		.loc 1 447 0
 3110 0182 6FF00300 		mvn	r0, #3
 3111              	.LVL445:
 3112 0186 12E0     		b	.L227
 3113              	.LVL446:
 3114              	.L244:
 421:./mqtt/source/mqtt.c ****         }
 3115              		.loc 1 421 0
 3116 0188 6FF00300 		mvn	r0, #3
 3117              	.LVL447:
 3118 018c 0FE0     		b	.L227
 3119              	.LVL448:
 3120              	.L245:
 435:./mqtt/source/mqtt.c ****         }
 3121              		.loc 1 435 0
 3122 018e 6FF00300 		mvn	r0, #3
 3123              	.LVL449:
 3124 0192 0CE0     		b	.L227
 3125              	.LVL450:
 3126              	.L246:
 440:./mqtt/source/mqtt.c ****         }
 3127              		.loc 1 440 0
 3128 0194 6FF00300 		mvn	r0, #3
 3129              	.LVL451:
 3130 0198 09E0     		b	.L227
 3131              	.LVL452:
 3132              	.L247:
 454:./mqtt/source/mqtt.c ****     }
 3133              		.loc 1 454 0
 3134 019a 6FF00300 		mvn	r0, #3
 3135 019e 06E0     		b	.L227
 3136              	.LVL453:
 3137              	.L248:
 460:./mqtt/source/mqtt.c ****         }
 3138              		.loc 1 460 0
 3139 01a0 6FF00300 		mvn	r0, #3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 93


 3140 01a4 03E0     		b	.L227
 3141              	.L249:
 3142 01a6 6FF00300 		mvn	r0, #3
 3143 01aa 00E0     		b	.L227
 3144              	.LVL454:
 3145              	.L251:
 3146 01ac 2046     		mov	r0, r4
 3147              	.LVL455:
 3148              	.L227:
 577:./mqtt/source/mqtt.c **** 
 3149              		.loc 1 577 0
 3150 01ae 13B0     		add	sp, sp, #76
 3151              	.LCFI64:
 3152              		.cfi_def_cfa_offset 36
 3153              		@ sp needed
 3154 01b0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3155              	.LVL456:
 3156              	.L257:
 3157              		.align	2
 3158              	.L256:
 3159 01b4 2C000000 		.word	.LC3
 3160 01b8 34000000 		.word	.LC4
 3161              		.cfi_endproc
 3162              	.LFE19:
 3164              		.section	.text.Mqtt_Dispatch,"ax",%progbits
 3165              		.align	2
 3166              		.thumb
 3167              		.thumb_func
 3169              	Mqtt_Dispatch:
 3170              	.LFB26:
 719:./mqtt/source/mqtt.c ****     const char flags = fh & 0x0F;
 3171              		.loc 1 719 0
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 0
 3174              		@ frame_needed = 0, uses_anonymous_args = 0
 3175              	.LVL457:
 3176 0000 38B5     		push	{r3, r4, r5, lr}
 3177              	.LCFI65:
 3178              		.cfi_def_cfa_offset 16
 3179              		.cfi_offset 3, -16
 3180              		.cfi_offset 4, -12
 3181              		.cfi_offset 5, -8
 3182              		.cfi_offset 14, -4
 720:./mqtt/source/mqtt.c **** 
 3183              		.loc 1 720 0
 3184 0002 01F00F05 		and	r5, r1, #15
 3185              	.LVL458:
 722:./mqtt/source/mqtt.c ****     case MQTT_PKT_PINGRESP:
 3186              		.loc 1 722 0
 3187 0006 0C09     		lsrs	r4, r1, #4
 3188 0008 023C     		subs	r4, r4, #2
 3189 000a 0B2C     		cmp	r4, #11
 3190 000c 2BD8     		bhi	.L270
 3191 000e DFE804F0 		tbb	[pc, r4]
 3192              	.LVL459:
 3193              	.L261:
 3194 0012 0A       		.byte	(.L260-.L261)/2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 94


 3195 0013 0E       		.byte	(.L262-.L261)/2
 3196 0014 12       		.byte	(.L263-.L261)/2
 3197 0015 16       		.byte	(.L264-.L261)/2
 3198 0016 1A       		.byte	(.L265-.L261)/2
 3199 0017 1E       		.byte	(.L266-.L261)/2
 3200 0018 2A       		.byte	(.L270-.L261)/2
 3201 0019 22       		.byte	(.L267-.L261)/2
 3202 001a 2A       		.byte	(.L270-.L261)/2
 3203 001b 26       		.byte	(.L268-.L261)/2
 3204 001c 2A       		.byte	(.L270-.L261)/2
 3205 001d 06       		.byte	(.L269-.L261)/2
 3206              		.p2align 1
 3207              	.L269:
 724:./mqtt/source/mqtt.c **** 
 3208              		.loc 1 724 0
 3209 001e 2946     		mov	r1, r5
 3210 0020 FFF7FEFF 		bl	Mqtt_HandlePingResp
 3211              	.LVL460:
 3212 0024 38BD     		pop	{r3, r4, r5, pc}
 3213              	.LVL461:
 3214              	.L260:
 727:./mqtt/source/mqtt.c **** 
 3215              		.loc 1 727 0
 3216 0026 2946     		mov	r1, r5
 3217 0028 FFF7FEFF 		bl	Mqtt_HandleConnAck
 3218              	.LVL462:
 3219 002c 38BD     		pop	{r3, r4, r5, pc}
 3220              	.LVL463:
 3221              	.L262:
 730:./mqtt/source/mqtt.c **** 
 3222              		.loc 1 730 0
 3223 002e 2946     		mov	r1, r5
 3224 0030 FFF7FEFF 		bl	Mqtt_HandlePublish
 3225              	.LVL464:
 3226 0034 38BD     		pop	{r3, r4, r5, pc}
 3227              	.LVL465:
 3228              	.L263:
 733:./mqtt/source/mqtt.c **** 
 3229              		.loc 1 733 0
 3230 0036 2946     		mov	r1, r5
 3231 0038 FFF7FEFF 		bl	Mqtt_HandlePubAck
 3232              	.LVL466:
 3233 003c 38BD     		pop	{r3, r4, r5, pc}
 3234              	.LVL467:
 3235              	.L264:
 736:./mqtt/source/mqtt.c **** 
 3236              		.loc 1 736 0
 3237 003e 2946     		mov	r1, r5
 3238 0040 FFF7FEFF 		bl	Mqtt_HandlePubRec
 3239              	.LVL468:
 3240 0044 38BD     		pop	{r3, r4, r5, pc}
 3241              	.LVL469:
 3242              	.L265:
 739:./mqtt/source/mqtt.c **** 
 3243              		.loc 1 739 0
 3244 0046 2946     		mov	r1, r5
 3245 0048 FFF7FEFF 		bl	Mqtt_HandlePubRel
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 95


 3246              	.LVL470:
 3247 004c 38BD     		pop	{r3, r4, r5, pc}
 3248              	.LVL471:
 3249              	.L266:
 742:./mqtt/source/mqtt.c **** 
 3250              		.loc 1 742 0
 3251 004e 2946     		mov	r1, r5
 3252 0050 FFF7FEFF 		bl	Mqtt_HandlePubComp
 3253              	.LVL472:
 3254 0054 38BD     		pop	{r3, r4, r5, pc}
 3255              	.LVL473:
 3256              	.L267:
 745:./mqtt/source/mqtt.c **** 
 3257              		.loc 1 745 0
 3258 0056 2946     		mov	r1, r5
 3259 0058 FFF7FEFF 		bl	Mqtt_HandleSubAck
 3260              	.LVL474:
 3261 005c 38BD     		pop	{r3, r4, r5, pc}
 3262              	.LVL475:
 3263              	.L268:
 748:./mqtt/source/mqtt.c **** 
 3264              		.loc 1 748 0
 3265 005e 2946     		mov	r1, r5
 3266 0060 FFF7FEFF 		bl	Mqtt_HandleUnsubAck
 3267              	.LVL476:
 3268 0064 38BD     		pop	{r3, r4, r5, pc}
 3269              	.LVL477:
 3270              	.L270:
 754:./mqtt/source/mqtt.c **** }
 3271              		.loc 1 754 0
 3272 0066 6FF00300 		mvn	r0, #3
 3273              	.LVL478:
 755:./mqtt/source/mqtt.c **** 
 3274              		.loc 1 755 0
 3275 006a 38BD     		pop	{r3, r4, r5, pc}
 3276              		.cfi_endproc
 3277              	.LFE26:
 3279              		.section	.text.Mqtt_RecvPkt,"ax",%progbits
 3280              		.align	2
 3281              		.global	Mqtt_RecvPkt
 3282              		.thumb
 3283              		.thumb_func
 3285              	Mqtt_RecvPkt:
 3286              	.LFB29:
 779:./mqtt/source/mqtt.c ****     int bytes;
 3287              		.loc 1 779 0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 8
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 3291              	.LVL479:
 3292 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3293              	.LCFI66:
 3294              		.cfi_def_cfa_offset 20
 3295              		.cfi_offset 4, -20
 3296              		.cfi_offset 5, -16
 3297              		.cfi_offset 6, -12
 3298              		.cfi_offset 7, -8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 96


 3299              		.cfi_offset 14, -4
 3300 0002 83B0     		sub	sp, sp, #12
 3301              	.LCFI67:
 3302              		.cfi_def_cfa_offset 32
 3303 0004 0646     		mov	r6, r0
 781:./mqtt/source/mqtt.c ****     char *pkt, *cursor;
 3304              		.loc 1 781 0
 3305 0006 0023     		movs	r3, #0
 3306 0008 0193     		str	r3, [sp, #4]
 784:./mqtt/source/mqtt.c **** 
 3307              		.loc 1 784 0
 3308 000a 0369     		ldr	r3, [r0, #16]
 3309 000c 4268     		ldr	r2, [r0, #4]
 3310 000e 8168     		ldr	r1, [r0, #8]
 3311 0010 521A     		subs	r2, r2, r1
 3312 0012 C068     		ldr	r0, [r0, #12]
 3313              	.LVL480:
 3314 0014 9847     		blx	r3
 3315              	.LVL481:
 786:./mqtt/source/mqtt.c ****         ctx->pos = ctx->bgn; // clear the buffer
 3316              		.loc 1 786 0
 3317 0016 20B9     		cbnz	r0, .L273
 787:./mqtt/source/mqtt.c ****         return MQTTERR_ENDOFFILE;
 3318              		.loc 1 787 0
 3319 0018 3368     		ldr	r3, [r6]
 3320 001a B360     		str	r3, [r6, #8]
 788:./mqtt/source/mqtt.c ****     }
 3321              		.loc 1 788 0
 3322 001c 6FF00100 		mvn	r0, #1
 3323              	.LVL482:
 3324 0020 4AE0     		b	.L274
 3325              	.LVL483:
 3326              	.L273:
 3327 0022 0446     		mov	r4, r0
 791:./mqtt/source/mqtt.c ****         return MQTTERR_IO;
 3328              		.loc 1 791 0
 3329 0024 0028     		cmp	r0, #0
 3330 0026 3DDB     		blt	.L277
 795:./mqtt/source/mqtt.c **** 
 3331              		.loc 1 795 0
 3332 0028 0246     		mov	r2, r0
 3333 002a 2449     		ldr	r1, .L283
 3334 002c 2448     		ldr	r0, .L283+4
 3335              	.LVL484:
 3336 002e FFF7FEFF 		bl	printf
 3337              	.LVL485:
 797:./mqtt/source/mqtt.c ****     if(ctx->pos > ctx->end) {
 3338              		.loc 1 797 0
 3339 0032 B368     		ldr	r3, [r6, #8]
 3340 0034 1C44     		add	r4, r4, r3
 3341              	.LVL486:
 3342 0036 B460     		str	r4, [r6, #8]
 798:./mqtt/source/mqtt.c ****         return MQTTERR_BUF_OVERFLOW;
 3343              		.loc 1 798 0
 3344 0038 7368     		ldr	r3, [r6, #4]
 3345 003a 9C42     		cmp	r4, r3
 3346 003c 35D8     		bhi	.L278
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 97


 802:./mqtt/source/mqtt.c ****     while(1) {
 3347              		.loc 1 802 0
 3348 003e 3468     		ldr	r4, [r6]
 3349              	.LVL487:
 3350              	.L276:
 3351              	.LBB8:
 806:./mqtt/source/mqtt.c ****             break;
 3352              		.loc 1 806 0
 3353 0040 B168     		ldr	r1, [r6, #8]
 3354 0042 2746     		mov	r7, r4
 3355 0044 091B     		subs	r1, r1, r4
 3356 0046 0129     		cmp	r1, #1
 3357 0048 1FDD     		ble	.L275
 810:./mqtt/source/mqtt.c **** 
 3358              		.loc 1 810 0
 3359 004a 01AA     		add	r2, sp, #4
 3360 004c 0139     		subs	r1, r1, #1
 3361 004e 601C     		adds	r0, r4, #1
 3362 0050 FFF7FEFF 		bl	Mqtt_ReadLength
 3363              	.LVL488:
 3364 0054 0546     		mov	r5, r0
 3365              	.LVL489:
 812:./mqtt/source/mqtt.c ****             break;
 3366              		.loc 1 812 0
 3367 0056 B0F1FF3F 		cmp	r0, #-1
 3368 005a 16D0     		beq	.L275
 815:./mqtt/source/mqtt.c ****             return MQTTERR_ILLEGAL_PKT;
 3369              		.loc 1 815 0
 3370 005c 10F1020F 		cmn	r0, #2
 3371 0060 26D0     		beq	.L279
 820:./mqtt/source/mqtt.c ****             break;
 3372              		.loc 1 820 0
 3373 0062 019B     		ldr	r3, [sp, #4]
 3374 0064 1A18     		adds	r2, r3, r0
 3375 0066 0132     		adds	r2, r2, #1
 3376 0068 2244     		add	r2, r2, r4
 3377 006a B168     		ldr	r1, [r6, #8]
 3378 006c 8A42     		cmp	r2, r1
 3379 006e 0CD8     		bhi	.L275
 824:./mqtt/source/mqtt.c **** 
 3380              		.loc 1 824 0
 3381 0070 421C     		adds	r2, r0, #1
 826:./mqtt/source/mqtt.c ****         if(errcode < 0) {
 3382              		.loc 1 826 0
 3383 0072 2244     		add	r2, r2, r4
 3384 0074 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 3385 0076 3046     		mov	r0, r6
 3386              	.LVL490:
 3387 0078 FFF7FEFF 		bl	Mqtt_Dispatch
 3388              	.LVL491:
 827:./mqtt/source/mqtt.c ****             return errcode;
 3389              		.loc 1 827 0
 3390 007c 0028     		cmp	r0, #0
 3391 007e 1BDB     		blt	.L274
 831:./mqtt/source/mqtt.c ****     }
 3392              		.loc 1 831 0
 3393 0080 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 98


 3394 0082 1D44     		add	r5, r5, r3
 3395              	.LVL492:
 3396 0084 0135     		adds	r5, r5, #1
 3397 0086 2C44     		add	r4, r4, r5
 3398              	.LVL493:
 3399              	.LBE8:
 832:./mqtt/source/mqtt.c **** 
 3400              		.loc 1 832 0
 3401 0088 DAE7     		b	.L276
 3402              	.LVL494:
 3403              	.L275:
 834:./mqtt/source/mqtt.c ****         size_t movebytes = cursor - ctx->bgn;
 3404              		.loc 1 834 0
 3405 008a 3068     		ldr	r0, [r6]
 3406 008c 8442     		cmp	r4, r0
 3407 008e 12D9     		bls	.L281
 3408              	.LBB9:
 835:./mqtt/source/mqtt.c ****         memmove(ctx->bgn, cursor, movebytes);
 3409              		.loc 1 835 0
 3410 0090 3F1A     		subs	r7, r7, r0
 3411              	.LVL495:
 836:./mqtt/source/mqtt.c ****         ctx->pos -= movebytes;
 3412              		.loc 1 836 0
 3413 0092 3A46     		mov	r2, r7
 3414 0094 2146     		mov	r1, r4
 3415 0096 FFF7FEFF 		bl	memmove
 3416              	.LVL496:
 837:./mqtt/source/mqtt.c **** 
 3417              		.loc 1 837 0
 3418 009a B368     		ldr	r3, [r6, #8]
 3419 009c DF1B     		subs	r7, r3, r7
 3420              	.LVL497:
 3421 009e B760     		str	r7, [r6, #8]
 3422              	.LBE9:
 842:./mqtt/source/mqtt.c **** }
 3423              		.loc 1 842 0
 3424 00a0 0020     		movs	r0, #0
 3425 00a2 09E0     		b	.L274
 3426              	.LVL498:
 3427              	.L277:
 792:./mqtt/source/mqtt.c ****     }
 3428              		.loc 1 792 0
 3429 00a4 6FF00200 		mvn	r0, #2
 3430              	.LVL499:
 3431 00a8 06E0     		b	.L274
 3432              	.LVL500:
 3433              	.L278:
 799:./mqtt/source/mqtt.c ****     }
 3434              		.loc 1 799 0
 3435 00aa 6FF00800 		mvn	r0, #8
 3436 00ae 03E0     		b	.L274
 3437              	.LVL501:
 3438              	.L279:
 3439              	.LBB10:
 816:./mqtt/source/mqtt.c ****         }
 3440              		.loc 1 816 0
 3441 00b0 6FF00300 		mvn	r0, #3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 99


 3442              	.LVL502:
 3443 00b4 00E0     		b	.L274
 3444              	.LVL503:
 3445              	.L281:
 3446              	.LBE10:
 842:./mqtt/source/mqtt.c **** }
 3447              		.loc 1 842 0
 3448 00b6 0020     		movs	r0, #0
 3449              	.LVL504:
 3450              	.L274:
 843:./mqtt/source/mqtt.c **** 
 3451              		.loc 1 843 0
 3452 00b8 03B0     		add	sp, sp, #12
 3453              	.LCFI68:
 3454              		.cfi_def_cfa_offset 20
 3455              		@ sp needed
 3456 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 3457              	.LVL505:
 3458              	.L284:
 3459              		.align	2
 3460              	.L283:
 3461 00bc 00000000 		.word	.LANCHOR1
 3462 00c0 38000000 		.word	.LC5
 3463              		.cfi_endproc
 3464              	.LFE29:
 3466              		.section	.text.Mqtt_PackConnectPkt,"ax",%progbits
 3467              		.align	2
 3468              		.global	Mqtt_PackConnectPkt
 3469              		.thumb
 3470              		.thumb_func
 3472              	Mqtt_PackConnectPkt:
 3473              	.LFB31:
 906:./mqtt/source/mqtt.c ****     int ret;
 3474              		.loc 1 906 0
 3475              		.cfi_startproc
 3476              		@ args = 32, pretend = 0, frame = 32
 3477              		@ frame_needed = 0, uses_anonymous_args = 0
 3478              	.LVL506:
 3479 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3480              	.LCFI69:
 3481              		.cfi_def_cfa_offset 36
 3482              		.cfi_offset 4, -36
 3483              		.cfi_offset 5, -32
 3484              		.cfi_offset 6, -28
 3485              		.cfi_offset 7, -24
 3486              		.cfi_offset 8, -20
 3487              		.cfi_offset 9, -16
 3488              		.cfi_offset 10, -12
 3489              		.cfi_offset 11, -8
 3490              		.cfi_offset 14, -4
 3491 0004 89B0     		sub	sp, sp, #36
 3492              	.LCFI70:
 3493              		.cfi_def_cfa_offset 72
 3494 0006 0546     		mov	r5, r0
 3495 0008 0190     		str	r0, [sp, #4]
 3496 000a 0491     		str	r1, [sp, #16]
 3497 000c 1646     		mov	r6, r2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 100


 3498 000e 0592     		str	r2, [sp, #20]
 3499 0010 1C46     		mov	r4, r3
 3500 0012 BDF85030 		ldrh	r3, [sp, #80]
 3501              	.LVL507:
 3502 0016 0393     		str	r3, [sp, #12]
 3503 0018 9DF854A0 		ldrb	r10, [sp, #84]	@ zero_extendqisi2
 3504 001c BDF864B0 		ldrh	fp, [sp, #100]
 3505              	.LVL508:
 915:./mqtt/source/mqtt.c ****     if(NULL == fix_head) {
 3506              		.loc 1 915 0
 3507 0020 0521     		movs	r1, #5
 3508              	.LVL509:
 3509 0022 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 3510              	.LVL510:
 916:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 3511              		.loc 1 916 0
 3512 0026 0028     		cmp	r0, #0
 3513 0028 00F0D480 		beq	.L302
 3514 002c 0746     		mov	r7, r0
 920:./mqtt/source/mqtt.c ****     if(NULL == variable_head) {
 3515              		.loc 1 920 0
 3516 002e 0A21     		movs	r1, #10
 3517 0030 2846     		mov	r0, r5
 3518              	.LVL511:
 3519 0032 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 3520              	.LVL512:
 921:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 3521              		.loc 1 921 0
 3522 0036 0546     		mov	r5, r0
 3523              	.LVL513:
 3524 0038 0028     		cmp	r0, #0
 3525 003a 00F0CE80 		beq	.L303
 3526              	.LVL514:
 926:./mqtt/source/mqtt.c ****     if(id_len < 0) {
 3527              		.loc 1 926 0
 3528 003e 3046     		mov	r0, r6
 3529              	.LVL515:
 3530 0040 FFF7FEFF 		bl	Mqtt_CheckClentIdentifier
 3531              	.LVL516:
 3532 0044 1FFA80F9 		uxth	r9, r0
 3533              	.LVL517:
 930:./mqtt/source/mqtt.c **** 
 3534              		.loc 1 930 0
 3535 0048 09F10C06 		add	r6, r9, #12
 3536              	.LVL518:
 932:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_CLEAN_SESSION;
 3537              		.loc 1 932 0
 3538 004c 04B1     		cbz	r4, .L287
 933:./mqtt/source/mqtt.c ****     }
 3539              		.loc 1 933 0
 3540 004e 0224     		movs	r4, #2
 3541              	.LVL519:
 3542              	.L287:
 936:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 3543              		.loc 1 936 0
 3544 0050 139B     		ldr	r3, [sp, #76]
 3545 0052 1BB1     		cbz	r3, .L288
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 101


 936:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 3546              		.loc 1 936 0 is_stmt 0 discriminator 1
 3547 0054 129B     		ldr	r3, [sp, #72]
 3548 0056 002B     		cmp	r3, #0
 3549 0058 00F0C280 		beq	.L305
 3550              	.L288:
 3551              	.LVL520:
 941:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_WILL_FLAG;
 3552              		.loc 1 941 0 is_stmt 1
 3553 005c 129B     		ldr	r3, [sp, #72]
 3554 005e 6BB1     		cbz	r3, .L306
 942:./mqtt/source/mqtt.c ****         wt_len = strlen(will_topic);
 3555              		.loc 1 942 0
 3556 0060 44F00404 		orr	r4, r4, #4
 3557              	.LVL521:
 943:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(will_topic, wt_len) != wt_len) {
 3558              		.loc 1 943 0
 3559 0064 1846     		mov	r0, r3
 3560 0066 FFF7FEFF 		bl	strlen
 3561              	.LVL522:
 3562 006a 1FFA80F8 		uxth	r8, r0
 3563              	.LVL523:
 944:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 3564              		.loc 1 944 0
 3565 006e 4146     		mov	r1, r8
 3566 0070 1298     		ldr	r0, [sp, #72]
 3567 0072 FFF7FEFF 		bl	Mqtt_CheckUtf8
 3568              	.LVL524:
 3569 0076 4045     		cmp	r0, r8
 3570 0078 02D0     		beq	.L289
 3571 007a B4E0     		b	.L307
 3572              	.LVL525:
 3573              	.L306:
 940:./mqtt/source/mqtt.c ****     if(will_topic) {
 3574              		.loc 1 940 0
 3575 007c 4FF00008 		mov	r8, #0
 3576              	.LVL526:
 3577              	.L289:
 949:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0:
 3578              		.loc 1 949 0
 3579 0080 BAF1010F 		cmp	r10, #1
 3580 0084 06D0     		beq	.L290
 3581 0086 BAF1000F 		cmp	r10, #0
 3582 008a 08D0     		beq	.L291
 3583 008c BAF1020F 		cmp	r10, #2
 3584 0090 03D0     		beq	.L292
 3585 0092 ABE0     		b	.L316
 3586              	.L290:
 954:./mqtt/source/mqtt.c ****         break;
 3587              		.loc 1 954 0
 3588 0094 44F00C04 		orr	r4, r4, #12
 3589              	.LVL527:
 955:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL2:
 3590              		.loc 1 955 0
 3591 0098 01E0     		b	.L291
 3592              	.L292:
 957:./mqtt/source/mqtt.c ****         break;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 102


 3593              		.loc 1 957 0
 3594 009a 44F01404 		orr	r4, r4, #20
 3595              	.LVL528:
 3596              	.L291:
 963:./mqtt/source/mqtt.c ****         flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_RETAIN);
 3597              		.loc 1 963 0
 3598 009e 169B     		ldr	r3, [sp, #88]
 3599 00a0 0BB1     		cbz	r3, .L293
 964:./mqtt/source/mqtt.c ****     }
 3600              		.loc 1 964 0
 3601 00a2 44F02404 		orr	r4, r4, #36
 3602              	.LVL529:
 3603              	.L293:
 967:./mqtt/source/mqtt.c ****         total_len += 4 + wt_len + msg_len;
 3604              		.loc 1 967 0
 3605 00a6 14F0040F 		tst	r4, #4
 3606 00aa 04D0     		beq	.L294
 968:./mqtt/source/mqtt.c ****     }
 3607              		.loc 1 968 0
 3608 00ac 08F10403 		add	r3, r8, #4
 3609 00b0 039A     		ldr	r2, [sp, #12]
 3610 00b2 1344     		add	r3, r3, r2
 3611 00b4 1E44     		add	r6, r6, r3
 3612              	.LVL530:
 3613              	.L294:
 971:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 3614              		.loc 1 971 0
 3615 00b6 179B     		ldr	r3, [sp, #92]
 3616 00b8 1BB9     		cbnz	r3, .L295
 971:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 3617              		.loc 1 971 0 is_stmt 0 discriminator 1
 3618 00ba 189B     		ldr	r3, [sp, #96]
 3619 00bc 002B     		cmp	r3, #0
 3620 00be 40F09880 		bne	.L309
 3621              	.L295:
 978:./mqtt/source/mqtt.c ****         NULL == password){
 3622              		.loc 1 978 0 is_stmt 1
 3623 00c2 179B     		ldr	r3, [sp, #92]
 3624 00c4 002B     		cmp	r3, #0
 3625 00c6 00F09780 		beq	.L310
 978:./mqtt/source/mqtt.c ****         NULL == password){
 3626              		.loc 1 978 0 is_stmt 0 discriminator 1
 3627 00ca 189B     		ldr	r3, [sp, #96]
 3628 00cc 002B     		cmp	r3, #0
 3629 00ce 00F09680 		beq	.L311
 3630              	.LVL531:
 985:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_USER_NAME;
 3631              		.loc 1 985 0 is_stmt 1
 3632 00d2 179B     		ldr	r3, [sp, #92]
 3633 00d4 83B1     		cbz	r3, .L312
 986:./mqtt/source/mqtt.c ****         user_len = strlen(user);
 3634              		.loc 1 986 0
 3635 00d6 44F08004 		orr	r4, r4, #128
 3636              	.LVL532:
 987:./mqtt/source/mqtt.c ****         ret = Mqtt_CheckUtf8(user, user_len);
 3637              		.loc 1 987 0
 3638 00da 1846     		mov	r0, r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 103


 3639 00dc FFF7FEFF 		bl	strlen
 3640              	.LVL533:
 3641 00e0 1FFA80FA 		uxth	r10, r0
 3642              	.LVL534:
 988:./mqtt/source/mqtt.c ****         if(user_len != ret) {
 3643              		.loc 1 988 0
 3644 00e4 5146     		mov	r1, r10
 3645 00e6 1798     		ldr	r0, [sp, #92]
 3646 00e8 FFF7FEFF 		bl	Mqtt_CheckUtf8
 3647              	.LVL535:
 989:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 3648              		.loc 1 989 0
 3649 00ec 5045     		cmp	r0, r10
 3650 00ee 40F08980 		bne	.L313
 993:./mqtt/source/mqtt.c ****     }
 3651              		.loc 1 993 0
 3652 00f2 5644     		add	r6, r6, r10
 3653              	.LVL536:
 3654 00f4 0236     		adds	r6, r6, #2
 3655              	.LVL537:
 3656 00f6 01E0     		b	.L296
 3657              	.LVL538:
 3658              	.L312:
 984:./mqtt/source/mqtt.c ****     if(user) {
 3659              		.loc 1 984 0
 3660 00f8 4FF0000A 		mov	r10, #0
 3661              	.LVL539:
 3662              	.L296:
 996:./mqtt/source/mqtt.c ****         flags |= MQTT_CONNECT_PASSORD;
 3663              		.loc 1 996 0
 3664 00fc 189B     		ldr	r3, [sp, #96]
 3665 00fe 1BB1     		cbz	r3, .L297
 997:./mqtt/source/mqtt.c ****         total_len += pswd_len + 2;
 3666              		.loc 1 997 0
 3667 0100 44F04004 		orr	r4, r4, #64
 3668              	.LVL540:
 998:./mqtt/source/mqtt.c ****     }
 3669              		.loc 1 998 0
 3670 0104 5E44     		add	r6, r6, fp
 3671              	.LVL541:
 3672 0106 0236     		adds	r6, r6, #2
 3673              	.LVL542:
 3674              	.L297:
1003:./mqtt/source/mqtt.c ****     fix_head->payload[0] = MQTT_PKT_CONNECT << 4;
 3675              		.loc 1 1003 0
 3676 0108 A6F10A01 		sub	r1, r6, #10
 3677 010c 0198     		ldr	r0, [sp, #4]
 3678 010e FFF7FEFF 		bl	MqttBuffer_AllocExtent
 3679              	.LVL543:
 3680 0112 0290     		str	r0, [sp, #8]
 3681              	.LVL544:
1004:./mqtt/source/mqtt.c **** 
 3682              		.loc 1 1004 0
 3683 0114 7B68     		ldr	r3, [r7, #4]
 3684 0116 1022     		movs	r2, #16
 3685 0118 1A70     		strb	r2, [r3]
1006:./mqtt/source/mqtt.c ****     if(ret < 0) {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 104


 3686              		.loc 1 1006 0
 3687 011a 7968     		ldr	r1, [r7, #4]
 3688 011c 0131     		adds	r1, r1, #1
 3689 011e 3046     		mov	r0, r6
 3690              	.LVL545:
 3691 0120 FFF7FEFF 		bl	Mqtt_DumpLength
 3692              	.LVL546:
1007:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 3693              		.loc 1 1007 0
 3694 0124 0028     		cmp	r0, #0
 3695 0126 70DB     		blt	.L314
1010:./mqtt/source/mqtt.c **** 
 3696              		.loc 1 1010 0
 3697 0128 0130     		adds	r0, r0, #1
 3698              	.LVL547:
 3699 012a 3860     		str	r0, [r7]
1012:./mqtt/source/mqtt.c ****     variable_head->payload[1] = 4;
 3700              		.loc 1 1012 0
 3701 012c 6B68     		ldr	r3, [r5, #4]
 3702 012e 0022     		movs	r2, #0
 3703 0130 1A70     		strb	r2, [r3]
1013:./mqtt/source/mqtt.c ****     variable_head->payload[2] = 'M';
 3704              		.loc 1 1013 0
 3705 0132 6A68     		ldr	r2, [r5, #4]
 3706 0134 0423     		movs	r3, #4
 3707 0136 5370     		strb	r3, [r2, #1]
1014:./mqtt/source/mqtt.c ****     variable_head->payload[3] = 'Q';
 3708              		.loc 1 1014 0
 3709 0138 6A68     		ldr	r2, [r5, #4]
 3710 013a 4D21     		movs	r1, #77
 3711 013c 9170     		strb	r1, [r2, #2]
1015:./mqtt/source/mqtt.c ****     variable_head->payload[4] = 'T';
 3712              		.loc 1 1015 0
 3713 013e 6A68     		ldr	r2, [r5, #4]
 3714 0140 5121     		movs	r1, #81
 3715 0142 D170     		strb	r1, [r2, #3]
1016:./mqtt/source/mqtt.c ****     variable_head->payload[5] = 'T';
 3716              		.loc 1 1016 0
 3717 0144 6968     		ldr	r1, [r5, #4]
 3718 0146 5422     		movs	r2, #84
 3719 0148 0A71     		strb	r2, [r1, #4]
1017:./mqtt/source/mqtt.c ****     variable_head->payload[6] = 4; // protocol level 4
 3720              		.loc 1 1017 0
 3721 014a 6968     		ldr	r1, [r5, #4]
 3722 014c 4A71     		strb	r2, [r1, #5]
1018:./mqtt/source/mqtt.c ****     variable_head->payload[7] = flags;
 3723              		.loc 1 1018 0
 3724 014e 6A68     		ldr	r2, [r5, #4]
 3725 0150 9371     		strb	r3, [r2, #6]
1019:./mqtt/source/mqtt.c ****     Mqtt_WB16(keep_alive, variable_head->payload + 8);
 3726              		.loc 1 1019 0
 3727 0152 6B68     		ldr	r3, [r5, #4]
 3728 0154 DC71     		strb	r4, [r3, #7]
1020:./mqtt/source/mqtt.c **** 
 3729              		.loc 1 1020 0
 3730 0156 6968     		ldr	r1, [r5, #4]
 3731 0158 0831     		adds	r1, r1, #8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 105


 3732 015a 0498     		ldr	r0, [sp, #16]
 3733              	.LVL548:
 3734 015c FFF7FEFF 		bl	Mqtt_WB16
 3735              	.LVL549:
1023:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, id, id_len);
 3736              		.loc 1 1023 0
 3737 0160 029B     		ldr	r3, [sp, #8]
 3738 0162 5B68     		ldr	r3, [r3, #4]
 3739 0164 08A8     		add	r0, sp, #32
 3740 0166 40F8043D 		str	r3, [r0, #-4]!
1024:./mqtt/source/mqtt.c **** 
 3741              		.loc 1 1024 0
 3742 016a 4A46     		mov	r2, r9
 3743 016c 0599     		ldr	r1, [sp, #20]
 3744 016e FFF7FEFF 		bl	Mqtt_PktWriteString
 3745              	.LVL550:
1026:./mqtt/source/mqtt.c ****         if(!will_msg) {
 3746              		.loc 1 1026 0
 3747 0172 14F0040F 		tst	r4, #4
 3748 0176 0ED0     		beq	.L298
1027:./mqtt/source/mqtt.c ****             will_msg = "";
 3749              		.loc 1 1027 0
 3750 0178 139B     		ldr	r3, [sp, #76]
 3751 017a 13B9     		cbnz	r3, .L299
1029:./mqtt/source/mqtt.c ****         }
 3752              		.loc 1 1029 0
 3753 017c 0393     		str	r3, [sp, #12]
1028:./mqtt/source/mqtt.c ****             msg_len = 0;
 3754              		.loc 1 1028 0
 3755 017e 254B     		ldr	r3, .L318
 3756 0180 1393     		str	r3, [sp, #76]
 3757              	.L299:
 3758              	.LVL551:
1032:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, will_msg, msg_len);
 3759              		.loc 1 1032 0
 3760 0182 4246     		mov	r2, r8
 3761 0184 1299     		ldr	r1, [sp, #72]
 3762 0186 07A8     		add	r0, sp, #28
 3763 0188 FFF7FEFF 		bl	Mqtt_PktWriteString
 3764              	.LVL552:
1033:./mqtt/source/mqtt.c ****     }
 3765              		.loc 1 1033 0
 3766 018c 039A     		ldr	r2, [sp, #12]
 3767 018e 1399     		ldr	r1, [sp, #76]
 3768 0190 07A8     		add	r0, sp, #28
 3769 0192 FFF7FEFF 		bl	Mqtt_PktWriteString
 3770              	.LVL553:
 3771              	.L298:
1036:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, user, user_len);
 3772              		.loc 1 1036 0
 3773 0196 14F0800F 		tst	r4, #128
 3774 019a 04D0     		beq	.L300
1037:./mqtt/source/mqtt.c ****     }
 3775              		.loc 1 1037 0
 3776 019c 5246     		mov	r2, r10
 3777 019e 1799     		ldr	r1, [sp, #92]
 3778 01a0 07A8     		add	r0, sp, #28
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 106


 3779 01a2 FFF7FEFF 		bl	Mqtt_PktWriteString
 3780              	.LVL554:
 3781              	.L300:
1040:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, password, pswd_len);
 3782              		.loc 1 1040 0
 3783 01a6 14F0400F 		tst	r4, #64
 3784 01aa 04D0     		beq	.L301
1041:./mqtt/source/mqtt.c ****     }
 3785              		.loc 1 1041 0
 3786 01ac 5A46     		mov	r2, fp
 3787 01ae 1899     		ldr	r1, [sp, #96]
 3788 01b0 07A8     		add	r0, sp, #28
 3789 01b2 FFF7FEFF 		bl	Mqtt_PktWriteString
 3790              	.LVL555:
 3791              	.L301:
1044:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, variable_head);
 3792              		.loc 1 1044 0
 3793 01b6 3946     		mov	r1, r7
 3794 01b8 019C     		ldr	r4, [sp, #4]
 3795              	.LVL556:
 3796 01ba 2046     		mov	r0, r4
 3797 01bc FFF7FEFF 		bl	MqttBuffer_AppendExtent
 3798              	.LVL557:
1045:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, payload);
 3799              		.loc 1 1045 0
 3800 01c0 2946     		mov	r1, r5
 3801 01c2 2046     		mov	r0, r4
 3802 01c4 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 3803              	.LVL558:
1046:./mqtt/source/mqtt.c **** 
 3804              		.loc 1 1046 0
 3805 01c8 0299     		ldr	r1, [sp, #8]
 3806 01ca 2046     		mov	r0, r4
 3807 01cc FFF7FEFF 		bl	MqttBuffer_AppendExtent
 3808              	.LVL559:
1048:./mqtt/source/mqtt.c **** }
 3809              		.loc 1 1048 0
 3810 01d0 0020     		movs	r0, #0
 3811 01d2 1CE0     		b	.L286
 3812              	.LVL560:
 3813              	.L302:
 917:./mqtt/source/mqtt.c ****     }
 3814              		.loc 1 917 0
 3815 01d4 4FF0FF30 		mov	r0, #-1
 3816              	.LVL561:
 3817 01d8 19E0     		b	.L286
 3818              	.LVL562:
 3819              	.L303:
 922:./mqtt/source/mqtt.c ****     }
 3820              		.loc 1 922 0
 3821 01da 4FF0FF30 		mov	r0, #-1
 3822              	.LVL563:
 3823 01de 16E0     		b	.L286
 3824              	.LVL564:
 3825              	.L305:
 937:./mqtt/source/mqtt.c ****         }
 3826              		.loc 1 937 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 107


 3827 01e0 6FF00600 		mvn	r0, #6
 3828 01e4 13E0     		b	.L286
 3829              	.LVL565:
 3830              	.L307:
 945:./mqtt/source/mqtt.c ****         }
 3831              		.loc 1 945 0
 3832 01e6 6FF00500 		mvn	r0, #5
 3833 01ea 10E0     		b	.L286
 3834              	.L316:
 960:./mqtt/source/mqtt.c ****     }
 3835              		.loc 1 960 0
 3836 01ec 6FF00600 		mvn	r0, #6
 3837 01f0 0DE0     		b	.L286
 3838              	.L309:
 972:./mqtt/source/mqtt.c ****     }
 3839              		.loc 1 972 0
 3840 01f2 6FF00600 		mvn	r0, #6
 3841 01f6 0AE0     		b	.L286
 3842              	.L310:
 980:./mqtt/source/mqtt.c ****     }
 3843              		.loc 1 980 0
 3844 01f8 6FF00600 		mvn	r0, #6
 3845 01fc 07E0     		b	.L286
 3846              	.L311:
 3847 01fe 6FF00600 		mvn	r0, #6
 3848 0202 04E0     		b	.L286
 3849              	.LVL566:
 3850              	.L313:
 990:./mqtt/source/mqtt.c ****         }
 3851              		.loc 1 990 0
 3852 0204 6FF00500 		mvn	r0, #5
 3853              	.LVL567:
 3854 0208 01E0     		b	.L286
 3855              	.LVL568:
 3856              	.L314:
1008:./mqtt/source/mqtt.c ****     }
 3857              		.loc 1 1008 0
 3858 020a 6FF00700 		mvn	r0, #7
 3859              	.LVL569:
 3860              	.L286:
1049:./mqtt/source/mqtt.c **** 
 3861              		.loc 1 1049 0
 3862 020e 09B0     		add	sp, sp, #36
 3863              	.LCFI71:
 3864              		.cfi_def_cfa_offset 36
 3865              		@ sp needed
 3866 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3867              	.LVL570:
 3868              	.L319:
 3869              		.align	2
 3870              	.L318:
 3871 0214 34000000 		.word	.LC4
 3872              		.cfi_endproc
 3873              	.LFE31:
 3875              		.section	.text.Mqtt_PackPublishPkt,"ax",%progbits
 3876              		.align	2
 3877              		.global	Mqtt_PackPublishPkt
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 108


 3878              		.thumb
 3879              		.thumb_func
 3881              	Mqtt_PackPublishPkt:
 3882              	.LFB32:
1056:./mqtt/source/mqtt.c ****     int ret;
 3883              		.loc 1 1056 0
 3884              		.cfi_startproc
 3885              		@ args = 16, pretend = 0, frame = 8
 3886              		@ frame_needed = 0, uses_anonymous_args = 0
 3887              	.LVL571:
 3888 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3889              	.LCFI72:
 3890              		.cfi_def_cfa_offset 36
 3891              		.cfi_offset 4, -36
 3892              		.cfi_offset 5, -32
 3893              		.cfi_offset 6, -28
 3894              		.cfi_offset 7, -24
 3895              		.cfi_offset 8, -20
 3896              		.cfi_offset 9, -16
 3897              		.cfi_offset 10, -12
 3898              		.cfi_offset 11, -8
 3899              		.cfi_offset 14, -4
 3900 0004 83B0     		sub	sp, sp, #12
 3901              	.LCFI73:
 3902              		.cfi_def_cfa_offset 48
 3903 0006 9DF83470 		ldrb	r7, [sp, #52]	@ zero_extendqisi2
1062:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 3904              		.loc 1 1062 0
 3905 000a 0029     		cmp	r1, #0
 3906 000c 71D0     		beq	.L329
 3907 000e 8846     		mov	r8, r1
 3908 0010 0025     		movs	r5, #0
 3909 0012 04E0     		b	.L322
 3910              	.LVL572:
 3911              	.L323:
1067:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
 3912              		.loc 1 1067 0
 3913 0014 232C     		cmp	r4, #35
 3914 0016 6FD0     		beq	.L330
1067:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
 3915              		.loc 1 1067 0 is_stmt 0 discriminator 1
 3916 0018 2B2C     		cmp	r4, #43
 3917 001a 70D0     		beq	.L331
1066:./mqtt/source/mqtt.c ****         if(('#' == topic[topic_len]) || ('+' == topic[topic_len])) {
 3918              		.loc 1 1066 0 is_stmt 1 discriminator 2
 3919 001c 0135     		adds	r5, r5, #1
 3920              	.LVL573:
 3921              	.L322:
1066:./mqtt/source/mqtt.c ****         if(('#' == topic[topic_len]) || ('+' == topic[topic_len])) {
 3922              		.loc 1 1066 0 is_stmt 0 discriminator 1
 3923 001e 545D     		ldrb	r4, [r2, r5]	@ zero_extendqisi2
 3924 0020 002C     		cmp	r4, #0
 3925 0022 F7D1     		bne	.L323
 3926 0024 9946     		mov	r9, r3
 3927 0026 1446     		mov	r4, r2
 3928 0028 0646     		mov	r6, r0
1072:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 109


 3929              		.loc 1 1072 0 is_stmt 1
 3930 002a 2946     		mov	r1, r5
 3931              	.LVL574:
 3932 002c 1046     		mov	r0, r2
 3933              	.LVL575:
 3934 002e FFF7FEFF 		bl	Mqtt_CheckUtf8
 3935              	.LVL576:
 3936 0032 8542     		cmp	r5, r0
 3937 0034 66D1     		bne	.L332
1076:./mqtt/source/mqtt.c ****     if(NULL == fix_head) {
 3938              		.loc 1 1076 0
 3939 0036 0521     		movs	r1, #5
 3940 0038 3046     		mov	r0, r6
 3941 003a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 3942              	.LVL577:
1077:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 3943              		.loc 1 1077 0
 3944 003e 8246     		mov	r10, r0
 3945 0040 0028     		cmp	r0, #0
 3946 0042 62D0     		beq	.L333
1081:./mqtt/source/mqtt.c **** 
 3947              		.loc 1 1081 0
 3948 0044 4368     		ldr	r3, [r0, #4]
 3949 0046 3022     		movs	r2, #48
 3950 0048 1A70     		strb	r2, [r3]
1083:./mqtt/source/mqtt.c ****         fix_head->payload[0] |= 0x01;
 3951              		.loc 1 1083 0
 3952 004a 0E9B     		ldr	r3, [sp, #56]
 3953 004c 23B1     		cbz	r3, .L324
1084:./mqtt/source/mqtt.c ****     }
 3954              		.loc 1 1084 0
 3955 004e 4268     		ldr	r2, [r0, #4]
 3956 0050 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 3957 0052 43F00103 		orr	r3, r3, #1
 3958 0056 1370     		strb	r3, [r2]
 3959              	.L324:
1087:./mqtt/source/mqtt.c ****     switch(qos) {
 3960              		.loc 1 1087 0
 3961 0058 0C9B     		ldr	r3, [sp, #48]
 3962 005a EB18     		adds	r3, r5, r3
 3963 005c 03F1020B 		add	fp, r3, #2
 3964              	.LVL578:
1088:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL0:
 3965              		.loc 1 1088 0
 3966 0060 012F     		cmp	r7, #1
 3967 0062 03D0     		beq	.L325
 3968 0064 9FB1     		cbz	r7, .L326
 3969 0066 022F     		cmp	r7, #2
 3970 0068 09D0     		beq	.L327
 3971 006a 51E0     		b	.L338
 3972              	.L325:
1092:./mqtt/source/mqtt.c ****         total_len += 2;
 3973              		.loc 1 1092 0
 3974 006c DAF80410 		ldr	r1, [r10, #4]
 3975 0070 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 3976 0072 42F00202 		orr	r2, r2, #2
 3977 0076 0A70     		strb	r2, [r1]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 110


1093:./mqtt/source/mqtt.c ****         break;
 3978              		.loc 1 1093 0
 3979 0078 03F1040B 		add	fp, r3, #4
 3980              	.LVL579:
1094:./mqtt/source/mqtt.c ****     case MQTT_QOS_LEVEL2:
 3981              		.loc 1 1094 0
 3982 007c 07E0     		b	.L326
 3983              	.L327:
1096:./mqtt/source/mqtt.c ****         total_len += 2;
 3984              		.loc 1 1096 0
 3985 007e DAF80410 		ldr	r1, [r10, #4]
 3986 0082 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 3987 0084 42F00402 		orr	r2, r2, #4
 3988 0088 0A70     		strb	r2, [r1]
1097:./mqtt/source/mqtt.c ****         break;
 3989              		.loc 1 1097 0
 3990 008a 03F1040B 		add	fp, r3, #4
 3991              	.LVL580:
 3992              	.L326:
1103:./mqtt/source/mqtt.c ****     if(ret < 0) {
 3993              		.loc 1 1103 0
 3994 008e DAF80410 		ldr	r1, [r10, #4]
 3995 0092 0131     		adds	r1, r1, #1
 3996 0094 5846     		mov	r0, fp
 3997              	.LVL581:
 3998 0096 FFF7FEFF 		bl	Mqtt_DumpLength
 3999              	.LVL582:
1104:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 4000              		.loc 1 1104 0
 4001 009a 0028     		cmp	r0, #0
 4002 009c 3BDB     		blt	.L335
1107:./mqtt/source/mqtt.c **** 
 4003              		.loc 1 1107 0
 4004 009e 0130     		adds	r0, r0, #1
 4005              	.LVL583:
 4006 00a0 CAF80000 		str	r0, [r10]
1109:./mqtt/source/mqtt.c ****     if(NULL == variable_head) {
 4007              		.loc 1 1109 0
 4008 00a4 0C9B     		ldr	r3, [sp, #48]
 4009 00a6 C3EB0B01 		rsb	r1, r3, fp
 4010 00aa 3046     		mov	r0, r6
 4011              	.LVL584:
 4012 00ac FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4013              	.LVL585:
1110:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4014              		.loc 1 1110 0
 4015 00b0 8346     		mov	fp, r0
 4016              	.LVL586:
 4017 00b2 98B3     		cbz	r0, .L336
1113:./mqtt/source/mqtt.c **** 
 4018              		.loc 1 1113 0
 4019 00b4 4368     		ldr	r3, [r0, #4]
 4020 00b6 02A8     		add	r0, sp, #8
 4021              	.LVL587:
 4022 00b8 40F8043D 		str	r3, [r0, #-4]!
1115:./mqtt/source/mqtt.c ****     if(MQTT_QOS_LEVEL0 != qos) {
 4023              		.loc 1 1115 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 111


 4024 00bc AAB2     		uxth	r2, r5
 4025 00be 2146     		mov	r1, r4
 4026 00c0 FFF7FEFF 		bl	Mqtt_PktWriteString
 4027              	.LVL588:
1116:./mqtt/source/mqtt.c ****         Mqtt_WB16(pkt_id, cursor);
 4028              		.loc 1 1116 0
 4029 00c4 1FB1     		cbz	r7, .L328
1117:./mqtt/source/mqtt.c ****     }
 4030              		.loc 1 1117 0
 4031 00c6 0199     		ldr	r1, [sp, #4]
 4032 00c8 4046     		mov	r0, r8
 4033 00ca FFF7FEFF 		bl	Mqtt_WB16
 4034              	.LVL589:
 4035              	.L328:
1120:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, variable_head);
 4036              		.loc 1 1120 0
 4037 00ce 5146     		mov	r1, r10
 4038 00d0 3046     		mov	r0, r6
 4039 00d2 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4040              	.LVL590:
1121:./mqtt/source/mqtt.c ****     if(0 != size) {
 4041              		.loc 1 1121 0
 4042 00d6 5946     		mov	r1, fp
 4043 00d8 3046     		mov	r0, r6
 4044 00da FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4045              	.LVL591:
1122:./mqtt/source/mqtt.c ****         MqttBuffer_Append(buf, (char*)payload, size, own);
 4046              		.loc 1 1122 0
 4047 00de 0C9B     		ldr	r3, [sp, #48]
 4048 00e0 FBB1     		cbz	r3, .L337
1123:./mqtt/source/mqtt.c ****     }
 4049              		.loc 1 1123 0
 4050 00e2 0F9B     		ldr	r3, [sp, #60]
 4051 00e4 0C9A     		ldr	r2, [sp, #48]
 4052 00e6 4946     		mov	r1, r9
 4053 00e8 3046     		mov	r0, r6
 4054 00ea FFF7FEFF 		bl	MqttBuffer_Append
 4055              	.LVL592:
1127:./mqtt/source/mqtt.c **** }
 4056              		.loc 1 1127 0
 4057 00ee 0020     		movs	r0, #0
 4058 00f0 18E0     		b	.L321
 4059              	.LVL593:
 4060              	.L329:
1063:./mqtt/source/mqtt.c ****     }
 4061              		.loc 1 1063 0
 4062 00f2 6FF00600 		mvn	r0, #6
 4063              	.LVL594:
 4064 00f6 15E0     		b	.L321
 4065              	.LVL595:
 4066              	.L330:
1068:./mqtt/source/mqtt.c ****         }
 4067              		.loc 1 1068 0
 4068 00f8 6FF00600 		mvn	r0, #6
 4069              	.LVL596:
 4070 00fc 12E0     		b	.L321
 4071              	.LVL597:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 112


 4072              	.L331:
 4073 00fe 6FF00600 		mvn	r0, #6
 4074              	.LVL598:
 4075 0102 0FE0     		b	.L321
 4076              	.LVL599:
 4077              	.L332:
1073:./mqtt/source/mqtt.c ****     }
 4078              		.loc 1 1073 0
 4079 0104 6FF00500 		mvn	r0, #5
 4080 0108 0CE0     		b	.L321
 4081              	.LVL600:
 4082              	.L333:
1078:./mqtt/source/mqtt.c ****     }
 4083              		.loc 1 1078 0
 4084 010a 4FF0FF30 		mov	r0, #-1
 4085              	.LVL601:
 4086 010e 09E0     		b	.L321
 4087              	.LVL602:
 4088              	.L338:
1100:./mqtt/source/mqtt.c ****     }
 4089              		.loc 1 1100 0
 4090 0110 6FF00600 		mvn	r0, #6
 4091              	.LVL603:
 4092 0114 06E0     		b	.L321
 4093              	.LVL604:
 4094              	.L335:
1105:./mqtt/source/mqtt.c ****     }
 4095              		.loc 1 1105 0
 4096 0116 6FF00700 		mvn	r0, #7
 4097              	.LVL605:
 4098 011a 03E0     		b	.L321
 4099              	.LVL606:
 4100              	.L336:
1111:./mqtt/source/mqtt.c ****     }
 4101              		.loc 1 1111 0
 4102 011c 4FF0FF30 		mov	r0, #-1
 4103              	.LVL607:
 4104 0120 00E0     		b	.L321
 4105              	.L337:
1127:./mqtt/source/mqtt.c **** }
 4106              		.loc 1 1127 0
 4107 0122 0020     		movs	r0, #0
 4108              	.LVL608:
 4109              	.L321:
1128:./mqtt/source/mqtt.c **** 
 4110              		.loc 1 1128 0
 4111 0124 03B0     		add	sp, sp, #12
 4112              	.LCFI74:
 4113              		.cfi_def_cfa_offset 36
 4114              		@ sp needed
 4115 0126 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4116              		.cfi_endproc
 4117              	.LFE32:
 4119 012a 00BF     		.section	.text.Mqtt_SetPktDup,"ax",%progbits
 4120              		.align	2
 4121              		.global	Mqtt_SetPktDup
 4122              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 113


 4123              		.thumb_func
 4125              	Mqtt_SetPktDup:
 4126              	.LFB33:
1131:./mqtt/source/mqtt.c ****     struct MqttExtent *fix_head = buf->first_ext;
 4127              		.loc 1 1131 0
 4128              		.cfi_startproc
 4129              		@ args = 0, pretend = 0, frame = 0
 4130              		@ frame_needed = 0, uses_anonymous_args = 0
 4131              		@ link register save eliminated.
 4132              	.LVL609:
1132:./mqtt/source/mqtt.c ****     uint8_t pkt_type = ((uint8_t)buf->first_ext->payload[0]) >> 4;
 4133              		.loc 1 1132 0
 4134 0000 0268     		ldr	r2, [r0]
 4135              	.LVL610:
1133:./mqtt/source/mqtt.c ****     if(!fix_head || (MQTT_PKT_PUBLISH != pkt_type)) {
 4136              		.loc 1 1133 0
 4137 0002 5168     		ldr	r1, [r2, #4]
 4138 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 4139 0006 1809     		lsrs	r0, r3, #4
 4140              	.LVL611:
1134:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4141              		.loc 1 1134 0
 4142 0008 32B1     		cbz	r2, .L342
1134:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4143              		.loc 1 1134 0 is_stmt 0 discriminator 1
 4144 000a 0328     		cmp	r0, #3
 4145 000c 07D1     		bne	.L343
1138:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 4146              		.loc 1 1138 0 is_stmt 1
 4147 000e 43F00803 		orr	r3, r3, #8
 4148 0012 0B70     		strb	r3, [r1]
1139:./mqtt/source/mqtt.c **** }
 4149              		.loc 1 1139 0
 4150 0014 0020     		movs	r0, #0
 4151              	.LVL612:
 4152 0016 7047     		bx	lr
 4153              	.LVL613:
 4154              	.L342:
1135:./mqtt/source/mqtt.c ****     }
 4155              		.loc 1 1135 0
 4156 0018 6FF00600 		mvn	r0, #6
 4157              	.LVL614:
 4158 001c 7047     		bx	lr
 4159              	.LVL615:
 4160              	.L343:
 4161 001e 6FF00600 		mvn	r0, #6
 4162              	.LVL616:
1140:./mqtt/source/mqtt.c **** 
 4163              		.loc 1 1140 0
 4164 0022 7047     		bx	lr
 4165              		.cfi_endproc
 4166              	.LFE33:
 4168              		.section	.text.Mqtt_PackSubscribePkt,"ax",%progbits
 4169              		.align	2
 4170              		.global	Mqtt_PackSubscribePkt
 4171              		.thumb
 4172              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 114


 4174              	Mqtt_PackSubscribePkt:
 4175              	.LFB38:
1224:./mqtt/source/mqtt.c ****     int i=0;
 4176              		.loc 1 1224 0
 4177              		.cfi_startproc
 4178              		@ args = 4, pretend = 0, frame = 16
 4179              		@ frame_needed = 0, uses_anonymous_args = 0
 4180              	.LVL617:
 4181 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4182              	.LCFI75:
 4183              		.cfi_def_cfa_offset 36
 4184              		.cfi_offset 4, -36
 4185              		.cfi_offset 5, -32
 4186              		.cfi_offset 6, -28
 4187              		.cfi_offset 7, -24
 4188              		.cfi_offset 8, -20
 4189              		.cfi_offset 9, -16
 4190              		.cfi_offset 10, -12
 4191              		.cfi_offset 11, -8
 4192              		.cfi_offset 14, -4
 4193 0004 85B0     		sub	sp, sp, #20
 4194              	.LCFI76:
 4195              		.cfi_def_cfa_offset 56
 4196 0006 DDF83890 		ldr	r9, [sp, #56]
 4197              	.LVL618:
1233:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4198              		.loc 1 1233 0
 4199 000a 0029     		cmp	r1, #0
 4200 000c 5FD0     		beq	.L350
 4201 000e 0191     		str	r1, [sp, #4]
 4202 0010 9846     		mov	r8, r3
 4203 0012 9246     		mov	r10, r2
 4204 0014 8346     		mov	fp, r0
 4205 0016 0027     		movs	r7, #0
 4206 0018 3C46     		mov	r4, r7
 4207 001a 0FE0     		b	.L346
 4208              	.LVL619:
 4209              	.L347:
1239:./mqtt/source/mqtt.c ****         if(!topic)
 4210              		.loc 1 1239 0
 4211 001c 58F82450 		ldr	r5, [r8, r4, lsl #2]
 4212              	.LVL620:
1240:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
 4213              		.loc 1 1240 0
 4214 0020 002D     		cmp	r5, #0
 4215 0022 57D0     		beq	.L351
1242:./mqtt/source/mqtt.c ****         topic_total_len += topic_len;
 4216              		.loc 1 1242 0
 4217 0024 2846     		mov	r0, r5
 4218 0026 FFF7FEFF 		bl	strlen
 4219              	.LVL621:
 4220 002a 0646     		mov	r6, r0
 4221              	.LVL622:
1243:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
 4222              		.loc 1 1243 0
 4223 002c 0744     		add	r7, r7, r0
 4224              	.LVL623:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 115


1244:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 4225              		.loc 1 1244 0
 4226 002e 0146     		mov	r1, r0
 4227 0030 2846     		mov	r0, r5
 4228              	.LVL624:
 4229 0032 FFF7FEFF 		bl	Mqtt_CheckUtf8
 4230              	.LVL625:
 4231 0036 8642     		cmp	r6, r0
 4232 0038 4FD1     		bne	.L352
1238:./mqtt/source/mqtt.c ****         topic = topics[i];
 4233              		.loc 1 1238 0 discriminator 2
 4234 003a 0134     		adds	r4, r4, #1
 4235              	.LVL626:
 4236              	.L346:
1238:./mqtt/source/mqtt.c ****         topic = topics[i];
 4237              		.loc 1 1238 0 is_stmt 0 discriminator 1
 4238 003c 4C45     		cmp	r4, r9
 4239 003e EDDB     		blt	.L347
1249:./mqtt/source/mqtt.c ****     if(NULL == fixed_head) {
 4240              		.loc 1 1249 0 is_stmt 1
 4241 0040 0521     		movs	r1, #5
 4242 0042 5846     		mov	r0, fp
 4243 0044 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4244              	.LVL627:
1250:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4245              		.loc 1 1250 0
 4246 0048 0446     		mov	r4, r0
 4247              	.LVL628:
 4248 004a 0028     		cmp	r0, #0
 4249 004c 48D0     		beq	.L353
1253:./mqtt/source/mqtt.c **** 
 4250              		.loc 1 1253 0
 4251 004e 4368     		ldr	r3, [r0, #4]
 4252 0050 8022     		movs	r2, #128
 4253 0052 1A70     		strb	r2, [r3]
1255:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, remaining_len);
 4254              		.loc 1 1255 0
 4255 0054 09F10103 		add	r3, r9, #1
 4256 0058 07EB4307 		add	r7, r7, r3, lsl #1
 4257              	.LVL629:
 4258 005c 4F44     		add	r7, r7, r9
 4259              	.LVL630:
1256:./mqtt/source/mqtt.c ****     if(NULL == ext) {
 4260              		.loc 1 1256 0
 4261 005e 3946     		mov	r1, r7
 4262 0060 5846     		mov	r0, fp
 4263              	.LVL631:
 4264 0062 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4265              	.LVL632:
1257:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4266              		.loc 1 1257 0
 4267 0066 0546     		mov	r5, r0
 4268 0068 0028     		cmp	r0, #0
 4269 006a 3CD0     		beq	.L354
1261:./mqtt/source/mqtt.c ****     if(ret < 0) {
 4270              		.loc 1 1261 0
 4271 006c 6168     		ldr	r1, [r4, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 116


 4272 006e 0131     		adds	r1, r1, #1
 4273 0070 3846     		mov	r0, r7
 4274              	.LVL633:
 4275 0072 FFF7FEFF 		bl	Mqtt_DumpLength
 4276              	.LVL634:
1262:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 4277              		.loc 1 1262 0
 4278 0076 0028     		cmp	r0, #0
 4279 0078 38DB     		blt	.L355
1265:./mqtt/source/mqtt.c **** 
 4280              		.loc 1 1265 0
 4281 007a 0130     		adds	r0, r0, #1
 4282              	.LVL635:
 4283 007c 2060     		str	r0, [r4]
1267:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, cursor);
 4284              		.loc 1 1267 0
 4285 007e 6968     		ldr	r1, [r5, #4]
 4286 0080 0391     		str	r1, [sp, #12]
1268:./mqtt/source/mqtt.c ****     cursor += 2;
 4287              		.loc 1 1268 0
 4288 0082 0198     		ldr	r0, [sp, #4]
 4289              	.LVL636:
 4290 0084 FFF7FEFF 		bl	Mqtt_WB16
 4291              	.LVL637:
1269:./mqtt/source/mqtt.c **** 
 4292              		.loc 1 1269 0
 4293 0088 039B     		ldr	r3, [sp, #12]
 4294 008a 0233     		adds	r3, r3, #2
 4295 008c 0393     		str	r3, [sp, #12]
 4296              	.LVL638:
1272:./mqtt/source/mqtt.c ****         topic = topics[i];
 4297              		.loc 1 1272 0
 4298 008e 0026     		movs	r6, #0
 4299 0090 11E0     		b	.L348
 4300              	.LVL639:
 4301              	.L349:
1273:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
 4302              		.loc 1 1273 0 discriminator 3
 4303 0092 58F82670 		ldr	r7, [r8, r6, lsl #2]
 4304              	.LVL640:
1274:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, topic, topic_len);
 4305              		.loc 1 1274 0 discriminator 3
 4306 0096 3846     		mov	r0, r7
 4307 0098 FFF7FEFF 		bl	strlen
 4308              	.LVL641:
1275:./mqtt/source/mqtt.c ****         
 4309              		.loc 1 1275 0 discriminator 3
 4310 009c 82B2     		uxth	r2, r0
 4311 009e 3946     		mov	r1, r7
 4312 00a0 03A8     		add	r0, sp, #12
 4313              	.LVL642:
 4314 00a2 FFF7FEFF 		bl	Mqtt_PktWriteString
 4315              	.LVL643:
1278:./mqtt/source/mqtt.c ****         cursor++;
 4316              		.loc 1 1278 0 discriminator 3
 4317 00a6 0399     		ldr	r1, [sp, #12]
 4318 00a8 5046     		mov	r0, r10
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 117


 4319 00aa FFF7FEFF 		bl	Mqtt_WB8
 4320              	.LVL644:
1279:./mqtt/source/mqtt.c ****     }
 4321              		.loc 1 1279 0 discriminator 3
 4322 00ae 039B     		ldr	r3, [sp, #12]
 4323 00b0 0133     		adds	r3, r3, #1
 4324 00b2 0393     		str	r3, [sp, #12]
1272:./mqtt/source/mqtt.c ****         topic = topics[i];
 4325              		.loc 1 1272 0 discriminator 3
 4326 00b4 0136     		adds	r6, r6, #1
 4327              	.LVL645:
 4328              	.L348:
1272:./mqtt/source/mqtt.c ****         topic = topics[i];
 4329              		.loc 1 1272 0 is_stmt 0 discriminator 1
 4330 00b6 4E45     		cmp	r6, r9
 4331 00b8 EBDB     		blt	.L349
1283:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 4332              		.loc 1 1283 0 is_stmt 1
 4333 00ba 2146     		mov	r1, r4
 4334 00bc 5846     		mov	r0, fp
 4335 00be FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4336              	.LVL646:
1284:./mqtt/source/mqtt.c **** 
 4337              		.loc 1 1284 0
 4338 00c2 2946     		mov	r1, r5
 4339 00c4 5846     		mov	r0, fp
 4340 00c6 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4341              	.LVL647:
1287:./mqtt/source/mqtt.c **** }
 4342              		.loc 1 1287 0
 4343 00ca 0020     		movs	r0, #0
 4344 00cc 10E0     		b	.L345
 4345              	.LVL648:
 4346              	.L350:
1234:./mqtt/source/mqtt.c ****     }
 4347              		.loc 1 1234 0
 4348 00ce 6FF00600 		mvn	r0, #6
 4349              	.LVL649:
 4350 00d2 0DE0     		b	.L345
 4351              	.LVL650:
 4352              	.L351:
1241:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
 4353              		.loc 1 1241 0
 4354 00d4 6FF00600 		mvn	r0, #6
 4355 00d8 0AE0     		b	.L345
 4356              	.LVL651:
 4357              	.L352:
1245:./mqtt/source/mqtt.c ****         }
 4358              		.loc 1 1245 0
 4359 00da 6FF00500 		mvn	r0, #5
 4360 00de 07E0     		b	.L345
 4361              	.LVL652:
 4362              	.L353:
1251:./mqtt/source/mqtt.c ****     }
 4363              		.loc 1 1251 0
 4364 00e0 4FF0FF30 		mov	r0, #-1
 4365              	.LVL653:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 118


 4366 00e4 04E0     		b	.L345
 4367              	.LVL654:
 4368              	.L354:
1258:./mqtt/source/mqtt.c ****     }
 4369              		.loc 1 1258 0
 4370 00e6 4FF0FF30 		mov	r0, #-1
 4371              	.LVL655:
 4372 00ea 01E0     		b	.L345
 4373              	.LVL656:
 4374              	.L355:
1263:./mqtt/source/mqtt.c ****     }
 4375              		.loc 1 1263 0
 4376 00ec 6FF00700 		mvn	r0, #7
 4377              	.LVL657:
 4378              	.L345:
1288:./mqtt/source/mqtt.c **** 
 4379              		.loc 1 1288 0
 4380 00f0 05B0     		add	sp, sp, #20
 4381              	.LCFI77:
 4382              		.cfi_def_cfa_offset 36
 4383              		@ sp needed
 4384 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4385              		.cfi_endproc
 4386              	.LFE38:
 4388 00f6 00BF     		.section	.text.Mqtt_AppendSubscribeTopic,"ax",%progbits
 4389              		.align	2
 4390              		.global	Mqtt_AppendSubscribeTopic
 4391              		.thumb
 4392              		.thumb_func
 4394              	Mqtt_AppendSubscribeTopic:
 4395              	.LFB39:
1291:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head = buf->first_ext;
 4396              		.loc 1 1291 0
 4397              		.cfi_startproc
 4398              		@ args = 0, pretend = 0, frame = 8
 4399              		@ frame_needed = 0, uses_anonymous_args = 0
 4400              	.LVL658:
 4401 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4402              	.LCFI78:
 4403              		.cfi_def_cfa_offset 28
 4404              		.cfi_offset 4, -28
 4405              		.cfi_offset 5, -24
 4406              		.cfi_offset 6, -20
 4407              		.cfi_offset 7, -16
 4408              		.cfi_offset 8, -12
 4409              		.cfi_offset 9, -8
 4410              		.cfi_offset 14, -4
 4411 0004 83B0     		sub	sp, sp, #12
 4412              	.LCFI79:
 4413              		.cfi_def_cfa_offset 40
1292:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 4414              		.loc 1 1292 0
 4415 0006 0468     		ldr	r4, [r0]
 4416              	.LVL659:
1299:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4417              		.loc 1 1299 0
 4418 0008 002C     		cmp	r4, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 119


 4419 000a 38D0     		beq	.L359
1299:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4420              		.loc 1 1299 0 is_stmt 0 discriminator 1
 4421 000c 6368     		ldr	r3, [r4, #4]
 4422 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4423 0010 822B     		cmp	r3, #130
 4424 0012 37D1     		bne	.L360
1299:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4425              		.loc 1 1299 0 discriminator 2
 4426 0014 0029     		cmp	r1, #0
 4427 0016 38D0     		beq	.L361
 4428 0018 9046     		mov	r8, r2
 4429 001a 0F46     		mov	r7, r1
 4430 001c 0546     		mov	r5, r0
1303:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, topic_len + 3);
 4431              		.loc 1 1303 0 is_stmt 1
 4432 001e 0846     		mov	r0, r1
 4433              	.LVL660:
 4434 0020 FFF7FEFF 		bl	strlen
 4435              	.LVL661:
 4436 0024 8146     		mov	r9, r0
 4437              	.LVL662:
1304:./mqtt/source/mqtt.c ****     if(!ext) {
 4438              		.loc 1 1304 0
 4439 0026 C11C     		adds	r1, r0, #3
 4440 0028 2846     		mov	r0, r5
 4441              	.LVL663:
 4442 002a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4443              	.LVL664:
1305:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4444              		.loc 1 1305 0
 4445 002e 0646     		mov	r6, r0
 4446 0030 70B3     		cbz	r0, .L362
1309:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, topic, topic_len);
 4447              		.loc 1 1309 0
 4448 0032 4368     		ldr	r3, [r0, #4]
 4449 0034 02A8     		add	r0, sp, #8
 4450              	.LVL665:
 4451 0036 40F8083D 		str	r3, [r0, #-8]!
1310:./mqtt/source/mqtt.c ****     cursor[0] = qos;
 4452              		.loc 1 1310 0
 4453 003a 1FFA89F2 		uxth	r2, r9
 4454 003e 3946     		mov	r1, r7
 4455 0040 FFF7FEFF 		bl	Mqtt_PktWriteString
 4456              	.LVL666:
1311:./mqtt/source/mqtt.c **** 
 4457              		.loc 1 1311 0
 4458 0044 009B     		ldr	r3, [sp]
 4459 0046 83F80080 		strb	r8, [r3]
1313:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4460              		.loc 1 1313 0
 4461 004a 6068     		ldr	r0, [r4, #4]
 4462 004c 01AA     		add	r2, sp, #4
 4463 004e 0421     		movs	r1, #4
 4464 0050 0130     		adds	r0, r0, #1
 4465 0052 FFF7FEFF 		bl	Mqtt_ReadLength
 4466              	.LVL667:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 120


 4467 0056 0028     		cmp	r0, #0
 4468 0058 1DDB     		blt	.L363
1317:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
 4469              		.loc 1 1317 0
 4470 005a 019B     		ldr	r3, [sp, #4]
 4471 005c 4B44     		add	r3, r3, r9
 4472 005e D81C     		adds	r0, r3, #3
 4473 0060 0190     		str	r0, [sp, #4]
1318:./mqtt/source/mqtt.c ****     if(ret < 0) {
 4474              		.loc 1 1318 0
 4475 0062 6168     		ldr	r1, [r4, #4]
 4476 0064 0131     		adds	r1, r1, #1
 4477 0066 FFF7FEFF 		bl	Mqtt_DumpLength
 4478              	.LVL668:
1319:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 4479              		.loc 1 1319 0
 4480 006a 0028     		cmp	r0, #0
 4481 006c 16DB     		blt	.L364
1323:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 4482              		.loc 1 1323 0
 4483 006e 0130     		adds	r0, r0, #1
 4484              	.LVL669:
 4485 0070 2060     		str	r0, [r4]
1324:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 4486              		.loc 1 1324 0
 4487 0072 3146     		mov	r1, r6
 4488 0074 2846     		mov	r0, r5
 4489              	.LVL670:
 4490 0076 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4491              	.LVL671:
1325:./mqtt/source/mqtt.c **** }
 4492              		.loc 1 1325 0
 4493 007a 0020     		movs	r0, #0
 4494 007c 10E0     		b	.L358
 4495              	.LVL672:
 4496              	.L359:
1300:./mqtt/source/mqtt.c ****     }
 4497              		.loc 1 1300 0
 4498 007e 6FF00600 		mvn	r0, #6
 4499              	.LVL673:
 4500 0082 0DE0     		b	.L358
 4501              	.LVL674:
 4502              	.L360:
 4503 0084 6FF00600 		mvn	r0, #6
 4504              	.LVL675:
 4505 0088 0AE0     		b	.L358
 4506              	.LVL676:
 4507              	.L361:
 4508 008a 6FF00600 		mvn	r0, #6
 4509              	.LVL677:
 4510 008e 07E0     		b	.L358
 4511              	.LVL678:
 4512              	.L362:
1306:./mqtt/source/mqtt.c ****     }
 4513              		.loc 1 1306 0
 4514 0090 4FF0FF30 		mov	r0, #-1
 4515              	.LVL679:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 121


 4516 0094 04E0     		b	.L358
 4517              	.L363:
1314:./mqtt/source/mqtt.c ****     }
 4518              		.loc 1 1314 0
 4519 0096 6FF00600 		mvn	r0, #6
 4520 009a 01E0     		b	.L358
 4521              	.LVL680:
 4522              	.L364:
1320:./mqtt/source/mqtt.c ****     }
 4523              		.loc 1 1320 0
 4524 009c 6FF00700 		mvn	r0, #7
 4525              	.LVL681:
 4526              	.L358:
1326:./mqtt/source/mqtt.c **** 
 4527              		.loc 1 1326 0
 4528 00a0 03B0     		add	sp, sp, #12
 4529              	.LCFI80:
 4530              		.cfi_def_cfa_offset 28
 4531              		@ sp needed
 4532 00a2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4533              		.cfi_endproc
 4534              	.LFE39:
 4536 00a6 00BF     		.section	.text.Mqtt_PackUnsubscribePkt,"ax",%progbits
 4537              		.align	2
 4538              		.global	Mqtt_PackUnsubscribePkt
 4539              		.thumb
 4540              		.thumb_func
 4542              	Mqtt_PackUnsubscribePkt:
 4543              	.LFB40:
1329:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head, *ext;
 4544              		.loc 1 1329 0
 4545              		.cfi_startproc
 4546              		@ args = 0, pretend = 0, frame = 8
 4547              		@ frame_needed = 0, uses_anonymous_args = 0
 4548              	.LVL682:
1339:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4549              		.loc 1 1339 0
 4550 0000 0029     		cmp	r1, #0
 4551 0002 59D0     		beq	.L372
1329:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head, *ext;
 4552              		.loc 1 1329 0
 4553 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4554              	.LCFI81:
 4555              		.cfi_def_cfa_offset 36
 4556              		.cfi_offset 4, -36
 4557              		.cfi_offset 5, -32
 4558              		.cfi_offset 6, -28
 4559              		.cfi_offset 7, -24
 4560              		.cfi_offset 8, -20
 4561              		.cfi_offset 9, -16
 4562              		.cfi_offset 10, -12
 4563              		.cfi_offset 11, -8
 4564              		.cfi_offset 14, -4
 4565 0008 83B0     		sub	sp, sp, #12
 4566              	.LCFI82:
 4567              		.cfi_def_cfa_offset 48
 4568 000a 8B46     		mov	fp, r1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 122


 4569 000c 9846     		mov	r8, r3
 4570 000e 9146     		mov	r9, r2
 4571 0010 8246     		mov	r10, r0
 4572 0012 0024     		movs	r4, #0
 4573 0014 2746     		mov	r7, r4
 4574 0016 0FE0     		b	.L368
 4575              	.LVL683:
 4576              	.L369:
1344:./mqtt/source/mqtt.c ****         if(!topic)
 4577              		.loc 1 1344 0
 4578 0018 59F82450 		ldr	r5, [r9, r4, lsl #2]
 4579              	.LVL684:
1345:./mqtt/source/mqtt.c ****             return MQTTERR_INVALID_PARAMETER;
 4580              		.loc 1 1345 0
 4581 001c 002D     		cmp	r5, #0
 4582 001e 4ED0     		beq	.L373
1347:./mqtt/source/mqtt.c ****         topic_total_len += topic_len;
 4583              		.loc 1 1347 0
 4584 0020 2846     		mov	r0, r5
 4585 0022 FFF7FEFF 		bl	strlen
 4586              	.LVL685:
 4587 0026 0646     		mov	r6, r0
 4588              	.LVL686:
1348:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(topic, topic_len) != topic_len) {
 4589              		.loc 1 1348 0
 4590 0028 0744     		add	r7, r7, r0
 4591              	.LVL687:
1349:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
 4592              		.loc 1 1349 0
 4593 002a 0146     		mov	r1, r0
 4594 002c 2846     		mov	r0, r5
 4595              	.LVL688:
 4596 002e FFF7FEFF 		bl	Mqtt_CheckUtf8
 4597              	.LVL689:
 4598 0032 8642     		cmp	r6, r0
 4599 0034 46D1     		bne	.L374
1343:./mqtt/source/mqtt.c ****         topic = topics[i];
 4600              		.loc 1 1343 0 discriminator 2
 4601 0036 0134     		adds	r4, r4, #1
 4602              	.LVL690:
 4603              	.L368:
1343:./mqtt/source/mqtt.c ****         topic = topics[i];
 4604              		.loc 1 1343 0 is_stmt 0 discriminator 1
 4605 0038 4445     		cmp	r4, r8
 4606 003a EDDB     		blt	.L369
1354:./mqtt/source/mqtt.c **** 
 4607              		.loc 1 1354 0 is_stmt 1
 4608 003c 08F10103 		add	r3, r8, #1
 4609 0040 07EB4307 		add	r7, r7, r3, lsl #1
 4610              	.LVL691:
1356:./mqtt/source/mqtt.c ****     if(!fixed_head) {
 4611              		.loc 1 1356 0
 4612 0044 0521     		movs	r1, #5
 4613 0046 5046     		mov	r0, r10
 4614 0048 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4615              	.LVL692:
1357:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 123


 4616              		.loc 1 1357 0
 4617 004c 0646     		mov	r6, r0
 4618 004e 0028     		cmp	r0, #0
 4619 0050 3BD0     		beq	.L375
1361:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
 4620              		.loc 1 1361 0
 4621 0052 4368     		ldr	r3, [r0, #4]
 4622 0054 A022     		movs	r2, #160
 4623 0056 1A70     		strb	r2, [r3]
1362:./mqtt/source/mqtt.c ****     if(ret < 0) {
 4624              		.loc 1 1362 0
 4625 0058 4168     		ldr	r1, [r0, #4]
 4626 005a 0131     		adds	r1, r1, #1
 4627 005c 3846     		mov	r0, r7
 4628              	.LVL693:
 4629 005e FFF7FEFF 		bl	Mqtt_DumpLength
 4630              	.LVL694:
1363:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 4631              		.loc 1 1363 0
 4632 0062 0028     		cmp	r0, #0
 4633 0064 34DB     		blt	.L376
1366:./mqtt/source/mqtt.c **** 
 4634              		.loc 1 1366 0
 4635 0066 0130     		adds	r0, r0, #1
 4636              	.LVL695:
 4637 0068 3060     		str	r0, [r6]
1368:./mqtt/source/mqtt.c ****     if(!ext) {
 4638              		.loc 1 1368 0
 4639 006a 3946     		mov	r1, r7
 4640 006c 5046     		mov	r0, r10
 4641              	.LVL696:
 4642 006e FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4643              	.LVL697:
1369:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4644              		.loc 1 1369 0
 4645 0072 0746     		mov	r7, r0
 4646              	.LVL698:
 4647 0074 78B3     		cbz	r0, .L377
1373:./mqtt/source/mqtt.c ****     Mqtt_WB16(pkt_id, cursor);
 4648              		.loc 1 1373 0
 4649 0076 4168     		ldr	r1, [r0, #4]
 4650 0078 0191     		str	r1, [sp, #4]
1374:./mqtt/source/mqtt.c ****     cursor += 2;
 4651              		.loc 1 1374 0
 4652 007a 5846     		mov	r0, fp
 4653              	.LVL699:
 4654 007c FFF7FEFF 		bl	Mqtt_WB16
 4655              	.LVL700:
1375:./mqtt/source/mqtt.c **** 
 4656              		.loc 1 1375 0
 4657 0080 019B     		ldr	r3, [sp, #4]
 4658 0082 0233     		adds	r3, r3, #2
 4659 0084 0193     		str	r3, [sp, #4]
 4660              	.LVL701:
1378:./mqtt/source/mqtt.c ****         topic = topics[i];
 4661              		.loc 1 1378 0
 4662 0086 0024     		movs	r4, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 124


 4663 0088 0AE0     		b	.L370
 4664              	.LVL702:
 4665              	.L371:
1379:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
 4666              		.loc 1 1379 0 discriminator 3
 4667 008a 59F82450 		ldr	r5, [r9, r4, lsl #2]
 4668              	.LVL703:
1380:./mqtt/source/mqtt.c ****         Mqtt_PktWriteString(&cursor, topic, topic_len);
 4669              		.loc 1 1380 0 discriminator 3
 4670 008e 2846     		mov	r0, r5
 4671 0090 FFF7FEFF 		bl	strlen
 4672              	.LVL704:
1381:./mqtt/source/mqtt.c ****     }
 4673              		.loc 1 1381 0 discriminator 3
 4674 0094 82B2     		uxth	r2, r0
 4675 0096 2946     		mov	r1, r5
 4676 0098 01A8     		add	r0, sp, #4
 4677              	.LVL705:
 4678 009a FFF7FEFF 		bl	Mqtt_PktWriteString
 4679              	.LVL706:
1378:./mqtt/source/mqtt.c ****         topic = topics[i];
 4680              		.loc 1 1378 0 discriminator 3
 4681 009e 0134     		adds	r4, r4, #1
 4682              	.LVL707:
 4683              	.L370:
1378:./mqtt/source/mqtt.c ****         topic = topics[i];
 4684              		.loc 1 1378 0 is_stmt 0 discriminator 1
 4685 00a0 4445     		cmp	r4, r8
 4686 00a2 F2DB     		blt	.L371
1384:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 4687              		.loc 1 1384 0 is_stmt 1
 4688 00a4 3146     		mov	r1, r6
 4689 00a6 5046     		mov	r0, r10
 4690 00a8 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4691              	.LVL708:
1385:./mqtt/source/mqtt.c **** 
 4692              		.loc 1 1385 0
 4693 00ac 3946     		mov	r1, r7
 4694 00ae 5046     		mov	r0, r10
 4695 00b0 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4696              	.LVL709:
1387:./mqtt/source/mqtt.c **** }
 4697              		.loc 1 1387 0
 4698 00b4 0020     		movs	r0, #0
 4699 00b6 10E0     		b	.L367
 4700              	.LVL710:
 4701              	.L372:
 4702              	.LCFI83:
 4703              		.cfi_def_cfa_offset 0
 4704              		.cfi_restore 4
 4705              		.cfi_restore 5
 4706              		.cfi_restore 6
 4707              		.cfi_restore 7
 4708              		.cfi_restore 8
 4709              		.cfi_restore 9
 4710              		.cfi_restore 10
 4711              		.cfi_restore 11
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 125


 4712              		.cfi_restore 14
1340:./mqtt/source/mqtt.c ****     }
 4713              		.loc 1 1340 0
 4714 00b8 6FF00600 		mvn	r0, #6
 4715              	.LVL711:
1388:./mqtt/source/mqtt.c **** 
 4716              		.loc 1 1388 0
 4717 00bc 7047     		bx	lr
 4718              	.LVL712:
 4719              	.L373:
 4720              	.LCFI84:
 4721              		.cfi_def_cfa_offset 48
 4722              		.cfi_offset 4, -36
 4723              		.cfi_offset 5, -32
 4724              		.cfi_offset 6, -28
 4725              		.cfi_offset 7, -24
 4726              		.cfi_offset 8, -20
 4727              		.cfi_offset 9, -16
 4728              		.cfi_offset 10, -12
 4729              		.cfi_offset 11, -8
 4730              		.cfi_offset 14, -4
1346:./mqtt/source/mqtt.c ****         topic_len = strlen(topic);
 4731              		.loc 1 1346 0
 4732 00be 6FF00600 		mvn	r0, #6
 4733 00c2 0AE0     		b	.L367
 4734              	.LVL713:
 4735              	.L374:
1350:./mqtt/source/mqtt.c ****         }
 4736              		.loc 1 1350 0
 4737 00c4 6FF00500 		mvn	r0, #5
 4738 00c8 07E0     		b	.L367
 4739              	.LVL714:
 4740              	.L375:
1358:./mqtt/source/mqtt.c ****     }
 4741              		.loc 1 1358 0
 4742 00ca 4FF0FF30 		mov	r0, #-1
 4743              	.LVL715:
 4744 00ce 04E0     		b	.L367
 4745              	.LVL716:
 4746              	.L376:
1364:./mqtt/source/mqtt.c ****     }
 4747              		.loc 1 1364 0
 4748 00d0 6FF00700 		mvn	r0, #7
 4749              	.LVL717:
 4750 00d4 01E0     		b	.L367
 4751              	.LVL718:
 4752              	.L377:
1370:./mqtt/source/mqtt.c ****     }
 4753              		.loc 1 1370 0
 4754 00d6 4FF0FF30 		mov	r0, #-1
 4755              	.LVL719:
 4756              	.L367:
1388:./mqtt/source/mqtt.c **** 
 4757              		.loc 1 1388 0
 4758 00da 03B0     		add	sp, sp, #12
 4759              	.LCFI85:
 4760              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 126


 4761              		@ sp needed
 4762 00dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4763              		.cfi_endproc
 4764              	.LFE40:
 4766              		.section	.text.Mqtt_AppendUnsubscribeTopic,"ax",%progbits
 4767              		.align	2
 4768              		.global	Mqtt_AppendUnsubscribeTopic
 4769              		.thumb
 4770              		.thumb_func
 4772              	Mqtt_AppendUnsubscribeTopic:
 4773              	.LFB41:
1391:./mqtt/source/mqtt.c ****     struct MqttExtent *fixed_head = buf->first_ext;
 4774              		.loc 1 1391 0
 4775              		.cfi_startproc
 4776              		@ args = 0, pretend = 0, frame = 8
 4777              		@ frame_needed = 0, uses_anonymous_args = 0
 4778              	.LVL720:
 4779 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4780              	.LCFI86:
 4781              		.cfi_def_cfa_offset 24
 4782              		.cfi_offset 4, -24
 4783              		.cfi_offset 5, -20
 4784              		.cfi_offset 6, -16
 4785              		.cfi_offset 7, -12
 4786              		.cfi_offset 8, -8
 4787              		.cfi_offset 14, -4
 4788 0004 82B0     		sub	sp, sp, #8
 4789              	.LCFI87:
 4790              		.cfi_def_cfa_offset 32
1392:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
 4791              		.loc 1 1392 0
 4792 0006 0468     		ldr	r4, [r0]
 4793              	.LVL721:
1399:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4794              		.loc 1 1399 0
 4795 0008 9CB3     		cbz	r4, .L381
1399:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4796              		.loc 1 1399 0 is_stmt 0 discriminator 1
 4797 000a 6368     		ldr	r3, [r4, #4]
 4798 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4799 000e A22B     		cmp	r3, #162
 4800 0010 32D1     		bne	.L382
1399:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4801              		.loc 1 1399 0 discriminator 2
 4802 0012 A1B3     		cbz	r1, .L383
 4803 0014 0E46     		mov	r6, r1
 4804 0016 0546     		mov	r5, r0
1403:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, topic_len + 2);
 4805              		.loc 1 1403 0 is_stmt 1
 4806 0018 0846     		mov	r0, r1
 4807              	.LVL722:
 4808 001a FFF7FEFF 		bl	strlen
 4809              	.LVL723:
 4810 001e 8046     		mov	r8, r0
 4811              	.LVL724:
1404:./mqtt/source/mqtt.c ****     if(!ext) {
 4812              		.loc 1 1404 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 127


 4813 0020 811C     		adds	r1, r0, #2
 4814 0022 2846     		mov	r0, r5
 4815              	.LVL725:
 4816 0024 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4817              	.LVL726:
1405:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4818              		.loc 1 1405 0
 4819 0028 0746     		mov	r7, r0
 4820 002a 58B3     		cbz	r0, .L384
1409:./mqtt/source/mqtt.c ****     Mqtt_PktWriteString(&cursor, topic, topic_len);
 4821              		.loc 1 1409 0
 4822 002c 4368     		ldr	r3, [r0, #4]
 4823 002e 02A8     		add	r0, sp, #8
 4824              	.LVL727:
 4825 0030 40F8083D 		str	r3, [r0, #-8]!
1410:./mqtt/source/mqtt.c **** 
 4826              		.loc 1 1410 0
 4827 0034 1FFA88F2 		uxth	r2, r8
 4828 0038 3146     		mov	r1, r6
 4829 003a FFF7FEFF 		bl	Mqtt_PktWriteString
 4830              	.LVL728:
1412:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 4831              		.loc 1 1412 0
 4832 003e 6068     		ldr	r0, [r4, #4]
 4833 0040 01AA     		add	r2, sp, #4
 4834 0042 0421     		movs	r1, #4
 4835 0044 0130     		adds	r0, r0, #1
 4836 0046 FFF7FEFF 		bl	Mqtt_ReadLength
 4837              	.LVL729:
 4838 004a 0028     		cmp	r0, #0
 4839 004c 1DDB     		blt	.L385
1416:./mqtt/source/mqtt.c ****     ret = Mqtt_DumpLength(remaining_len, fixed_head->payload + 1);
 4840              		.loc 1 1416 0
 4841 004e 019B     		ldr	r3, [sp, #4]
 4842 0050 4344     		add	r3, r3, r8
 4843 0052 981C     		adds	r0, r3, #2
 4844 0054 0190     		str	r0, [sp, #4]
1417:./mqtt/source/mqtt.c ****     if(ret < 0) {
 4845              		.loc 1 1417 0
 4846 0056 6168     		ldr	r1, [r4, #4]
 4847 0058 0131     		adds	r1, r1, #1
 4848 005a FFF7FEFF 		bl	Mqtt_DumpLength
 4849              	.LVL730:
1418:./mqtt/source/mqtt.c ****         return MQTTERR_PKT_TOO_LARGE;
 4850              		.loc 1 1418 0
 4851 005e 0028     		cmp	r0, #0
 4852 0060 16DB     		blt	.L386
1421:./mqtt/source/mqtt.c **** 
 4853              		.loc 1 1421 0
 4854 0062 0130     		adds	r0, r0, #1
 4855              	.LVL731:
 4856 0064 2060     		str	r0, [r4]
1423:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 4857              		.loc 1 1423 0
 4858 0066 3946     		mov	r1, r7
 4859 0068 2846     		mov	r0, r5
 4860              	.LVL732:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 128


 4861 006a FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4862              	.LVL733:
1424:./mqtt/source/mqtt.c **** }
 4863              		.loc 1 1424 0
 4864 006e 0020     		movs	r0, #0
 4865 0070 10E0     		b	.L380
 4866              	.LVL734:
 4867              	.L381:
1400:./mqtt/source/mqtt.c ****     }
 4868              		.loc 1 1400 0
 4869 0072 6FF00600 		mvn	r0, #6
 4870              	.LVL735:
 4871 0076 0DE0     		b	.L380
 4872              	.LVL736:
 4873              	.L382:
 4874 0078 6FF00600 		mvn	r0, #6
 4875              	.LVL737:
 4876 007c 0AE0     		b	.L380
 4877              	.LVL738:
 4878              	.L383:
 4879 007e 6FF00600 		mvn	r0, #6
 4880              	.LVL739:
 4881 0082 07E0     		b	.L380
 4882              	.LVL740:
 4883              	.L384:
1406:./mqtt/source/mqtt.c ****     }
 4884              		.loc 1 1406 0
 4885 0084 4FF0FF30 		mov	r0, #-1
 4886              	.LVL741:
 4887 0088 04E0     		b	.L380
 4888              	.L385:
1413:./mqtt/source/mqtt.c ****     }
 4889              		.loc 1 1413 0
 4890 008a 6FF00600 		mvn	r0, #6
 4891 008e 01E0     		b	.L380
 4892              	.LVL742:
 4893              	.L386:
1419:./mqtt/source/mqtt.c ****     }
 4894              		.loc 1 1419 0
 4895 0090 6FF00700 		mvn	r0, #7
 4896              	.LVL743:
 4897              	.L380:
1425:./mqtt/source/mqtt.c **** 
 4898              		.loc 1 1425 0
 4899 0094 02B0     		add	sp, sp, #8
 4900              	.LCFI88:
 4901              		.cfi_def_cfa_offset 24
 4902              		@ sp needed
 4903 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4904              		.cfi_endproc
 4905              	.LFE41:
 4907 009a 00BF     		.section	.text.Mqtt_PackPingReqPkt,"ax",%progbits
 4908              		.align	2
 4909              		.global	Mqtt_PackPingReqPkt
 4910              		.thumb
 4911              		.thumb_func
 4913              	Mqtt_PackPingReqPkt:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 129


 4914              	.LFB42:
1428:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, 2);
 4915              		.loc 1 1428 0
 4916              		.cfi_startproc
 4917              		@ args = 0, pretend = 0, frame = 0
 4918              		@ frame_needed = 0, uses_anonymous_args = 0
 4919              	.LVL744:
 4920 0000 38B5     		push	{r3, r4, r5, lr}
 4921              	.LCFI89:
 4922              		.cfi_def_cfa_offset 16
 4923              		.cfi_offset 3, -16
 4924              		.cfi_offset 4, -12
 4925              		.cfi_offset 5, -8
 4926              		.cfi_offset 14, -4
 4927 0002 0546     		mov	r5, r0
1429:./mqtt/source/mqtt.c ****     if(!ext) {
 4928              		.loc 1 1429 0
 4929 0004 0221     		movs	r1, #2
 4930 0006 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4931              	.LVL745:
1430:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4932              		.loc 1 1430 0
 4933 000a 58B1     		cbz	r0, .L390
 4934 000c 0146     		mov	r1, r0
1434:./mqtt/source/mqtt.c ****     ext->payload[1] = 0;
 4935              		.loc 1 1434 0
 4936 000e 4368     		ldr	r3, [r0, #4]
 4937 0010 C022     		movs	r2, #192
 4938 0012 1A70     		strb	r2, [r3]
1435:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 4939              		.loc 1 1435 0
 4940 0014 4368     		ldr	r3, [r0, #4]
 4941 0016 0024     		movs	r4, #0
 4942 0018 5C70     		strb	r4, [r3, #1]
1436:./mqtt/source/mqtt.c **** 
 4943              		.loc 1 1436 0
 4944 001a 2846     		mov	r0, r5
 4945              	.LVL746:
 4946 001c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 4947              	.LVL747:
1438:./mqtt/source/mqtt.c **** }
 4948              		.loc 1 1438 0
 4949 0020 2046     		mov	r0, r4
 4950 0022 38BD     		pop	{r3, r4, r5, pc}
 4951              	.LVL748:
 4952              	.L390:
1431:./mqtt/source/mqtt.c ****     }
 4953              		.loc 1 1431 0
 4954 0024 4FF0FF30 		mov	r0, #-1
 4955              	.LVL749:
1439:./mqtt/source/mqtt.c **** 
 4956              		.loc 1 1439 0
 4957 0028 38BD     		pop	{r3, r4, r5, pc}
 4958              		.cfi_endproc
 4959              	.LFE42:
 4961 002a 00BF     		.section	.text.Mqtt_PackDisconnectPkt,"ax",%progbits
 4962              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 130


 4963              		.global	Mqtt_PackDisconnectPkt
 4964              		.thumb
 4965              		.thumb_func
 4967              	Mqtt_PackDisconnectPkt:
 4968              	.LFB43:
1442:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, 2);
 4969              		.loc 1 1442 0
 4970              		.cfi_startproc
 4971              		@ args = 0, pretend = 0, frame = 0
 4972              		@ frame_needed = 0, uses_anonymous_args = 0
 4973              	.LVL750:
 4974 0000 38B5     		push	{r3, r4, r5, lr}
 4975              	.LCFI90:
 4976              		.cfi_def_cfa_offset 16
 4977              		.cfi_offset 3, -16
 4978              		.cfi_offset 4, -12
 4979              		.cfi_offset 5, -8
 4980              		.cfi_offset 14, -4
 4981 0002 0546     		mov	r5, r0
1443:./mqtt/source/mqtt.c ****     if(!ext) {
 4982              		.loc 1 1443 0
 4983 0004 0221     		movs	r1, #2
 4984 0006 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 4985              	.LVL751:
1444:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 4986              		.loc 1 1444 0
 4987 000a 58B1     		cbz	r0, .L394
 4988 000c 0146     		mov	r1, r0
1448:./mqtt/source/mqtt.c ****     ext->payload[1] = 0;
 4989              		.loc 1 1448 0
 4990 000e 4368     		ldr	r3, [r0, #4]
 4991 0010 E022     		movs	r2, #224
 4992 0012 1A70     		strb	r2, [r3]
1449:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 4993              		.loc 1 1449 0
 4994 0014 4368     		ldr	r3, [r0, #4]
 4995 0016 0024     		movs	r4, #0
 4996 0018 5C70     		strb	r4, [r3, #1]
1450:./mqtt/source/mqtt.c **** 
 4997              		.loc 1 1450 0
 4998 001a 2846     		mov	r0, r5
 4999              	.LVL752:
 5000 001c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 5001              	.LVL753:
1452:./mqtt/source/mqtt.c **** }
 5002              		.loc 1 1452 0
 5003 0020 2046     		mov	r0, r4
 5004 0022 38BD     		pop	{r3, r4, r5, pc}
 5005              	.LVL754:
 5006              	.L394:
1445:./mqtt/source/mqtt.c ****     }
 5007              		.loc 1 1445 0
 5008 0024 4FF0FF30 		mov	r0, #-1
 5009              	.LVL755:
1453:./mqtt/source/mqtt.c **** 
 5010              		.loc 1 1453 0
 5011 0028 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 131


 5012              		.cfi_endproc
 5013              	.LFE43:
 5015 002a 00BF     		.section	.text.Mqtt_PackCmdRetPkt,"ax",%progbits
 5016              		.align	2
 5017              		.global	Mqtt_PackCmdRetPkt
 5018              		.thumb
 5019              		.thumb_func
 5021              	Mqtt_PackCmdRetPkt:
 5022              	.LFB44:
1458:./mqtt/source/mqtt.c ****     size_t cmdid_size = strlen(cmdid) + 1;
 5023              		.loc 1 1458 0
 5024              		.cfi_startproc
 5025              		@ args = 12, pretend = 0, frame = 0
 5026              		@ frame_needed = 0, uses_anonymous_args = 0
 5027              	.LVL756:
 5028 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5029              	.LCFI91:
 5030              		.cfi_def_cfa_offset 28
 5031              		.cfi_offset 4, -28
 5032              		.cfi_offset 5, -24
 5033              		.cfi_offset 6, -20
 5034              		.cfi_offset 7, -16
 5035              		.cfi_offset 8, -12
 5036              		.cfi_offset 9, -8
 5037              		.cfi_offset 14, -4
 5038 0004 85B0     		sub	sp, sp, #20
 5039              	.LCFI92:
 5040              		.cfi_def_cfa_offset 48
 5041 0006 0646     		mov	r6, r0
 5042 0008 8846     		mov	r8, r1
 5043 000a 1546     		mov	r5, r2
 5044 000c 9946     		mov	r9, r3
 5045 000e 9DF83470 		ldrb	r7, [sp, #52]	@ zero_extendqisi2
1459:./mqtt/source/mqtt.c ****     struct MqttExtent *ext = MqttBuffer_AllocExtent(buf, cmdid_size + CMD_TOPIC_PREFIX_LEN);
 5046              		.loc 1 1459 0
 5047 0012 1046     		mov	r0, r2
 5048              	.LVL757:
 5049 0014 FFF7FEFF 		bl	strlen
 5050              	.LVL758:
1460:./mqtt/source/mqtt.c ****     if(!ext) {
 5051              		.loc 1 1460 0
 5052 0018 811D     		adds	r1, r0, #6
 5053 001a 3046     		mov	r0, r6
 5054              	.LVL759:
 5055 001c FFF7FEFF 		bl	MqttBuffer_AllocExtent
 5056              	.LVL760:
1461:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
 5057              		.loc 1 1461 0
 5058 0020 0028     		cmp	r0, #0
 5059 0022 2ED0     		beq	.L399
 5060 0024 0446     		mov	r4, r0
1465:./mqtt/source/mqtt.c ****     strcpy(ext->payload + RESP_CMD_TOPIC_PREFIX_LEN, cmdid);
 5061              		.loc 1 1465 0
 5062 0026 4368     		ldr	r3, [r0, #4]
 5063 0028 184A     		ldr	r2, .L401
 5064 002a 1068     		ldr	r0, [r2]	@ unaligned
 5065              	.LVL761:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 132


 5066 002c 1860     		str	r0, [r3]	@ unaligned
 5067 002e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 5068 0030 9A80     		strh	r2, [r3, #4]	@ unaligned
1466:./mqtt/source/mqtt.c **** 
 5069              		.loc 1 1466 0
 5070 0032 6068     		ldr	r0, [r4, #4]
 5071 0034 2946     		mov	r1, r5
 5072 0036 0630     		adds	r0, r0, #6
 5073 0038 FFF7FEFF 		bl	strcpy
 5074              	.LVL762:
1468:./mqtt/source/mqtt.c **** 
 5075              		.loc 1 1468 0
 5076 003c 3946     		mov	r1, r7
 5077 003e 1448     		ldr	r0, .L401+4
 5078 0040 FFF7FEFF 		bl	printf
 5079              	.LVL763:
1472:./mqtt/source/mqtt.c ****         Mqtt_PackPublishPkt(buf, pkt_id, ext->payload, ret, ret_len,
 5080              		.loc 1 1472 0
 5081 0044 012F     		cmp	r7, #1
 5082 0046 0ED1     		bne	.L398
1471:./mqtt/source/mqtt.c ****                             MQTT_QOS_LEVEL1, 0, own):
 5083              		.loc 1 1471 0 discriminator 1
 5084 0048 6268     		ldr	r2, [r4, #4]
1472:./mqtt/source/mqtt.c ****         Mqtt_PackPublishPkt(buf, pkt_id, ext->payload, ret, ret_len,
 5085              		.loc 1 1472 0 discriminator 1
 5086 004a 0E9B     		ldr	r3, [sp, #56]
 5087 004c 0393     		str	r3, [sp, #12]
 5088 004e 0023     		movs	r3, #0
 5089 0050 0293     		str	r3, [sp, #8]
 5090 0052 0123     		movs	r3, #1
 5091 0054 0193     		str	r3, [sp, #4]
 5092 0056 0C9B     		ldr	r3, [sp, #48]
 5093 0058 0093     		str	r3, [sp]
 5094 005a 4B46     		mov	r3, r9
 5095 005c 4146     		mov	r1, r8
 5096 005e 3046     		mov	r0, r6
 5097 0060 FFF7FEFF 		bl	Mqtt_PackPublishPkt
 5098              	.LVL764:
 5099 0064 0FE0     		b	.L397
 5100              	.L398:
1473:./mqtt/source/mqtt.c ****                             MQTT_QOS_LEVEL0, 0, own);
 5101              		.loc 1 1473 0 discriminator 2
 5102 0066 6268     		ldr	r2, [r4, #4]
1472:./mqtt/source/mqtt.c ****         Mqtt_PackPublishPkt(buf, pkt_id, ext->payload, ret, ret_len,
 5103              		.loc 1 1472 0 discriminator 2
 5104 0068 0E9B     		ldr	r3, [sp, #56]
 5105 006a 0393     		str	r3, [sp, #12]
 5106 006c 0023     		movs	r3, #0
 5107 006e 0293     		str	r3, [sp, #8]
 5108 0070 0193     		str	r3, [sp, #4]
 5109 0072 0C9B     		ldr	r3, [sp, #48]
 5110 0074 0093     		str	r3, [sp]
 5111 0076 4B46     		mov	r3, r9
 5112 0078 4146     		mov	r1, r8
 5113 007a 3046     		mov	r0, r6
 5114 007c FFF7FEFF 		bl	Mqtt_PackPublishPkt
 5115              	.LVL765:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 133


 5116 0080 01E0     		b	.L397
 5117              	.LVL766:
 5118              	.L399:
1462:./mqtt/source/mqtt.c ****     }
 5119              		.loc 1 1462 0
 5120 0082 4FF0FF30 		mov	r0, #-1
 5121              	.LVL767:
 5122              	.L397:
1475:./mqtt/source/mqtt.c **** 
 5123              		.loc 1 1475 0
 5124 0086 05B0     		add	sp, sp, #20
 5125              	.LCFI93:
 5126              		.cfi_def_cfa_offset 28
 5127              		@ sp needed
 5128 0088 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5129              	.LVL768:
 5130              	.L402:
 5131              		.align	2
 5132              	.L401:
 5133 008c 58000000 		.word	.LC6
 5134 0090 60000000 		.word	.LC7
 5135              		.cfi_endproc
 5136              	.LFE44:
 5138              		.section	.text.Mqtt_PackDataPointStart,"ax",%progbits
 5139              		.align	2
 5140              		.global	Mqtt_PackDataPointStart
 5141              		.thumb
 5142              		.thumb_func
 5144              	Mqtt_PackDataPointStart:
 5145              	.LFB45:
1479:./mqtt/source/mqtt.c ****     int err;
 5146              		.loc 1 1479 0
 5147              		.cfi_startproc
 5148              		@ args = 4, pretend = 0, frame = 0
 5149              		@ frame_needed = 0, uses_anonymous_args = 0
 5150              	.LVL769:
 5151 0000 10B5     		push	{r4, lr}
 5152              	.LCFI94:
 5153              		.cfi_def_cfa_offset 8
 5154              		.cfi_offset 4, -8
 5155              		.cfi_offset 14, -4
 5156 0002 84B0     		sub	sp, sp, #16
 5157              	.LCFI95:
 5158              		.cfi_def_cfa_offset 24
1483:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
 5159              		.loc 1 1483 0
 5160 0004 0468     		ldr	r4, [r0]
 5161 0006 A4B9     		cbnz	r4, .L407
 5162 0008 1C46     		mov	r4, r3
1487:./mqtt/source/mqtt.c ****         err = Mqtt_PackPublishPkt(buf, pkt_id, "$dp", NULL, 0, qos, retain, 0);
 5163              		.loc 1 1487 0
 5164 000a 069B     		ldr	r3, [sp, #24]
 5165              	.LVL770:
 5166 000c 43B1     		cbz	r3, .L405
1488:./mqtt/source/mqtt.c ****     }
 5167              		.loc 1 1488 0
 5168 000e 0023     		movs	r3, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 134


 5169 0010 0393     		str	r3, [sp, #12]
 5170 0012 0294     		str	r4, [sp, #8]
 5171 0014 0192     		str	r2, [sp, #4]
 5172 0016 0093     		str	r3, [sp]
 5173 0018 084A     		ldr	r2, .L410
 5174              	.LVL771:
 5175 001a FFF7FEFF 		bl	Mqtt_PackPublishPkt
 5176              	.LVL772:
 5177 001e 0AE0     		b	.L404
 5178              	.LVL773:
 5179              	.L405:
1491:./mqtt/source/mqtt.c ****     }
 5180              		.loc 1 1491 0
 5181 0020 0023     		movs	r3, #0
 5182 0022 0393     		str	r3, [sp, #12]
 5183 0024 0294     		str	r4, [sp, #8]
 5184 0026 0192     		str	r2, [sp, #4]
 5185 0028 0093     		str	r3, [sp]
 5186 002a 054A     		ldr	r2, .L410+4
 5187              	.LVL774:
 5188 002c FFF7FEFF 		bl	Mqtt_PackPublishPkt
 5189              	.LVL775:
 5190 0030 01E0     		b	.L404
 5191              	.LVL776:
 5192              	.L407:
1484:./mqtt/source/mqtt.c ****     }
 5193              		.loc 1 1484 0
 5194 0032 6FF00600 		mvn	r0, #6
 5195              	.LVL777:
 5196              	.L404:
1520:./mqtt/source/mqtt.c **** 
 5197              		.loc 1 1520 0
 5198 0036 04B0     		add	sp, sp, #16
 5199              	.LCFI96:
 5200              		.cfi_def_cfa_offset 8
 5201              		@ sp needed
 5202 0038 10BD     		pop	{r4, pc}
 5203              	.LVL778:
 5204              	.L411:
 5205 003a 00BF     		.align	2
 5206              	.L410:
 5207 003c 78000000 		.word	.LC8
 5208 0040 7C000000 		.word	.LC9
 5209              		.cfi_endproc
 5210              	.LFE45:
 5212              		.section	.text.Mqtt_AppendDPNull,"ax",%progbits
 5213              		.align	2
 5214              		.global	Mqtt_AppendDPNull
 5215              		.thumb
 5216              		.thumb_func
 5218              	Mqtt_AppendDPNull:
 5219              	.LFB47:
1609:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, 0, NULL, 0, 0);
 5220              		.loc 1 1609 0
 5221              		.cfi_startproc
 5222              		@ args = 0, pretend = 0, frame = 0
 5223              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 135


 5224              	.LVL779:
 5225 0000 00B5     		push	{lr}
 5226              	.LCFI97:
 5227              		.cfi_def_cfa_offset 4
 5228              		.cfi_offset 14, -4
 5229 0002 85B0     		sub	sp, sp, #20
 5230              	.LCFI98:
 5231              		.cfi_def_cfa_offset 24
1610:./mqtt/source/mqtt.c **** }
 5232              		.loc 1 1610 0
 5233 0004 0023     		movs	r3, #0
 5234 0006 0293     		str	r3, [sp, #8]
 5235 0008 0193     		str	r3, [sp, #4]
 5236 000a 0093     		str	r3, [sp]
 5237 000c 0022     		movs	r2, #0
 5238 000e 0023     		movs	r3, #0
 5239 0010 FFF7FEFF 		bl	Mqtt_AppendDP
 5240              	.LVL780:
1611:./mqtt/source/mqtt.c **** 
 5241              		.loc 1 1611 0
 5242 0014 05B0     		add	sp, sp, #20
 5243              	.LCFI99:
 5244              		.cfi_def_cfa_offset 4
 5245              		@ sp needed
 5246 0016 5DF804FB 		ldr	pc, [sp], #4
 5247              		.cfi_endproc
 5248              	.LFE47:
 5250 001a 00BF     		.section	.text.Mqtt_AppendDPInt,"ax",%progbits
 5251              		.align	2
 5252              		.global	Mqtt_AppendDPInt
 5253              		.thumb
 5254              		.thumb_func
 5256              	Mqtt_AppendDPInt:
 5257              	.LFB48:
1615:./mqtt/source/mqtt.c ****     char intbuf[MAX_INTBUF_SIZE];
 5258              		.loc 1 1615 0
 5259              		.cfi_startproc
 5260              		@ args = 4, pretend = 0, frame = 16
 5261              		@ frame_needed = 0, uses_anonymous_args = 0
 5262              	.LVL781:
 5263 0000 2DE97043 		push	{r4, r5, r6, r8, r9, lr}
 5264              	.LCFI100:
 5265              		.cfi_def_cfa_offset 24
 5266              		.cfi_offset 4, -24
 5267              		.cfi_offset 5, -20
 5268              		.cfi_offset 6, -16
 5269              		.cfi_offset 8, -12
 5270              		.cfi_offset 9, -8
 5271              		.cfi_offset 14, -4
 5272 0004 88B0     		sub	sp, sp, #32
 5273              	.LCFI101:
 5274              		.cfi_def_cfa_offset 56
 5275 0006 0546     		mov	r5, r0
 5276 0008 0E46     		mov	r6, r1
 5277 000a 9046     		mov	r8, r2
 5278 000c 9946     		mov	r9, r3
1617:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, ts, intbuf, bytes, 0);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 136


 5279              		.loc 1 1617 0
 5280 000e 05AC     		add	r4, sp, #20
 5281 0010 0E9B     		ldr	r3, [sp, #56]
 5282 0012 094A     		ldr	r2, .L416
 5283              	.LVL782:
 5284 0014 0C21     		movs	r1, #12
 5285              	.LVL783:
 5286 0016 2046     		mov	r0, r4
 5287              	.LVL784:
 5288 0018 FFF7FEFF 		bl	snprintf
 5289              	.LVL785:
1618:./mqtt/source/mqtt.c **** }
 5290              		.loc 1 1618 0
 5291 001c 0023     		movs	r3, #0
 5292 001e 0293     		str	r3, [sp, #8]
 5293 0020 0190     		str	r0, [sp, #4]
 5294 0022 0094     		str	r4, [sp]
 5295 0024 4246     		mov	r2, r8
 5296 0026 4B46     		mov	r3, r9
 5297 0028 3146     		mov	r1, r6
 5298 002a 2846     		mov	r0, r5
 5299              	.LVL786:
 5300 002c FFF7FEFF 		bl	Mqtt_AppendDP
 5301              	.LVL787:
1619:./mqtt/source/mqtt.c **** 
 5302              		.loc 1 1619 0
 5303 0030 08B0     		add	sp, sp, #32
 5304              	.LCFI102:
 5305              		.cfi_def_cfa_offset 24
 5306              		@ sp needed
 5307 0032 BDE87083 		pop	{r4, r5, r6, r8, r9, pc}
 5308              	.LVL788:
 5309              	.L417:
 5310 0036 00BF     		.align	2
 5311              	.L416:
 5312 0038 84000000 		.word	.LC10
 5313              		.cfi_endproc
 5314              	.LFE48:
 5316              		.section	.text.Mqtt_AppendDPDouble,"ax",%progbits
 5317              		.align	2
 5318              		.global	Mqtt_AppendDPDouble
 5319              		.thumb
 5320              		.thumb_func
 5322              	Mqtt_AppendDPDouble:
 5323              	.LFB49:
1623:./mqtt/source/mqtt.c ****     char dblbuf[MAX_DBLBUF_SIZE];
 5324              		.loc 1 1623 0
 5325              		.cfi_startproc
 5326              		@ args = 0, pretend = 0, frame = 320
 5327              		@ frame_needed = 0, uses_anonymous_args = 0
 5328              	.LVL789:
 5329 0000 2DE97043 		push	{r4, r5, r6, r8, r9, lr}
 5330              	.LCFI103:
 5331              		.cfi_def_cfa_offset 24
 5332              		.cfi_offset 4, -24
 5333              		.cfi_offset 5, -20
 5334              		.cfi_offset 6, -16
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 137


 5335              		.cfi_offset 8, -12
 5336              		.cfi_offset 9, -8
 5337              		.cfi_offset 14, -4
 5338 0004 D4B0     		sub	sp, sp, #336
 5339              	.LCFI104:
 5340              		.cfi_def_cfa_offset 360
 5341 0006 0546     		mov	r5, r0
 5342 0008 0E46     		mov	r6, r1
 5343 000a 9046     		mov	r8, r2
 5344 000c 9946     		mov	r9, r3
1625:./mqtt/source/mqtt.c ****     return Mqtt_AppendDP(buf, dsid, ts, dblbuf, bytes, 0);
 5345              		.loc 1 1625 0
 5346 000e 04AC     		add	r4, sp, #16
 5347 0010 8DED000B 		vstr.64	d0, [sp]
 5348 0014 094A     		ldr	r2, .L420
 5349              	.LVL790:
 5350 0016 4FF4A071 		mov	r1, #320
 5351              	.LVL791:
 5352 001a 2046     		mov	r0, r4
 5353              	.LVL792:
 5354 001c FFF7FEFF 		bl	snprintf
 5355              	.LVL793:
1626:./mqtt/source/mqtt.c **** }
 5356              		.loc 1 1626 0
 5357 0020 0023     		movs	r3, #0
 5358 0022 0293     		str	r3, [sp, #8]
 5359 0024 0190     		str	r0, [sp, #4]
 5360 0026 0094     		str	r4, [sp]
 5361 0028 4246     		mov	r2, r8
 5362 002a 4B46     		mov	r3, r9
 5363 002c 3146     		mov	r1, r6
 5364 002e 2846     		mov	r0, r5
 5365              	.LVL794:
 5366 0030 FFF7FEFF 		bl	Mqtt_AppendDP
 5367              	.LVL795:
1627:./mqtt/source/mqtt.c **** 
 5368              		.loc 1 1627 0
 5369 0034 54B0     		add	sp, sp, #336
 5370              	.LCFI105:
 5371              		.cfi_def_cfa_offset 24
 5372              		@ sp needed
 5373 0036 BDE87083 		pop	{r4, r5, r6, r8, r9, pc}
 5374              	.LVL796:
 5375              	.L421:
 5376 003a 00BF     		.align	2
 5377              	.L420:
 5378 003c 88000000 		.word	.LC11
 5379              		.cfi_endproc
 5380              	.LFE49:
 5382              		.section	.text.Mqtt_AppendDPString,"ax",%progbits
 5383              		.align	2
 5384              		.global	Mqtt_AppendDPString
 5385              		.thumb
 5386              		.thumb_func
 5388              	Mqtt_AppendDPString:
 5389              	.LFB50:
1631:./mqtt/source/mqtt.c ****     size_t bytes;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 138


 5390              		.loc 1 1631 0
 5391              		.cfi_startproc
 5392              		@ args = 4, pretend = 0, frame = 0
 5393              		@ frame_needed = 0, uses_anonymous_args = 0
 5394              	.LVL797:
 5395 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5396              	.LCFI106:
 5397              		.cfi_def_cfa_offset 28
 5398              		.cfi_offset 4, -28
 5399              		.cfi_offset 5, -24
 5400              		.cfi_offset 6, -20
 5401              		.cfi_offset 7, -16
 5402              		.cfi_offset 8, -12
 5403              		.cfi_offset 9, -8
 5404              		.cfi_offset 14, -4
 5405 0004 85B0     		sub	sp, sp, #20
 5406              	.LCFI107:
 5407              		.cfi_def_cfa_offset 48
 5408 0006 0646     		mov	r6, r0
 5409 0008 0F46     		mov	r7, r1
 5410 000a 9046     		mov	r8, r2
 5411 000c 9946     		mov	r9, r3
 5412 000e 0C9C     		ldr	r4, [sp, #48]
1633:./mqtt/source/mqtt.c ****         value = "";
 5413              		.loc 1 1633 0
 5414 0010 04B9     		cbnz	r4, .L423
1634:./mqtt/source/mqtt.c ****     }
 5415              		.loc 1 1634 0
 5416 0012 114C     		ldr	r4, .L429
 5417              	.L423:
 5418              	.LVL798:
1637:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(value, bytes) != bytes) {
 5419              		.loc 1 1637 0
 5420 0014 2046     		mov	r0, r4
 5421              	.LVL799:
 5422 0016 FFF7FEFF 		bl	strlen
 5423              	.LVL800:
 5424 001a 0546     		mov	r5, r0
 5425              	.LVL801:
1638:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
 5426              		.loc 1 1638 0
 5427 001c 0146     		mov	r1, r0
 5428 001e 2046     		mov	r0, r4
 5429              	.LVL802:
 5430 0020 FFF7FEFF 		bl	Mqtt_CheckUtf8
 5431              	.LVL803:
 5432 0024 8542     		cmp	r5, r0
 5433 0026 0FD1     		bne	.L426
1642:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
 5434              		.loc 1 1642 0
 5435 0028 2946     		mov	r1, r5
 5436 002a 2046     		mov	r0, r4
 5437 002c FFF7FEFF 		bl	Mqtt_HasIllegalCharacter
 5438              	.LVL804:
 5439 0030 68B9     		cbnz	r0, .L427
1646:./mqtt/source/mqtt.c **** }
 5440              		.loc 1 1646 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 139


 5441 0032 0123     		movs	r3, #1
 5442 0034 0293     		str	r3, [sp, #8]
 5443 0036 0195     		str	r5, [sp, #4]
 5444 0038 0094     		str	r4, [sp]
 5445 003a 4246     		mov	r2, r8
 5446 003c 4B46     		mov	r3, r9
 5447 003e 3946     		mov	r1, r7
 5448 0040 3046     		mov	r0, r6
 5449 0042 FFF7FEFF 		bl	Mqtt_AppendDP
 5450              	.LVL805:
 5451 0046 04E0     		b	.L424
 5452              	.L426:
1639:./mqtt/source/mqtt.c ****     }
 5453              		.loc 1 1639 0
 5454 0048 6FF00500 		mvn	r0, #5
 5455 004c 01E0     		b	.L424
 5456              	.L427:
1643:./mqtt/source/mqtt.c ****     }
 5457              		.loc 1 1643 0
 5458 004e 6FF00400 		mvn	r0, #4
 5459              	.L424:
1647:./mqtt/source/mqtt.c **** 
 5460              		.loc 1 1647 0
 5461 0052 05B0     		add	sp, sp, #20
 5462              	.LCFI108:
 5463              		.cfi_def_cfa_offset 28
 5464              		@ sp needed
 5465 0054 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5466              	.LVL806:
 5467              	.L430:
 5468              		.align	2
 5469              	.L429:
 5470 0058 34000000 		.word	.LC4
 5471              		.cfi_endproc
 5472              	.LFE50:
 5474              		.section	.text.Mqtt_AppendDPSubvalueInt,"ax",%progbits
 5475              		.align	2
 5476              		.global	Mqtt_AppendDPSubvalueInt
 5477              		.thumb
 5478              		.thumb_func
 5480              	Mqtt_AppendDPSubvalueInt:
 5481              	.LFB54:
1746:./mqtt/source/mqtt.c **** 
1747:./mqtt/source/mqtt.c **** int Mqtt_AppendDPSubvalueInt(struct MqttBuffer *buf, const char *name, int value)
1748:./mqtt/source/mqtt.c **** {
 5482              		.loc 1 1748 0
 5483              		.cfi_startproc
 5484              		@ args = 0, pretend = 0, frame = 16
 5485              		@ frame_needed = 0, uses_anonymous_args = 0
 5486              	.LVL807:
 5487 0000 30B5     		push	{r4, r5, lr}
 5488              	.LCFI109:
 5489              		.cfi_def_cfa_offset 12
 5490              		.cfi_offset 4, -12
 5491              		.cfi_offset 5, -8
 5492              		.cfi_offset 14, -4
 5493 0002 87B0     		sub	sp, sp, #28
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 140


 5494              	.LCFI110:
 5495              		.cfi_def_cfa_offset 40
 5496 0004 0446     		mov	r4, r0
 5497 0006 0D46     		mov	r5, r1
1749:./mqtt/source/mqtt.c ****     char intbuf[MAX_INTBUF_SIZE];
1750:./mqtt/source/mqtt.c ****     size_t bytes = (size_t)snprintf(intbuf, MAX_INTBUF_SIZE, "%d", value);
 5498              		.loc 1 1750 0
 5499 0008 1346     		mov	r3, r2
 5500 000a 084A     		ldr	r2, .L433
 5501              	.LVL808:
 5502 000c 0C21     		movs	r1, #12
 5503              	.LVL809:
 5504 000e 0DEB0100 		add	r0, sp, r1
 5505              	.LVL810:
 5506 0012 FFF7FEFF 		bl	snprintf
 5507              	.LVL811:
1751:./mqtt/source/mqtt.c ****     return Mqtt_AppendDPSubvalue(buf, name, intbuf, bytes, 0);
 5508              		.loc 1 1751 0
 5509 0016 0023     		movs	r3, #0
 5510 0018 0093     		str	r3, [sp]
 5511 001a 0346     		mov	r3, r0
 5512 001c 03AA     		add	r2, sp, #12
 5513 001e 2946     		mov	r1, r5
 5514 0020 2046     		mov	r0, r4
 5515              	.LVL812:
 5516 0022 FFF7FEFF 		bl	Mqtt_AppendDPSubvalue
 5517              	.LVL813:
1752:./mqtt/source/mqtt.c **** }
 5518              		.loc 1 1752 0
 5519 0026 07B0     		add	sp, sp, #28
 5520              	.LCFI111:
 5521              		.cfi_def_cfa_offset 12
 5522              		@ sp needed
 5523 0028 30BD     		pop	{r4, r5, pc}
 5524              	.LVL814:
 5525              	.L434:
 5526 002a 00BF     		.align	2
 5527              	.L433:
 5528 002c 84000000 		.word	.LC10
 5529              		.cfi_endproc
 5530              	.LFE54:
 5532              		.section	.text.Mqtt_AppendDPSubvalueDouble,"ax",%progbits
 5533              		.align	2
 5534              		.global	Mqtt_AppendDPSubvalueDouble
 5535              		.thumb
 5536              		.thumb_func
 5538              	Mqtt_AppendDPSubvalueDouble:
 5539              	.LFB55:
1753:./mqtt/source/mqtt.c **** 
1754:./mqtt/source/mqtt.c **** int Mqtt_AppendDPSubvalueDouble(struct MqttBuffer *buf, const char *name, double value)
1755:./mqtt/source/mqtt.c **** {
 5540              		.loc 1 1755 0
 5541              		.cfi_startproc
 5542              		@ args = 0, pretend = 0, frame = 320
 5543              		@ frame_needed = 0, uses_anonymous_args = 0
 5544              	.LVL815:
 5545 0000 30B5     		push	{r4, r5, lr}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 141


 5546              	.LCFI112:
 5547              		.cfi_def_cfa_offset 12
 5548              		.cfi_offset 4, -12
 5549              		.cfi_offset 5, -8
 5550              		.cfi_offset 14, -4
 5551 0002 D3B0     		sub	sp, sp, #332
 5552              	.LCFI113:
 5553              		.cfi_def_cfa_offset 344
 5554 0004 0446     		mov	r4, r0
 5555 0006 0D46     		mov	r5, r1
1756:./mqtt/source/mqtt.c ****     char dblbuf[MAX_DBLBUF_SIZE];
1757:./mqtt/source/mqtt.c ****     size_t bytes = (size_t)snprintf(dblbuf, MAX_DBLBUF_SIZE, "%lf", value);
 5556              		.loc 1 1757 0
 5557 0008 8DED000B 		vstr.64	d0, [sp]
 5558 000c 074A     		ldr	r2, .L437
 5559 000e 4FF4A071 		mov	r1, #320
 5560              	.LVL816:
 5561 0012 02A8     		add	r0, sp, #8
 5562              	.LVL817:
 5563 0014 FFF7FEFF 		bl	snprintf
 5564              	.LVL818:
1758:./mqtt/source/mqtt.c ****     return Mqtt_AppendDPSubvalue(buf, name, dblbuf, bytes, 0);
 5565              		.loc 1 1758 0
 5566 0018 0023     		movs	r3, #0
 5567 001a 0093     		str	r3, [sp]
 5568 001c 0346     		mov	r3, r0
 5569 001e 02AA     		add	r2, sp, #8
 5570 0020 2946     		mov	r1, r5
 5571 0022 2046     		mov	r0, r4
 5572              	.LVL819:
 5573 0024 FFF7FEFF 		bl	Mqtt_AppendDPSubvalue
 5574              	.LVL820:
1759:./mqtt/source/mqtt.c **** }
 5575              		.loc 1 1759 0
 5576 0028 53B0     		add	sp, sp, #332
 5577              	.LCFI114:
 5578              		.cfi_def_cfa_offset 12
 5579              		@ sp needed
 5580 002a 30BD     		pop	{r4, r5, pc}
 5581              	.LVL821:
 5582              	.L438:
 5583              		.align	2
 5584              	.L437:
 5585 002c 88000000 		.word	.LC11
 5586              		.cfi_endproc
 5587              	.LFE55:
 5589              		.section	.text.Mqtt_AppendDPSubvalueString,"ax",%progbits
 5590              		.align	2
 5591              		.global	Mqtt_AppendDPSubvalueString
 5592              		.thumb
 5593              		.thumb_func
 5595              	Mqtt_AppendDPSubvalueString:
 5596              	.LFB56:
1760:./mqtt/source/mqtt.c **** 
1761:./mqtt/source/mqtt.c **** int Mqtt_AppendDPSubvalueString(struct MqttBuffer *buf, const char *name, const char *value)
1762:./mqtt/source/mqtt.c **** {
 5597              		.loc 1 1762 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 142


 5598              		.cfi_startproc
 5599              		@ args = 0, pretend = 0, frame = 0
 5600              		@ frame_needed = 0, uses_anonymous_args = 0
 5601              	.LVL822:
 5602 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5603              	.LCFI115:
 5604              		.cfi_def_cfa_offset 20
 5605              		.cfi_offset 4, -20
 5606              		.cfi_offset 5, -16
 5607              		.cfi_offset 6, -12
 5608              		.cfi_offset 7, -8
 5609              		.cfi_offset 14, -4
 5610 0002 83B0     		sub	sp, sp, #12
 5611              	.LCFI116:
 5612              		.cfi_def_cfa_offset 32
 5613 0004 0646     		mov	r6, r0
 5614 0006 0F46     		mov	r7, r1
1763:./mqtt/source/mqtt.c ****     size_t value_len;
1764:./mqtt/source/mqtt.c **** 
1765:./mqtt/source/mqtt.c ****     if(!value) {
 5615              		.loc 1 1765 0
 5616 0008 1446     		mov	r4, r2
 5617 000a 02B9     		cbnz	r2, .L440
1766:./mqtt/source/mqtt.c ****         value = "";
 5618              		.loc 1 1766 0
 5619 000c 0F4C     		ldr	r4, .L446
 5620              	.L440:
 5621              	.LVL823:
1767:./mqtt/source/mqtt.c ****     }
1768:./mqtt/source/mqtt.c **** 
1769:./mqtt/source/mqtt.c ****     value_len = strlen(value);
 5622              		.loc 1 1769 0
 5623 000e 2046     		mov	r0, r4
 5624              	.LVL824:
 5625 0010 FFF7FEFF 		bl	strlen
 5626              	.LVL825:
 5627 0014 0546     		mov	r5, r0
 5628              	.LVL826:
1770:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(value, value_len) != value_len) {
 5629              		.loc 1 1770 0
 5630 0016 0146     		mov	r1, r0
 5631 0018 2046     		mov	r0, r4
 5632              	.LVL827:
 5633 001a FFF7FEFF 		bl	Mqtt_CheckUtf8
 5634              	.LVL828:
 5635 001e 8542     		cmp	r5, r0
 5636 0020 0DD1     		bne	.L443
1771:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1772:./mqtt/source/mqtt.c ****     }
1773:./mqtt/source/mqtt.c **** 
1774:./mqtt/source/mqtt.c ****     if(Mqtt_HasIllegalCharacter(value, value_len)) {
 5637              		.loc 1 1774 0
 5638 0022 2946     		mov	r1, r5
 5639 0024 2046     		mov	r0, r4
 5640 0026 FFF7FEFF 		bl	Mqtt_HasIllegalCharacter
 5641              	.LVL829:
 5642 002a 58B9     		cbnz	r0, .L444
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 143


1775:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
1776:./mqtt/source/mqtt.c ****     }
1777:./mqtt/source/mqtt.c **** 
1778:./mqtt/source/mqtt.c ****     return Mqtt_AppendDPSubvalue(buf, name, value, value_len, 1);
 5643              		.loc 1 1778 0
 5644 002c 0123     		movs	r3, #1
 5645 002e 0093     		str	r3, [sp]
 5646 0030 2B46     		mov	r3, r5
 5647 0032 2246     		mov	r2, r4
 5648 0034 3946     		mov	r1, r7
 5649 0036 3046     		mov	r0, r6
 5650 0038 FFF7FEFF 		bl	Mqtt_AppendDPSubvalue
 5651              	.LVL830:
 5652 003c 04E0     		b	.L441
 5653              	.L443:
1771:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
 5654              		.loc 1 1771 0
 5655 003e 6FF00500 		mvn	r0, #5
 5656 0042 01E0     		b	.L441
 5657              	.L444:
1775:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
 5658              		.loc 1 1775 0
 5659 0044 6FF00400 		mvn	r0, #4
 5660              	.L441:
1779:./mqtt/source/mqtt.c **** }
 5661              		.loc 1 1779 0
 5662 0048 03B0     		add	sp, sp, #12
 5663              	.LCFI117:
 5664              		.cfi_def_cfa_offset 20
 5665              		@ sp needed
 5666 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 5667              	.LVL831:
 5668              	.L447:
 5669              		.align	2
 5670              	.L446:
 5671 004c 34000000 		.word	.LC4
 5672              		.cfi_endproc
 5673              	.LFE56:
 5675              		.section	.text.Mqtt_AppendDPStartSubobject,"ax",%progbits
 5676              		.align	2
 5677              		.global	Mqtt_AppendDPStartSubobject
 5678              		.thumb
 5679              		.thumb_func
 5681              	Mqtt_AppendDPStartSubobject:
 5682              	.LFB57:
1780:./mqtt/source/mqtt.c **** 
1781:./mqtt/source/mqtt.c **** int Mqtt_AppendDPStartSubobject(struct MqttBuffer *buf, const char *name)
1782:./mqtt/source/mqtt.c **** {
 5683              		.loc 1 1782 0
 5684              		.cfi_startproc
 5685              		@ args = 0, pretend = 0, frame = 0
 5686              		@ frame_needed = 0, uses_anonymous_args = 0
 5687              	.LVL832:
 5688 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5689              	.LCFI118:
 5690              		.cfi_def_cfa_offset 32
 5691              		.cfi_offset 4, -32
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 144


 5692              		.cfi_offset 5, -28
 5693              		.cfi_offset 6, -24
 5694              		.cfi_offset 7, -20
 5695              		.cfi_offset 8, -16
 5696              		.cfi_offset 9, -12
 5697              		.cfi_offset 10, -8
 5698              		.cfi_offset 14, -4
 5699 0004 0646     		mov	r6, r0
1783:./mqtt/source/mqtt.c ****     int err;
1784:./mqtt/source/mqtt.c ****     size_t name_len;
1785:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1786:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
1787:./mqtt/source/mqtt.c ****     char *cursor;
1788:./mqtt/source/mqtt.c **** 
1789:./mqtt/source/mqtt.c ****     if(!name) {
 5700              		.loc 1 1789 0
 5701 0006 0D46     		mov	r5, r1
 5702 0008 01B9     		cbnz	r1, .L449
1790:./mqtt/source/mqtt.c ****         name = "";
 5703              		.loc 1 1790 0
 5704 000a 264D     		ldr	r5, .L458
 5705              	.L449:
 5706              	.LVL833:
1791:./mqtt/source/mqtt.c ****     }
1792:./mqtt/source/mqtt.c **** 
1793:./mqtt/source/mqtt.c ****     name_len = strlen(name);
 5707              		.loc 1 1793 0
 5708 000c 2846     		mov	r0, r5
 5709              	.LVL834:
 5710 000e FFF7FEFF 		bl	strlen
 5711              	.LVL835:
 5712 0012 0446     		mov	r4, r0
 5713              	.LVL836:
1794:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(name, name_len) != name_len) {
 5714              		.loc 1 1794 0
 5715 0014 0146     		mov	r1, r0
 5716 0016 2846     		mov	r0, r5
 5717 0018 FFF7FEFF 		bl	Mqtt_CheckUtf8
 5718              	.LVL837:
 5719 001c 8442     		cmp	r4, r0
 5720 001e 30D1     		bne	.L452
1795:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1796:./mqtt/source/mqtt.c ****     }
1797:./mqtt/source/mqtt.c **** 
1798:./mqtt/source/mqtt.c ****     if(Mqtt_HasIllegalCharacter(name, name_len)) {
 5721              		.loc 1 1798 0
 5722 0020 2146     		mov	r1, r4
 5723 0022 2846     		mov	r0, r5
 5724 0024 FFF7FEFF 		bl	Mqtt_HasIllegalCharacter
 5725              	.LVL838:
 5726 0028 8146     		mov	r9, r0
 5727 002a 68BB     		cbnz	r0, .L453
1799:./mqtt/source/mqtt.c ****         return MQTTERR_ILLEGAL_CHARACTER;
1800:./mqtt/source/mqtt.c ****     }
1801:./mqtt/source/mqtt.c **** 
1802:./mqtt/source/mqtt.c ****     info = Mqtt_GetDataPointPktInfo(buf);
 5728              		.loc 1 1802 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 145


 5729 002c 3046     		mov	r0, r6
 5730 002e FFF7FEFF 		bl	Mqtt_GetDataPointPktInfo
 5731              	.LVL839:
1803:./mqtt/source/mqtt.c ****     if(!info) {
 5732              		.loc 1 1803 0
 5733 0032 60B3     		cbz	r0, .L454
1804:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1805:./mqtt/source/mqtt.c ****     }
1806:./mqtt/source/mqtt.c **** 
1807:./mqtt/source/mqtt.c ****     ++info->subobj_depth;
 5734              		.loc 1 1807 0
 5735 0034 B0F90230 		ldrsh	r3, [r0, #2]
 5736 0038 0133     		adds	r3, r3, #1
 5737 003a 4380     		strh	r3, [r0, #2]	@ movhi
1808:./mqtt/source/mqtt.c **** 
1809:./mqtt/source/mqtt.c ****     // 2 bytes for "" of name, 1 byte for : and 1 byte for {
1810:./mqtt/source/mqtt.c ****     ext = MqttBuffer_AllocExtent(buf, name_len + 4);
 5738              		.loc 1 1810 0
 5739 003c 211D     		adds	r1, r4, #4
 5740 003e 3046     		mov	r0, r6
 5741              	.LVL840:
 5742 0040 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 5743              	.LVL841:
1811:./mqtt/source/mqtt.c ****     if(!ext) {
 5744              		.loc 1 1811 0
 5745 0044 8046     		mov	r8, r0
 5746 0046 28B3     		cbz	r0, .L455
1812:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1813:./mqtt/source/mqtt.c ****     }
1814:./mqtt/source/mqtt.c ****     cursor = ext->payload;
 5747              		.loc 1 1814 0
 5748 0048 4368     		ldr	r3, [r0, #4]
 5749              	.LVL842:
1815:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 5750              		.loc 1 1815 0
 5751 004a 5F1C     		adds	r7, r3, #1
 5752              	.LVL843:
 5753 004c 4FF0220A 		mov	r10, #34
 5754 0050 83F800A0 		strb	r10, [r3]
1816:./mqtt/source/mqtt.c ****     memcpy(cursor, name, name_len);
 5755              		.loc 1 1816 0
 5756 0054 2246     		mov	r2, r4
 5757 0056 2946     		mov	r1, r5
 5758 0058 3846     		mov	r0, r7
 5759              	.LVL844:
 5760 005a FFF7FEFF 		bl	memcpy
 5761              	.LVL845:
1817:./mqtt/source/mqtt.c ****     cursor += name_len;
 5762              		.loc 1 1817 0
 5763 005e 3B19     		adds	r3, r7, r4
 5764              	.LVL846:
1818:./mqtt/source/mqtt.c ****     *(cursor++) = '\"';
 5765              		.loc 1 1818 0
 5766 0060 07F804A0 		strb	r10, [r7, r4]
 5767              	.LVL847:
1819:./mqtt/source/mqtt.c ****     *(cursor++) = ':';
 5768              		.loc 1 1819 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 146


 5769 0064 3A22     		movs	r2, #58
 5770 0066 5A70     		strb	r2, [r3, #1]
 5771              	.LVL848:
1820:./mqtt/source/mqtt.c ****     *(cursor++) = '{';
 5772              		.loc 1 1820 0
 5773 0068 7B22     		movs	r2, #123
 5774 006a 9A70     		strb	r2, [r3, #2]
1821:./mqtt/source/mqtt.c **** 
1822:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendLength(buf, ext->len))) {
 5775              		.loc 1 1822 0
 5776 006c D8F80010 		ldr	r1, [r8]
 5777 0070 3046     		mov	r0, r6
 5778 0072 FFF7FEFF 		bl	Mqtt_AppendLength
 5779              	.LVL849:
 5780 0076 80B9     		cbnz	r0, .L456
1823:./mqtt/source/mqtt.c ****         return err;
1824:./mqtt/source/mqtt.c ****     }
1825:./mqtt/source/mqtt.c **** 
1826:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 5781              		.loc 1 1826 0
 5782 0078 4146     		mov	r1, r8
 5783 007a 3046     		mov	r0, r6
 5784              	.LVL850:
 5785 007c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 5786              	.LVL851:
1827:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 5787              		.loc 1 1827 0
 5788 0080 0CE0     		b	.L450
 5789              	.LVL852:
 5790              	.L452:
1795:./mqtt/source/mqtt.c ****     }
 5791              		.loc 1 1795 0
 5792 0082 6FF00509 		mvn	r9, #5
 5793 0086 09E0     		b	.L450
 5794              	.L453:
1799:./mqtt/source/mqtt.c ****     }
 5795              		.loc 1 1799 0
 5796 0088 6FF00409 		mvn	r9, #4
 5797 008c 06E0     		b	.L450
 5798              	.LVL853:
 5799              	.L454:
1804:./mqtt/source/mqtt.c ****     }
 5800              		.loc 1 1804 0
 5801 008e 6FF00609 		mvn	r9, #6
 5802 0092 03E0     		b	.L450
 5803              	.LVL854:
 5804              	.L455:
1812:./mqtt/source/mqtt.c ****     }
 5805              		.loc 1 1812 0
 5806 0094 4FF0FF39 		mov	r9, #-1
 5807 0098 00E0     		b	.L450
 5808              	.LVL855:
 5809              	.L456:
1823:./mqtt/source/mqtt.c ****     }
 5810              		.loc 1 1823 0
 5811 009a 8146     		mov	r9, r0
 5812              	.LVL856:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 147


 5813              	.L450:
1828:./mqtt/source/mqtt.c **** }
 5814              		.loc 1 1828 0
 5815 009c 4846     		mov	r0, r9
 5816 009e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5817              	.LVL857:
 5818              	.L459:
 5819 00a2 00BF     		.align	2
 5820              	.L458:
 5821 00a4 34000000 		.word	.LC4
 5822              		.cfi_endproc
 5823              	.LFE57:
 5825              		.section	.text.Mqtt_AppendDPStartObject,"ax",%progbits
 5826              		.align	2
 5827              		.global	Mqtt_AppendDPStartObject
 5828              		.thumb
 5829              		.thumb_func
 5831              	Mqtt_AppendDPStartObject:
 5832              	.LFB51:
1650:./mqtt/source/mqtt.c ****     int err;
 5833              		.loc 1 1650 0
 5834              		.cfi_startproc
 5835              		@ args = 0, pretend = 0, frame = 24
 5836              		@ frame_needed = 0, uses_anonymous_args = 0
 5837              	.LVL858:
 5838 0000 70B5     		push	{r4, r5, r6, lr}
 5839              	.LCFI119:
 5840              		.cfi_def_cfa_offset 16
 5841              		.cfi_offset 4, -16
 5842              		.cfi_offset 5, -12
 5843              		.cfi_offset 6, -8
 5844              		.cfi_offset 14, -4
 5845 0002 86B0     		sub	sp, sp, #24
 5846              	.LCFI120:
 5847              		.cfi_def_cfa_offset 40
 5848 0004 0646     		mov	r6, r0
 5849 0006 1446     		mov	r4, r2
 5850 0008 1D46     		mov	r5, r3
1654:./mqtt/source/mqtt.c ****         return err;
 5851              		.loc 1 1654 0
 5852 000a FFF7FEFF 		bl	Mqtt_AppendDPStartSubobject
 5853              	.LVL859:
 5854 000e A8B9     		cbnz	r0, .L464
1658:./mqtt/source/mqtt.c ****         if(0 == Mqtt_FormatTime(ts, strtime)) {
 5855              		.loc 1 1658 0
 5856 0010 012C     		cmp	r4, #1
 5857 0012 75F10003 		sbcs	r3, r5, #0
 5858 0016 09DB     		blt	.L462
1659:./mqtt/source/mqtt.c ****             return MQTTERR_INTERNAL;
 5859              		.loc 1 1659 0
 5860 0018 6A46     		mov	r2, sp
 5861 001a 2046     		mov	r0, r4
 5862              	.LVL860:
 5863 001c 2946     		mov	r1, r5
 5864 001e FFF7FEFF 		bl	Mqtt_FormatTime
 5865              	.LVL861:
 5866 0022 60B1     		cbz	r0, .L465
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 148


1662:./mqtt/source/mqtt.c ****     }
 5867              		.loc 1 1662 0
 5868 0024 0023     		movs	r3, #0
 5869 0026 8DF81730 		strb	r3, [sp, #23]
 5870 002a 02E0     		b	.L463
 5871              	.LVL862:
 5872              	.L462:
1665:./mqtt/source/mqtt.c ****     }
 5873              		.loc 1 1665 0
 5874 002c 0023     		movs	r3, #0
 5875 002e 8DF80030 		strb	r3, [sp]
 5876              	.LVL863:
 5877              	.L463:
1668:./mqtt/source/mqtt.c **** }
 5878              		.loc 1 1668 0
 5879 0032 6946     		mov	r1, sp
 5880 0034 3046     		mov	r0, r6
 5881 0036 FFF7FEFF 		bl	Mqtt_AppendDPStartSubobject
 5882              	.LVL864:
 5883 003a 02E0     		b	.L461
 5884              	.LVL865:
 5885              	.L464:
 5886 003c 01E0     		b	.L461
 5887              	.LVL866:
 5888              	.L465:
1660:./mqtt/source/mqtt.c ****         }
 5889              		.loc 1 1660 0
 5890 003e 6FF00A00 		mvn	r0, #10
 5891              	.L461:
1669:./mqtt/source/mqtt.c **** 
 5892              		.loc 1 1669 0
 5893 0042 06B0     		add	sp, sp, #24
 5894              	.LCFI121:
 5895              		.cfi_def_cfa_offset 16
 5896              		@ sp needed
 5897 0044 70BD     		pop	{r4, r5, r6, pc}
 5898              		.cfi_endproc
 5899              	.LFE51:
 5901 0046 00BF     		.section	.text.Mqtt_AppendDPFinishSubobject,"ax",%progbits
 5902              		.align	2
 5903              		.global	Mqtt_AppendDPFinishSubobject
 5904              		.thumb
 5905              		.thumb_func
 5907              	Mqtt_AppendDPFinishSubobject:
 5908              	.LFB58:
1829:./mqtt/source/mqtt.c **** 
1830:./mqtt/source/mqtt.c **** int Mqtt_AppendDPFinishSubobject(struct MqttBuffer *buf)
1831:./mqtt/source/mqtt.c **** {
 5909              		.loc 1 1831 0
 5910              		.cfi_startproc
 5911              		@ args = 0, pretend = 0, frame = 0
 5912              		@ frame_needed = 0, uses_anonymous_args = 0
 5913              	.LVL867:
 5914 0000 38B5     		push	{r3, r4, r5, lr}
 5915              	.LCFI122:
 5916              		.cfi_def_cfa_offset 16
 5917              		.cfi_offset 3, -16
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 149


 5918              		.cfi_offset 4, -12
 5919              		.cfi_offset 5, -8
 5920              		.cfi_offset 14, -4
 5921 0002 0446     		mov	r4, r0
1832:./mqtt/source/mqtt.c ****     int err;
1833:./mqtt/source/mqtt.c ****     struct MqttExtent *ext;
1834:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
1835:./mqtt/source/mqtt.c **** 
1836:./mqtt/source/mqtt.c ****     info = Mqtt_GetDataPointPktInfo(buf);
 5922              		.loc 1 1836 0
 5923 0004 FFF7FEFF 		bl	Mqtt_GetDataPointPktInfo
 5924              	.LVL868:
1837:./mqtt/source/mqtt.c ****     if(!info) {
 5925              		.loc 1 1837 0
 5926 0008 80B3     		cbz	r0, .L471
1838:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1839:./mqtt/source/mqtt.c ****     }
1840:./mqtt/source/mqtt.c **** 
1841:./mqtt/source/mqtt.c ****     if(--info->subobj_depth < 0) {
 5927              		.loc 1 1841 0
 5928 000a B0F90230 		ldrsh	r3, [r0, #2]
 5929 000e 013B     		subs	r3, r3, #1
 5930 0010 1BB2     		sxth	r3, r3
 5931 0012 4380     		strh	r3, [r0, #2]	@ movhi
 5932 0014 002B     		cmp	r3, #0
 5933 0016 2CDB     		blt	.L472
1842:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_IN_SUBOBJECT;
1843:./mqtt/source/mqtt.c ****     }
1844:./mqtt/source/mqtt.c **** 
1845:./mqtt/source/mqtt.c ****     if('{' == buf->last_ext->payload[buf->last_ext->len - 1]) {
 5934              		.loc 1 1845 0
 5935 0018 6368     		ldr	r3, [r4, #4]
 5936 001a 5A68     		ldr	r2, [r3, #4]
 5937 001c 1B68     		ldr	r3, [r3]
 5938 001e 013B     		subs	r3, r3, #1
 5939 0020 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 5940 0022 7B29     		cmp	r1, #123
 5941 0024 0CD1     		bne	.L469
1846:./mqtt/source/mqtt.c ****         ext = MqttBuffer_AllocExtent(buf, 2);
 5942              		.loc 1 1846 0
 5943 0026 0221     		movs	r1, #2
 5944 0028 2046     		mov	r0, r4
 5945              	.LVL869:
 5946 002a FFF7FEFF 		bl	MqttBuffer_AllocExtent
 5947              	.LVL870:
1847:./mqtt/source/mqtt.c ****         if(!ext) {
 5948              		.loc 1 1847 0
 5949 002e 0546     		mov	r5, r0
 5950 0030 10B3     		cbz	r0, .L473
1848:./mqtt/source/mqtt.c ****             return MQTTERR_OUTOFMEMORY;
1849:./mqtt/source/mqtt.c ****         }
1850:./mqtt/source/mqtt.c **** 
1851:./mqtt/source/mqtt.c ****         ext->payload[0] = '}';
 5951              		.loc 1 1851 0
 5952 0032 4368     		ldr	r3, [r0, #4]
 5953 0034 7D22     		movs	r2, #125
 5954 0036 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 150


1852:./mqtt/source/mqtt.c ****         ext->payload[1] = ',';
 5955              		.loc 1 1852 0
 5956 0038 4368     		ldr	r3, [r0, #4]
 5957 003a 2C22     		movs	r2, #44
 5958 003c 5A70     		strb	r2, [r3, #1]
 5959 003e 0AE0     		b	.L470
 5960              	.LVL871:
 5961              	.L469:
1853:./mqtt/source/mqtt.c ****     }
1854:./mqtt/source/mqtt.c ****     else {
1855:./mqtt/source/mqtt.c ****         buf->last_ext->payload[buf->last_ext->len - 1] = '}';
 5962              		.loc 1 1855 0
 5963 0040 7D21     		movs	r1, #125
 5964 0042 D154     		strb	r1, [r2, r3]
1856:./mqtt/source/mqtt.c ****         ext = MqttBuffer_AllocExtent(buf, 1);
 5965              		.loc 1 1856 0
 5966 0044 0121     		movs	r1, #1
 5967 0046 2046     		mov	r0, r4
 5968              	.LVL872:
 5969 0048 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 5970              	.LVL873:
1857:./mqtt/source/mqtt.c ****         if(!ext) {
 5971              		.loc 1 1857 0
 5972 004c 0546     		mov	r5, r0
 5973 004e B0B1     		cbz	r0, .L474
1858:./mqtt/source/mqtt.c ****             return MQTTERR_OUTOFMEMORY;
1859:./mqtt/source/mqtt.c ****         }
1860:./mqtt/source/mqtt.c ****         ext->payload[0] = ',';
 5974              		.loc 1 1860 0
 5975 0050 4368     		ldr	r3, [r0, #4]
 5976 0052 2C22     		movs	r2, #44
 5977 0054 1A70     		strb	r2, [r3]
 5978              	.L470:
1861:./mqtt/source/mqtt.c ****     }
1862:./mqtt/source/mqtt.c **** 
1863:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_AppendLength(buf, ext->len))) {
 5979              		.loc 1 1863 0
 5980 0056 2968     		ldr	r1, [r5]
 5981 0058 2046     		mov	r0, r4
 5982              	.LVL874:
 5983 005a FFF7FEFF 		bl	Mqtt_AppendLength
 5984              	.LVL875:
 5985 005e 88B9     		cbnz	r0, .L475
1864:./mqtt/source/mqtt.c ****         return err;
1865:./mqtt/source/mqtt.c ****     }
1866:./mqtt/source/mqtt.c **** 
1867:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, ext);
 5986              		.loc 1 1867 0
 5987 0060 2946     		mov	r1, r5
 5988 0062 2046     		mov	r0, r4
 5989              	.LVL876:
 5990 0064 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 5991              	.LVL877:
1868:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 5992              		.loc 1 1868 0
 5993 0068 0020     		movs	r0, #0
 5994 006a 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 151


 5995              	.LVL878:
 5996              	.L471:
1838:./mqtt/source/mqtt.c ****     }
 5997              		.loc 1 1838 0
 5998 006c 6FF00600 		mvn	r0, #6
 5999              	.LVL879:
 6000 0070 38BD     		pop	{r3, r4, r5, pc}
 6001              	.LVL880:
 6002              	.L472:
1842:./mqtt/source/mqtt.c ****     }
 6003              		.loc 1 1842 0
 6004 0072 6FF00B00 		mvn	r0, #11
 6005              	.LVL881:
 6006 0076 38BD     		pop	{r3, r4, r5, pc}
 6007              	.LVL882:
 6008              	.L473:
1848:./mqtt/source/mqtt.c ****         }
 6009              		.loc 1 1848 0
 6010 0078 4FF0FF30 		mov	r0, #-1
 6011              	.LVL883:
 6012 007c 38BD     		pop	{r3, r4, r5, pc}
 6013              	.LVL884:
 6014              	.L474:
1858:./mqtt/source/mqtt.c ****         }
 6015              		.loc 1 1858 0
 6016 007e 4FF0FF30 		mov	r0, #-1
 6017              	.LVL885:
 6018 0082 38BD     		pop	{r3, r4, r5, pc}
 6019              	.LVL886:
 6020              	.L475:
1869:./mqtt/source/mqtt.c **** }
 6021              		.loc 1 1869 0
 6022 0084 38BD     		pop	{r3, r4, r5, pc}
 6023              		.cfi_endproc
 6024              	.LFE58:
 6026 0086 00BF     		.section	.text.Mqtt_AppendDPFinishObject,"ax",%progbits
 6027              		.align	2
 6028              		.global	Mqtt_AppendDPFinishObject
 6029              		.thumb
 6030              		.thumb_func
 6032              	Mqtt_AppendDPFinishObject:
 6033              	.LFB52:
1672:./mqtt/source/mqtt.c ****     int err;
 6034              		.loc 1 1672 0
 6035              		.cfi_startproc
 6036              		@ args = 0, pretend = 0, frame = 0
 6037              		@ frame_needed = 0, uses_anonymous_args = 0
 6038              	.LVL887:
 6039 0000 10B5     		push	{r4, lr}
 6040              	.LCFI123:
 6041              		.cfi_def_cfa_offset 8
 6042              		.cfi_offset 4, -8
 6043              		.cfi_offset 14, -4
 6044 0002 0446     		mov	r4, r0
1675:./mqtt/source/mqtt.c ****         return err;
 6045              		.loc 1 1675 0
 6046 0004 FFF7FEFF 		bl	Mqtt_AppendDPFinishSubobject
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 152


 6047              	.LVL888:
 6048 0008 18B9     		cbnz	r0, .L479
1679:./mqtt/source/mqtt.c **** }
 6049              		.loc 1 1679 0
 6050 000a 2046     		mov	r0, r4
 6051              	.LVL889:
 6052 000c FFF7FEFF 		bl	Mqtt_AppendDPFinishSubobject
 6053              	.LVL890:
 6054 0010 10BD     		pop	{r4, pc}
 6055              	.LVL891:
 6056              	.L479:
1680:./mqtt/source/mqtt.c **** 
 6057              		.loc 1 1680 0
 6058 0012 10BD     		pop	{r4, pc}
 6059              		.cfi_endproc
 6060              	.LFE52:
 6062              		.section	.text.Mqtt_PackDataPointFinish,"ax",%progbits
 6063              		.align	2
 6064              		.global	Mqtt_PackDataPointFinish
 6065              		.thumb
 6066              		.thumb_func
 6068              	Mqtt_PackDataPointFinish:
 6069              	.LFB59:
1870:./mqtt/source/mqtt.c **** 
1871:./mqtt/source/mqtt.c **** int Mqtt_PackDataPointFinish(struct MqttBuffer *buf)
1872:./mqtt/source/mqtt.c **** {
 6070              		.loc 1 1872 0
 6071              		.cfi_startproc
 6072              		@ args = 0, pretend = 0, frame = 0
 6073              		@ frame_needed = 0, uses_anonymous_args = 0
 6074              	.LVL892:
 6075 0000 38B5     		push	{r3, r4, r5, lr}
 6076              	.LCFI124:
 6077              		.cfi_def_cfa_offset 16
 6078              		.cfi_offset 3, -16
 6079              		.cfi_offset 4, -12
 6080              		.cfi_offset 5, -8
 6081              		.cfi_offset 14, -4
 6082 0002 0446     		mov	r4, r0
1873:./mqtt/source/mqtt.c ****     struct DataPointPktInfo *info;
1874:./mqtt/source/mqtt.c ****     struct MqttExtent *first_payload;
1875:./mqtt/source/mqtt.c ****     int err;
1876:./mqtt/source/mqtt.c **** 
1877:./mqtt/source/mqtt.c ****     info = Mqtt_GetDataPointPktInfo(buf);
 6083              		.loc 1 1877 0
 6084 0004 FFF7FEFF 		bl	Mqtt_GetDataPointPktInfo
 6085              	.LVL893:
1878:./mqtt/source/mqtt.c ****     if(!info) {
 6086              		.loc 1 1878 0
 6087 0008 48B3     		cbz	r0, .L484
1879:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1880:./mqtt/source/mqtt.c ****     }
1881:./mqtt/source/mqtt.c **** 
1882:./mqtt/source/mqtt.c ****     if(info->subobj_depth > 0) {
 6088              		.loc 1 1882 0
 6089 000a B0F90230 		ldrsh	r3, [r0, #2]
 6090 000e 002B     		cmp	r3, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 153


 6091 0010 28DC     		bgt	.L485
1883:./mqtt/source/mqtt.c ****         return MQTTERR_INCOMPLETE_SUBOBJECT;
1884:./mqtt/source/mqtt.c ****     }
1885:./mqtt/source/mqtt.c **** 
1886:./mqtt/source/mqtt.c ****     first_payload = buf->first_ext->next->next;
 6092              		.loc 1 1886 0
 6093 0012 2368     		ldr	r3, [r4]
 6094 0014 9B68     		ldr	r3, [r3, #8]
 6095 0016 9D68     		ldr	r5, [r3, #8]
 6096              	.LVL894:
1887:./mqtt/source/mqtt.c ****     first_payload->len = 2;
 6097              		.loc 1 1887 0
 6098 0018 0223     		movs	r3, #2
 6099 001a 2B60     		str	r3, [r5]
1888:./mqtt/source/mqtt.c **** 
1889:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != (err = Mqtt_EraseLength(buf, sizeof(struct DataPointPktInfo)))) {
 6100              		.loc 1 1889 0
 6101 001c 0421     		movs	r1, #4
 6102 001e 2046     		mov	r0, r4
 6103              	.LVL895:
 6104 0020 FFF7FEFF 		bl	Mqtt_EraseLength
 6105              	.LVL896:
 6106 0024 08BB     		cbnz	r0, .L486
1890:./mqtt/source/mqtt.c ****         return err;
1891:./mqtt/source/mqtt.c ****     }
1892:./mqtt/source/mqtt.c **** 
1893:./mqtt/source/mqtt.c ****     if(buf->last_ext != first_payload) {
 6107              		.loc 1 1893 0
 6108 0026 6368     		ldr	r3, [r4, #4]
 6109 0028 9D42     		cmp	r5, r3
 6110 002a 05D0     		beq	.L483
1894:./mqtt/source/mqtt.c ****         buf->last_ext->payload[buf->last_ext->len - 1] = '}';
 6111              		.loc 1 1894 0
 6112 002c 5A68     		ldr	r2, [r3, #4]
 6113 002e 1B68     		ldr	r3, [r3]
 6114 0030 013B     		subs	r3, r3, #1
 6115 0032 7D21     		movs	r1, #125
 6116 0034 D154     		strb	r1, [r2, r3]
 6117 0036 38BD     		pop	{r3, r4, r5, pc}
 6118              	.LVL897:
 6119              	.L483:
 6120              	.LBB11:
1895:./mqtt/source/mqtt.c ****     }
1896:./mqtt/source/mqtt.c ****     else {
1897:./mqtt/source/mqtt.c ****         struct MqttExtent *end_ext = MqttBuffer_AllocExtent(buf, 1);
 6121              		.loc 1 1897 0
 6122 0038 0121     		movs	r1, #1
 6123 003a 2046     		mov	r0, r4
 6124              	.LVL898:
 6125 003c FFF7FEFF 		bl	MqttBuffer_AllocExtent
 6126              	.LVL899:
1898:./mqtt/source/mqtt.c ****         if(!end_ext) {
 6127              		.loc 1 1898 0
 6128 0040 0546     		mov	r5, r0
 6129              	.LVL900:
 6130 0042 98B1     		cbz	r0, .L487
1899:./mqtt/source/mqtt.c ****             return MQTTERR_OUTOFMEMORY;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 154


1900:./mqtt/source/mqtt.c ****         }
1901:./mqtt/source/mqtt.c **** 
1902:./mqtt/source/mqtt.c ****         end_ext->payload[0] = '}';
 6131              		.loc 1 1902 0
 6132 0044 4368     		ldr	r3, [r0, #4]
 6133 0046 7D22     		movs	r2, #125
 6134 0048 1A70     		strb	r2, [r3]
1903:./mqtt/source/mqtt.c ****         MqttBuffer_AppendExtent(buf, end_ext);
 6135              		.loc 1 1903 0
 6136 004a 0146     		mov	r1, r0
 6137 004c 2046     		mov	r0, r4
 6138              	.LVL901:
 6139 004e FFF7FEFF 		bl	MqttBuffer_AppendExtent
 6140              	.LVL902:
1904:./mqtt/source/mqtt.c ****         err = Mqtt_AppendLength(buf, end_ext->len);
 6141              		.loc 1 1904 0
 6142 0052 2968     		ldr	r1, [r5]
 6143 0054 2046     		mov	r0, r4
 6144 0056 FFF7FEFF 		bl	Mqtt_AppendLength
 6145              	.LVL903:
1905:./mqtt/source/mqtt.c ****         if(MQTTERR_NOERROR != err) {
 6146              		.loc 1 1905 0
 6147 005a 50B1     		cbz	r0, .L488
 6148 005c 38BD     		pop	{r3, r4, r5, pc}
 6149              	.LVL904:
 6150              	.L484:
 6151              	.LBE11:
1879:./mqtt/source/mqtt.c ****     }
 6152              		.loc 1 1879 0
 6153 005e 6FF00600 		mvn	r0, #6
 6154              	.LVL905:
 6155 0062 38BD     		pop	{r3, r4, r5, pc}
 6156              	.LVL906:
 6157              	.L485:
1883:./mqtt/source/mqtt.c ****     }
 6158              		.loc 1 1883 0
 6159 0064 6FF00C00 		mvn	r0, #12
 6160              	.LVL907:
 6161 0068 38BD     		pop	{r3, r4, r5, pc}
 6162              	.LVL908:
 6163              	.L486:
 6164 006a 38BD     		pop	{r3, r4, r5, pc}
 6165              	.LVL909:
 6166              	.L487:
 6167              	.LBB12:
1899:./mqtt/source/mqtt.c ****         }
 6168              		.loc 1 1899 0
 6169 006c 4FF0FF30 		mov	r0, #-1
 6170              	.LVL910:
 6171 0070 38BD     		pop	{r3, r4, r5, pc}
 6172              	.LVL911:
 6173              	.L488:
 6174              	.LBE12:
1906:./mqtt/source/mqtt.c ****             return err;
1907:./mqtt/source/mqtt.c ****         }
1908:./mqtt/source/mqtt.c ****     }
1909:./mqtt/source/mqtt.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 155


1910:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 6175              		.loc 1 1910 0
 6176 0072 0020     		movs	r0, #0
 6177              	.LVL912:
1911:./mqtt/source/mqtt.c **** }
 6178              		.loc 1 1911 0
 6179 0074 38BD     		pop	{r3, r4, r5, pc}
 6180              		.cfi_endproc
 6181              	.LFE59:
 6183 0076 00BF     		.section	.text.Mqtt_PackDataPointByBinary,"ax",%progbits
 6184              		.align	2
 6185              		.global	Mqtt_PackDataPointByBinary
 6186              		.thumb
 6187              		.thumb_func
 6189              	Mqtt_PackDataPointByBinary:
 6190              	.LFB60:
1912:./mqtt/source/mqtt.c **** 
1913:./mqtt/source/mqtt.c **** int Mqtt_PackDataPointByBinary(struct MqttBuffer *buf, uint16_t pkt_id, const char *dsid,
1914:./mqtt/source/mqtt.c ****                                const char *desc, int64_t time, const char *bin, uint32_t size,
1915:./mqtt/source/mqtt.c ****                                enum MqttQosLevel qos, int retain, int own, int save)
1916:./mqtt/source/mqtt.c **** {
 6191              		.loc 1 1916 0
 6192              		.cfi_startproc
 6193              		@ args = 32, pretend = 0, frame = 8
 6194              		@ frame_needed = 0, uses_anonymous_args = 0
 6195              	.LVL913:
 6196 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6197              	.LCFI125:
 6198              		.cfi_def_cfa_offset 36
 6199              		.cfi_offset 4, -36
 6200              		.cfi_offset 5, -32
 6201              		.cfi_offset 6, -28
 6202              		.cfi_offset 7, -24
 6203              		.cfi_offset 8, -20
 6204              		.cfi_offset 9, -16
 6205              		.cfi_offset 10, -12
 6206              		.cfi_offset 11, -8
 6207              		.cfi_offset 14, -4
 6208 0004 87B0     		sub	sp, sp, #28
 6209              	.LCFI126:
 6210              		.cfi_def_cfa_offset 64
 6211 0006 9DF85060 		ldrb	r6, [sp, #80]	@ zero_extendqisi2
1917:./mqtt/source/mqtt.c ****     int err, pack_time;
1918:./mqtt/source/mqtt.c ****     struct MqttExtent *header_ext, *binary_ext;
1919:./mqtt/source/mqtt.c ****     size_t dsid_len, desc_len, header_len;
1920:./mqtt/source/mqtt.c ****     char *cursor;
1921:./mqtt/source/mqtt.c **** 
1922:./mqtt/source/mqtt.c ****     if(buf->first_ext || !dsid || !bin || (0 == size)) {
 6212              		.loc 1 1922 0
 6213 000a 0468     		ldr	r4, [r0]
 6214 000c 002C     		cmp	r4, #0
 6215 000e 40F0B980 		bne	.L501
 6216              		.loc 1 1922 0 is_stmt 0 discriminator 1
 6217 0012 002A     		cmp	r2, #0
 6218 0014 00F0B980 		beq	.L502
 6219              		.loc 1 1922 0 discriminator 2
 6220 0018 129C     		ldr	r4, [sp, #72]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 156


 6221 001a 002C     		cmp	r4, #0
 6222 001c 00F0B880 		beq	.L503
 6223              		.loc 1 1922 0 discriminator 3
 6224 0020 139C     		ldr	r4, [sp, #76]
 6225 0022 002C     		cmp	r4, #0
 6226 0024 00F0B780 		beq	.L504
 6227 0028 1D46     		mov	r5, r3
 6228 002a 9246     		mov	r10, r2
 6229 002c 0590     		str	r0, [sp, #20]
1923:./mqtt/source/mqtt.c ****         return MQTTERR_INVALID_PARAMETER;
1924:./mqtt/source/mqtt.c ****     }
1925:./mqtt/source/mqtt.c **** 
1926:./mqtt/source/mqtt.c ****     if(save) {
 6230              		.loc 1 1926 0 is_stmt 1
 6231 002e 179B     		ldr	r3, [sp, #92]
 6232              	.LVL914:
 6233 0030 4BB1     		cbz	r3, .L492
1927:./mqtt/source/mqtt.c ****         err = Mqtt_PackPublishPkt(buf, pkt_id, "$SAVEDATA", NULL, 0, qos, retain, 0);
 6234              		.loc 1 1927 0
 6235 0032 0023     		movs	r3, #0
 6236 0034 0393     		str	r3, [sp, #12]
 6237 0036 159A     		ldr	r2, [sp, #84]
 6238              	.LVL915:
 6239 0038 0292     		str	r2, [sp, #8]
 6240 003a 0196     		str	r6, [sp, #4]
 6241 003c 0093     		str	r3, [sp]
 6242 003e 604A     		ldr	r2, .L515
 6243 0040 FFF7FEFF 		bl	Mqtt_PackPublishPkt
 6244              	.LVL916:
 6245 0044 09E0     		b	.L493
 6246              	.LVL917:
 6247              	.L492:
1928:./mqtt/source/mqtt.c ****     }
1929:./mqtt/source/mqtt.c ****     else {
1930:./mqtt/source/mqtt.c ****         err = Mqtt_PackPublishPkt(buf, pkt_id, "$PASSDATA", NULL, 0, qos, retain, 0);
 6248              		.loc 1 1930 0
 6249 0046 0023     		movs	r3, #0
 6250 0048 0393     		str	r3, [sp, #12]
 6251 004a 159A     		ldr	r2, [sp, #84]
 6252              	.LVL918:
 6253 004c 0292     		str	r2, [sp, #8]
 6254 004e 0196     		str	r6, [sp, #4]
 6255 0050 0093     		str	r3, [sp]
 6256 0052 5C4A     		ldr	r2, .L515+4
 6257 0054 0598     		ldr	r0, [sp, #20]
 6258              	.LVL919:
 6259 0056 FFF7FEFF 		bl	Mqtt_PackPublishPkt
 6260              	.LVL920:
 6261              	.L493:
1931:./mqtt/source/mqtt.c ****     }
1932:./mqtt/source/mqtt.c **** 
1933:./mqtt/source/mqtt.c ****     if(err != MQTTERR_NOERROR) {
 6262              		.loc 1 1933 0
 6263 005a 0028     		cmp	r0, #0
 6264 005c 40F0AD80 		bne	.L491
1934:./mqtt/source/mqtt.c ****         return err;
1935:./mqtt/source/mqtt.c ****     }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 157


1936:./mqtt/source/mqtt.c **** 
1937:./mqtt/source/mqtt.c ****     dsid_len = strlen(dsid);
 6265              		.loc 1 1937 0
 6266 0060 5046     		mov	r0, r10
 6267              	.LVL921:
 6268 0062 FFF7FEFF 		bl	strlen
 6269              	.LVL922:
 6270 0066 8046     		mov	r8, r0
 6271              	.LVL923:
1938:./mqtt/source/mqtt.c ****     header_len = dsid_len + 2 + 1; // 2 bytes for the length of the header, 1 byte for type
 6272              		.loc 1 1938 0
 6273 0068 C61C     		adds	r6, r0, #3
 6274              	.LVL924:
1939:./mqtt/source/mqtt.c **** 
1940:./mqtt/source/mqtt.c ****     if(Mqtt_CheckUtf8(dsid, dsid_len) != dsid_len) {
 6275              		.loc 1 1940 0
 6276 006a 0146     		mov	r1, r0
 6277 006c 5046     		mov	r0, r10
 6278              	.LVL925:
 6279 006e FFF7FEFF 		bl	Mqtt_CheckUtf8
 6280              	.LVL926:
 6281 0072 8045     		cmp	r8, r0
 6282 0074 40F09280 		bne	.L506
 6283              	.LVL927:
1941:./mqtt/source/mqtt.c ****         return MQTTERR_NOT_UTF8;
1942:./mqtt/source/mqtt.c ****     }
1943:./mqtt/source/mqtt.c **** 
1944:./mqtt/source/mqtt.c ****     pack_time = 0;
1945:./mqtt/source/mqtt.c ****     desc_len = 0;
1946:./mqtt/source/mqtt.c ****     if(desc) {
 6284              		.loc 1 1946 0
 6285 0078 75B1     		cbz	r5, .L507
1947:./mqtt/source/mqtt.c ****         desc_len = strlen(desc);
 6286              		.loc 1 1947 0
 6287 007a 2846     		mov	r0, r5
 6288 007c FFF7FEFF 		bl	strlen
 6289              	.LVL928:
 6290 0080 8346     		mov	fp, r0
 6291              	.LVL929:
1948:./mqtt/source/mqtt.c ****         header_len += desc_len + 1; // 1 byte for privous split ','
 6292              		.loc 1 1948 0
 6293 0082 0644     		add	r6, r6, r0
 6294              	.LVL930:
 6295 0084 0136     		adds	r6, r6, #1
 6296              	.LVL931:
1949:./mqtt/source/mqtt.c **** 
1950:./mqtt/source/mqtt.c ****         if(Mqtt_CheckUtf8(desc, desc_len) != desc_len) {
 6297              		.loc 1 1950 0
 6298 0086 0146     		mov	r1, r0
 6299 0088 2846     		mov	r0, r5
 6300              	.LVL932:
 6301 008a FFF7FEFF 		bl	Mqtt_CheckUtf8
 6302              	.LVL933:
 6303 008e 8345     		cmp	fp, r0
 6304 0090 40F08780 		bne	.L508
1951:./mqtt/source/mqtt.c ****             return MQTTERR_NOT_UTF8;
1952:./mqtt/source/mqtt.c ****         }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 158


1953:./mqtt/source/mqtt.c **** 
1954:./mqtt/source/mqtt.c ****         pack_time = 1;
 6305              		.loc 1 1954 0
 6306 0094 0124     		movs	r4, #1
 6307 0096 02E0     		b	.L494
 6308              	.LVL934:
 6309              	.L507:
1945:./mqtt/source/mqtt.c ****     if(desc) {
 6310              		.loc 1 1945 0
 6311 0098 4FF0000B 		mov	fp, #0
1944:./mqtt/source/mqtt.c ****     desc_len = 0;
 6312              		.loc 1 1944 0
 6313 009c 5C46     		mov	r4, fp
 6314              	.LVL935:
 6315              	.L494:
1955:./mqtt/source/mqtt.c ****     }
1956:./mqtt/source/mqtt.c **** 
1957:./mqtt/source/mqtt.c ****     if(time > 0) {
 6316              		.loc 1 1957 0
 6317 009e DDE91023 		ldrd	r2, [sp, #64]
 6318 00a2 012A     		cmp	r2, #1
 6319 00a4 73F10003 		sbcs	r3, r3, #0
 6320 00a8 02DB     		blt	.L495
 6321              	.LVL936:
1958:./mqtt/source/mqtt.c ****         pack_time = 1;
1959:./mqtt/source/mqtt.c ****         header_len += FORMAT_TIME_STRING_SIZE + 1; // 1 byte for privous split ','
 6322              		.loc 1 1959 0
 6323 00aa 1836     		adds	r6, r6, #24
 6324              	.LVL937:
1958:./mqtt/source/mqtt.c ****         pack_time = 1;
 6325              		.loc 1 1958 0
 6326 00ac 0124     		movs	r4, #1
 6327 00ae 01E0     		b	.L496
 6328              	.LVL938:
 6329              	.L495:
1960:./mqtt/source/mqtt.c ****     }
1961:./mqtt/source/mqtt.c ****     else if(pack_time){
 6330              		.loc 1 1961 0
 6331 00b0 04B1     		cbz	r4, .L496
1962:./mqtt/source/mqtt.c ****         header_len += 1;
 6332              		.loc 1 1962 0
 6333 00b2 0136     		adds	r6, r6, #1
 6334              	.LVL939:
 6335              	.L496:
1963:./mqtt/source/mqtt.c ****     }
1964:./mqtt/source/mqtt.c **** 
1965:./mqtt/source/mqtt.c ****     header_len += 4; // 4 bytes is the length of the binary
 6336              		.loc 1 1965 0
 6337 00b4 0436     		adds	r6, r6, #4
 6338              	.LVL940:
1966:./mqtt/source/mqtt.c **** 
1967:./mqtt/source/mqtt.c ****     header_ext = MqttBuffer_AllocExtent(buf, header_len);
 6339              		.loc 1 1967 0
 6340 00b6 3146     		mov	r1, r6
 6341 00b8 0598     		ldr	r0, [sp, #20]
 6342 00ba FFF7FEFF 		bl	MqttBuffer_AllocExtent
 6343              	.LVL941:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 159


1968:./mqtt/source/mqtt.c ****     if(!header_ext) {
 6344              		.loc 1 1968 0
 6345 00be 0746     		mov	r7, r0
 6346 00c0 0028     		cmp	r0, #0
 6347 00c2 71D0     		beq	.L509
1969:./mqtt/source/mqtt.c ****         return MQTTERR_OUTOFMEMORY;
1970:./mqtt/source/mqtt.c ****     }
1971:./mqtt/source/mqtt.c **** 
1972:./mqtt/source/mqtt.c ****     cursor = header_ext->payload;
 6348              		.loc 1 1972 0
 6349 00c4 4168     		ldr	r1, [r0, #4]
 6350              	.LVL942:
1973:./mqtt/source/mqtt.c ****     *(cursor++) = MQTT_DPTYPE_BINARY;
 6351              		.loc 1 1973 0
 6352 00c6 8946     		mov	r9, r1
 6353 00c8 0423     		movs	r3, #4
 6354 00ca 09F8033B 		strb	r3, [r9], #3
1974:./mqtt/source/mqtt.c ****     Mqtt_WB16(header_len - 7, cursor);
 6355              		.loc 1 1974 0
 6356 00ce F01F     		subs	r0, r6, #7
 6357              	.LVL943:
 6358 00d0 0131     		adds	r1, r1, #1
 6359              	.LVL944:
 6360 00d2 80B2     		uxth	r0, r0
 6361 00d4 FFF7FEFF 		bl	Mqtt_WB16
 6362              	.LVL945:
1975:./mqtt/source/mqtt.c ****     cursor += 2;
1976:./mqtt/source/mqtt.c ****     memcpy(cursor, dsid, dsid_len);
 6363              		.loc 1 1976 0
 6364 00d8 4246     		mov	r2, r8
 6365 00da 5146     		mov	r1, r10
 6366 00dc 4846     		mov	r0, r9
 6367 00de FFF7FEFF 		bl	memcpy
 6368              	.LVL946:
1977:./mqtt/source/mqtt.c ****     cursor += dsid_len;
 6369              		.loc 1 1977 0
 6370 00e2 09EB080A 		add	r10, r9, r8
 6371              	.LVL947:
1978:./mqtt/source/mqtt.c **** 
1979:./mqtt/source/mqtt.c ****     if(pack_time) {
 6372              		.loc 1 1979 0
 6373 00e6 94B1     		cbz	r4, .L497
1980:./mqtt/source/mqtt.c ****         *(cursor++) = ',';
 6374              		.loc 1 1980 0
 6375 00e8 0AF10102 		add	r2, r10, #1
 6376              	.LVL948:
 6377 00ec 2C23     		movs	r3, #44
 6378 00ee 09F80830 		strb	r3, [r9, r8]
1981:./mqtt/source/mqtt.c ****         if(time > 0) {
 6379              		.loc 1 1981 0
 6380 00f2 DDE91034 		ldrd	r3, [sp, #64]
 6381 00f6 012B     		cmp	r3, #1
 6382 00f8 74F10003 		sbcs	r3, r4, #0
 6383 00fc 06DB     		blt	.L510
1982:./mqtt/source/mqtt.c ****             Mqtt_FormatTime(time, cursor);
 6384              		.loc 1 1982 0
 6385 00fe DDE91001 		ldrd	r0, [sp, #64]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 160


 6386 0102 FFF7FEFF 		bl	Mqtt_FormatTime
 6387              	.LVL949:
1983:./mqtt/source/mqtt.c ****             cursor += FORMAT_TIME_STRING_SIZE;
 6388              		.loc 1 1983 0
 6389 0106 0AF1180A 		add	r10, r10, #24
 6390              	.LVL950:
 6391 010a 00E0     		b	.L497
 6392              	.LVL951:
 6393              	.L510:
1980:./mqtt/source/mqtt.c ****         if(time > 0) {
 6394              		.loc 1 1980 0
 6395 010c 9246     		mov	r10, r2
 6396              	.LVL952:
 6397              	.L497:
1984:./mqtt/source/mqtt.c ****         }
1985:./mqtt/source/mqtt.c ****     }
1986:./mqtt/source/mqtt.c **** 
1987:./mqtt/source/mqtt.c ****     if(desc) {
 6398              		.loc 1 1987 0
 6399 010e 5DB1     		cbz	r5, .L498
1988:./mqtt/source/mqtt.c ****         *(cursor++) = ',';
 6400              		.loc 1 1988 0
 6401 0110 0AF10108 		add	r8, r10, #1
 6402              	.LVL953:
 6403 0114 2C23     		movs	r3, #44
 6404 0116 8AF80030 		strb	r3, [r10]
1989:./mqtt/source/mqtt.c ****         memcpy(cursor, desc, desc_len);
 6405              		.loc 1 1989 0
 6406 011a 5A46     		mov	r2, fp
 6407 011c 2946     		mov	r1, r5
 6408 011e 4046     		mov	r0, r8
 6409 0120 FFF7FEFF 		bl	memcpy
 6410              	.LVL954:
1990:./mqtt/source/mqtt.c ****         cursor += desc_len;
 6411              		.loc 1 1990 0
 6412 0124 08EB0B0A 		add	r10, r8, fp
 6413              	.LVL955:
 6414              	.L498:
1991:./mqtt/source/mqtt.c ****     }
1992:./mqtt/source/mqtt.c **** 
1993:./mqtt/source/mqtt.c ****     Mqtt_WB32(size, cursor);
 6415              		.loc 1 1993 0
 6416 0128 5146     		mov	r1, r10
 6417 012a 1398     		ldr	r0, [sp, #76]
 6418 012c FFF7FEFF 		bl	Mqtt_WB32
 6419              	.LVL956:
1994:./mqtt/source/mqtt.c **** 
1995:./mqtt/source/mqtt.c ****     if(own) {
 6420              		.loc 1 1995 0
 6421 0130 169B     		ldr	r3, [sp, #88]
 6422 0132 63B1     		cbz	r3, .L499
1996:./mqtt/source/mqtt.c ****         binary_ext = MqttBuffer_AllocExtent(buf, size);
 6423              		.loc 1 1996 0
 6424 0134 1399     		ldr	r1, [sp, #76]
 6425 0136 0598     		ldr	r0, [sp, #20]
 6426 0138 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 6427              	.LVL957:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 161


1997:./mqtt/source/mqtt.c ****         if(!binary_ext) {
 6428              		.loc 1 1997 0
 6429 013c 0546     		mov	r5, r0
 6430              	.LVL958:
 6431 013e 0028     		cmp	r0, #0
 6432 0140 35D0     		beq	.L511
1998:./mqtt/source/mqtt.c ****             return MQTTERR_OUTOFMEMORY;
1999:./mqtt/source/mqtt.c ****         }
2000:./mqtt/source/mqtt.c **** 
2001:./mqtt/source/mqtt.c ****         memcpy(binary_ext->payload, bin, size);
 6433              		.loc 1 2001 0
 6434 0142 139A     		ldr	r2, [sp, #76]
 6435 0144 1299     		ldr	r1, [sp, #72]
 6436 0146 4068     		ldr	r0, [r0, #4]
 6437              	.LVL959:
 6438 0148 FFF7FEFF 		bl	memcpy
 6439              	.LVL960:
 6440 014c 09E0     		b	.L500
 6441              	.LVL961:
 6442              	.L499:
2002:./mqtt/source/mqtt.c ****     }
2003:./mqtt/source/mqtt.c ****     else {
2004:./mqtt/source/mqtt.c ****         binary_ext = MqttBuffer_AllocExtent(buf, 0);
 6443              		.loc 1 2004 0
 6444 014e 0021     		movs	r1, #0
 6445 0150 0598     		ldr	r0, [sp, #20]
 6446 0152 FFF7FEFF 		bl	MqttBuffer_AllocExtent
 6447              	.LVL962:
2005:./mqtt/source/mqtt.c ****         if(!binary_ext) {
 6448              		.loc 1 2005 0
 6449 0156 0546     		mov	r5, r0
 6450              	.LVL963:
 6451 0158 60B3     		cbz	r0, .L512
2006:./mqtt/source/mqtt.c ****             return MQTTERR_OUTOFMEMORY;
2007:./mqtt/source/mqtt.c ****         }
2008:./mqtt/source/mqtt.c **** 
2009:./mqtt/source/mqtt.c ****         binary_ext->payload = (char*)bin;
 6452              		.loc 1 2009 0
 6453 015a 129B     		ldr	r3, [sp, #72]
 6454 015c 4360     		str	r3, [r0, #4]
2010:./mqtt/source/mqtt.c ****         binary_ext->len = (uint32_t)size;
 6455              		.loc 1 2010 0
 6456 015e 139B     		ldr	r3, [sp, #76]
 6457 0160 0360     		str	r3, [r0]
 6458              	.LVL964:
 6459              	.L500:
2011:./mqtt/source/mqtt.c ****     }
2012:./mqtt/source/mqtt.c **** 
2013:./mqtt/source/mqtt.c ****     err = Mqtt_AppendLength(buf, header_len + size);
 6460              		.loc 1 2013 0
 6461 0162 139B     		ldr	r3, [sp, #76]
 6462 0164 9919     		adds	r1, r3, r6
 6463 0166 0598     		ldr	r0, [sp, #20]
 6464 0168 FFF7FEFF 		bl	Mqtt_AppendLength
 6465              	.LVL965:
2014:./mqtt/source/mqtt.c ****     if(MQTTERR_NOERROR != err) {
 6466              		.loc 1 2014 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 162


 6467 016c 28BB     		cbnz	r0, .L513
2015:./mqtt/source/mqtt.c ****         return err;
2016:./mqtt/source/mqtt.c ****     }
2017:./mqtt/source/mqtt.c **** 
2018:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, header_ext);
 6468              		.loc 1 2018 0
 6469 016e 3946     		mov	r1, r7
 6470 0170 059C     		ldr	r4, [sp, #20]
 6471              	.LVL966:
 6472 0172 2046     		mov	r0, r4
 6473              	.LVL967:
 6474 0174 FFF7FEFF 		bl	MqttBuffer_AppendExtent
 6475              	.LVL968:
2019:./mqtt/source/mqtt.c ****     MqttBuffer_AppendExtent(buf, binary_ext);
 6476              		.loc 1 2019 0
 6477 0178 2946     		mov	r1, r5
 6478 017a 2046     		mov	r0, r4
 6479 017c FFF7FEFF 		bl	MqttBuffer_AppendExtent
 6480              	.LVL969:
2020:./mqtt/source/mqtt.c ****     return MQTTERR_NOERROR;
 6481              		.loc 1 2020 0
 6482 0180 0020     		movs	r0, #0
 6483 0182 1AE0     		b	.L491
 6484              	.LVL970:
 6485              	.L501:
1923:./mqtt/source/mqtt.c ****     }
 6486              		.loc 1 1923 0
 6487 0184 6FF00600 		mvn	r0, #6
 6488              	.LVL971:
 6489 0188 17E0     		b	.L491
 6490              	.LVL972:
 6491              	.L502:
 6492 018a 6FF00600 		mvn	r0, #6
 6493              	.LVL973:
 6494 018e 14E0     		b	.L491
 6495              	.LVL974:
 6496              	.L503:
 6497 0190 6FF00600 		mvn	r0, #6
 6498              	.LVL975:
 6499 0194 11E0     		b	.L491
 6500              	.LVL976:
 6501              	.L504:
 6502 0196 6FF00600 		mvn	r0, #6
 6503              	.LVL977:
 6504 019a 0EE0     		b	.L491
 6505              	.LVL978:
 6506              	.L506:
1941:./mqtt/source/mqtt.c ****     }
 6507              		.loc 1 1941 0
 6508 019c 6FF00500 		mvn	r0, #5
 6509 01a0 0BE0     		b	.L491
 6510              	.LVL979:
 6511              	.L508:
1951:./mqtt/source/mqtt.c ****         }
 6512              		.loc 1 1951 0
 6513 01a2 6FF00500 		mvn	r0, #5
 6514 01a6 08E0     		b	.L491
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 163


 6515              	.LVL980:
 6516              	.L509:
1969:./mqtt/source/mqtt.c ****     }
 6517              		.loc 1 1969 0
 6518 01a8 4FF0FF30 		mov	r0, #-1
 6519              	.LVL981:
 6520 01ac 05E0     		b	.L491
 6521              	.LVL982:
 6522              	.L511:
1998:./mqtt/source/mqtt.c ****         }
 6523              		.loc 1 1998 0
 6524 01ae 4FF0FF30 		mov	r0, #-1
 6525              	.LVL983:
 6526 01b2 02E0     		b	.L491
 6527              	.LVL984:
 6528              	.L512:
2006:./mqtt/source/mqtt.c ****         }
 6529              		.loc 1 2006 0
 6530 01b4 4FF0FF30 		mov	r0, #-1
 6531              	.LVL985:
 6532 01b8 FFE7     		b	.L491
 6533              	.LVL986:
 6534              	.L513:
 6535              	.L491:
2021:./mqtt/source/mqtt.c **** }
 6536              		.loc 1 2021 0
 6537 01ba 07B0     		add	sp, sp, #28
 6538              	.LCFI127:
 6539              		.cfi_def_cfa_offset 36
 6540              		@ sp needed
 6541 01bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6542              	.LVL987:
 6543              	.L516:
 6544              		.align	2
 6545              	.L515:
 6546 01c0 8C000000 		.word	.LC12
 6547 01c4 98000000 		.word	.LC13
 6548              		.cfi_endproc
 6549              	.LFE60:
 6551              		.section	.rodata.__FUNCTION__.6478,"a",%progbits
 6552              		.align	2
 6553              		.set	.LANCHOR1,. + 0
 6556              	__FUNCTION__.6478:
 6557 0000 4D717474 		.ascii	"Mqtt_RecvPkt\000"
 6557      5F526563 
 6557      76506B74 
 6557      00
 6558              		.section	.rodata.str1.4,"aMS",%progbits,1
 6559              		.align	2
 6560              	.LC0:
 6561 0000 25592D25 		.ascii	"%Y-%m-%d %H:%M:%S\000"
 6561      6D2D2564 
 6561      2025483A 
 6561      254D3A25 
 6561      5300
 6562 0012 0000     		.space	2
 6563              	.LC1:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 164


 6564 0014 2E253033 		.ascii	".%03d\000"
 6564      6400
 6565 001a 0000     		.space	2
 6566              	.LC2:
 6567 001c 6265666F 		.ascii	"before send\015\000"
 6567      72652073 
 6567      656E640D 
 6567      00
 6568 0029 000000   		.space	3
 6569              	.LC3:
 6570 002c 24637265 		.ascii	"$creq\000"
 6570      7100
 6571 0032 0000     		.space	2
 6572              	.LC4:
 6573 0034 00       		.ascii	"\000"
 6574 0035 000000   		.space	3
 6575              	.LC5:
 6576 0038 3C25733E 		.ascii	"<%s>: rcv %d data from OneNET\015\012\000"
 6576      3A207263 
 6576      76202564 
 6576      20646174 
 6576      61206672 
 6577              	.LC6:
 6578 0058 24637273 		.ascii	"$crsp/\000"
 6578      702F00
 6579 005f 00       		.space	1
 6580              	.LC7:
 6581 0060 74657374 		.ascii	"test!!!!!!!Qos: %d\015\012\000"
 6581      21212121 
 6581      21212151 
 6581      6F733A20 
 6581      25640D0A 
 6582 0075 000000   		.space	3
 6583              	.LC8:
 6584 0078 24647000 		.ascii	"$dp\000"
 6585              	.LC9:
 6586 007c 24637273 		.ascii	"$crsp\000"
 6586      7000
 6587 0082 0000     		.space	2
 6588              	.LC10:
 6589 0084 256400   		.ascii	"%d\000"
 6590 0087 00       		.space	1
 6591              	.LC11:
 6592 0088 256C6600 		.ascii	"%lf\000"
 6593              	.LC12:
 6594 008c 24534156 		.ascii	"$SAVEDATA\000"
 6594      45444154 
 6594      4100
 6595 0096 0000     		.space	2
 6596              	.LC13:
 6597 0098 24504153 		.ascii	"$PASSDATA\000"
 6597      53444154 
 6597      4100
 6598              		.section	.rodata.Mqtt_TrailingBytesForUTF8,"a",%progbits
 6599              		.align	2
 6600              		.set	.LANCHOR0,. + 0
 6603              	Mqtt_TrailingBytesForUTF8:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 165


 6604 0000 00       		.byte	0
 6605 0001 00       		.byte	0
 6606 0002 00       		.byte	0
 6607 0003 00       		.byte	0
 6608 0004 00       		.byte	0
 6609 0005 00       		.byte	0
 6610 0006 00       		.byte	0
 6611 0007 00       		.byte	0
 6612 0008 00       		.byte	0
 6613 0009 00       		.byte	0
 6614 000a 00       		.byte	0
 6615 000b 00       		.byte	0
 6616 000c 00       		.byte	0
 6617 000d 00       		.byte	0
 6618 000e 00       		.byte	0
 6619 000f 00       		.byte	0
 6620 0010 00       		.byte	0
 6621 0011 00       		.byte	0
 6622 0012 00       		.byte	0
 6623 0013 00       		.byte	0
 6624 0014 00       		.byte	0
 6625 0015 00       		.byte	0
 6626 0016 00       		.byte	0
 6627 0017 00       		.byte	0
 6628 0018 00       		.byte	0
 6629 0019 00       		.byte	0
 6630 001a 00       		.byte	0
 6631 001b 00       		.byte	0
 6632 001c 00       		.byte	0
 6633 001d 00       		.byte	0
 6634 001e 00       		.byte	0
 6635 001f 00       		.byte	0
 6636 0020 00       		.byte	0
 6637 0021 00       		.byte	0
 6638 0022 00       		.byte	0
 6639 0023 00       		.byte	0
 6640 0024 00       		.byte	0
 6641 0025 00       		.byte	0
 6642 0026 00       		.byte	0
 6643 0027 00       		.byte	0
 6644 0028 00       		.byte	0
 6645 0029 00       		.byte	0
 6646 002a 00       		.byte	0
 6647 002b 00       		.byte	0
 6648 002c 00       		.byte	0
 6649 002d 00       		.byte	0
 6650 002e 00       		.byte	0
 6651 002f 00       		.byte	0
 6652 0030 00       		.byte	0
 6653 0031 00       		.byte	0
 6654 0032 00       		.byte	0
 6655 0033 00       		.byte	0
 6656 0034 00       		.byte	0
 6657 0035 00       		.byte	0
 6658 0036 00       		.byte	0
 6659 0037 00       		.byte	0
 6660 0038 00       		.byte	0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 166


 6661 0039 00       		.byte	0
 6662 003a 00       		.byte	0
 6663 003b 00       		.byte	0
 6664 003c 00       		.byte	0
 6665 003d 00       		.byte	0
 6666 003e 00       		.byte	0
 6667 003f 00       		.byte	0
 6668 0040 00       		.byte	0
 6669 0041 00       		.byte	0
 6670 0042 00       		.byte	0
 6671 0043 00       		.byte	0
 6672 0044 00       		.byte	0
 6673 0045 00       		.byte	0
 6674 0046 00       		.byte	0
 6675 0047 00       		.byte	0
 6676 0048 00       		.byte	0
 6677 0049 00       		.byte	0
 6678 004a 00       		.byte	0
 6679 004b 00       		.byte	0
 6680 004c 00       		.byte	0
 6681 004d 00       		.byte	0
 6682 004e 00       		.byte	0
 6683 004f 00       		.byte	0
 6684 0050 00       		.byte	0
 6685 0051 00       		.byte	0
 6686 0052 00       		.byte	0
 6687 0053 00       		.byte	0
 6688 0054 00       		.byte	0
 6689 0055 00       		.byte	0
 6690 0056 00       		.byte	0
 6691 0057 00       		.byte	0
 6692 0058 00       		.byte	0
 6693 0059 00       		.byte	0
 6694 005a 00       		.byte	0
 6695 005b 00       		.byte	0
 6696 005c 00       		.byte	0
 6697 005d 00       		.byte	0
 6698 005e 00       		.byte	0
 6699 005f 00       		.byte	0
 6700 0060 00       		.byte	0
 6701 0061 00       		.byte	0
 6702 0062 00       		.byte	0
 6703 0063 00       		.byte	0
 6704 0064 00       		.byte	0
 6705 0065 00       		.byte	0
 6706 0066 00       		.byte	0
 6707 0067 00       		.byte	0
 6708 0068 00       		.byte	0
 6709 0069 00       		.byte	0
 6710 006a 00       		.byte	0
 6711 006b 00       		.byte	0
 6712 006c 00       		.byte	0
 6713 006d 00       		.byte	0
 6714 006e 00       		.byte	0
 6715 006f 00       		.byte	0
 6716 0070 00       		.byte	0
 6717 0071 00       		.byte	0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 167


 6718 0072 00       		.byte	0
 6719 0073 00       		.byte	0
 6720 0074 00       		.byte	0
 6721 0075 00       		.byte	0
 6722 0076 00       		.byte	0
 6723 0077 00       		.byte	0
 6724 0078 00       		.byte	0
 6725 0079 00       		.byte	0
 6726 007a 00       		.byte	0
 6727 007b 00       		.byte	0
 6728 007c 00       		.byte	0
 6729 007d 00       		.byte	0
 6730 007e 00       		.byte	0
 6731 007f 00       		.byte	0
 6732 0080 00       		.byte	0
 6733 0081 00       		.byte	0
 6734 0082 00       		.byte	0
 6735 0083 00       		.byte	0
 6736 0084 00       		.byte	0
 6737 0085 00       		.byte	0
 6738 0086 00       		.byte	0
 6739 0087 00       		.byte	0
 6740 0088 00       		.byte	0
 6741 0089 00       		.byte	0
 6742 008a 00       		.byte	0
 6743 008b 00       		.byte	0
 6744 008c 00       		.byte	0
 6745 008d 00       		.byte	0
 6746 008e 00       		.byte	0
 6747 008f 00       		.byte	0
 6748 0090 00       		.byte	0
 6749 0091 00       		.byte	0
 6750 0092 00       		.byte	0
 6751 0093 00       		.byte	0
 6752 0094 00       		.byte	0
 6753 0095 00       		.byte	0
 6754 0096 00       		.byte	0
 6755 0097 00       		.byte	0
 6756 0098 00       		.byte	0
 6757 0099 00       		.byte	0
 6758 009a 00       		.byte	0
 6759 009b 00       		.byte	0
 6760 009c 00       		.byte	0
 6761 009d 00       		.byte	0
 6762 009e 00       		.byte	0
 6763 009f 00       		.byte	0
 6764 00a0 00       		.byte	0
 6765 00a1 00       		.byte	0
 6766 00a2 00       		.byte	0
 6767 00a3 00       		.byte	0
 6768 00a4 00       		.byte	0
 6769 00a5 00       		.byte	0
 6770 00a6 00       		.byte	0
 6771 00a7 00       		.byte	0
 6772 00a8 00       		.byte	0
 6773 00a9 00       		.byte	0
 6774 00aa 00       		.byte	0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 168


 6775 00ab 00       		.byte	0
 6776 00ac 00       		.byte	0
 6777 00ad 00       		.byte	0
 6778 00ae 00       		.byte	0
 6779 00af 00       		.byte	0
 6780 00b0 00       		.byte	0
 6781 00b1 00       		.byte	0
 6782 00b2 00       		.byte	0
 6783 00b3 00       		.byte	0
 6784 00b4 00       		.byte	0
 6785 00b5 00       		.byte	0
 6786 00b6 00       		.byte	0
 6787 00b7 00       		.byte	0
 6788 00b8 00       		.byte	0
 6789 00b9 00       		.byte	0
 6790 00ba 00       		.byte	0
 6791 00bb 00       		.byte	0
 6792 00bc 00       		.byte	0
 6793 00bd 00       		.byte	0
 6794 00be 00       		.byte	0
 6795 00bf 00       		.byte	0
 6796 00c0 01       		.byte	1
 6797 00c1 01       		.byte	1
 6798 00c2 01       		.byte	1
 6799 00c3 01       		.byte	1
 6800 00c4 01       		.byte	1
 6801 00c5 01       		.byte	1
 6802 00c6 01       		.byte	1
 6803 00c7 01       		.byte	1
 6804 00c8 01       		.byte	1
 6805 00c9 01       		.byte	1
 6806 00ca 01       		.byte	1
 6807 00cb 01       		.byte	1
 6808 00cc 01       		.byte	1
 6809 00cd 01       		.byte	1
 6810 00ce 01       		.byte	1
 6811 00cf 01       		.byte	1
 6812 00d0 01       		.byte	1
 6813 00d1 01       		.byte	1
 6814 00d2 01       		.byte	1
 6815 00d3 01       		.byte	1
 6816 00d4 01       		.byte	1
 6817 00d5 01       		.byte	1
 6818 00d6 01       		.byte	1
 6819 00d7 01       		.byte	1
 6820 00d8 01       		.byte	1
 6821 00d9 01       		.byte	1
 6822 00da 01       		.byte	1
 6823 00db 01       		.byte	1
 6824 00dc 01       		.byte	1
 6825 00dd 01       		.byte	1
 6826 00de 01       		.byte	1
 6827 00df 01       		.byte	1
 6828 00e0 02       		.byte	2
 6829 00e1 02       		.byte	2
 6830 00e2 02       		.byte	2
 6831 00e3 02       		.byte	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 169


 6832 00e4 02       		.byte	2
 6833 00e5 02       		.byte	2
 6834 00e6 02       		.byte	2
 6835 00e7 02       		.byte	2
 6836 00e8 02       		.byte	2
 6837 00e9 02       		.byte	2
 6838 00ea 02       		.byte	2
 6839 00eb 02       		.byte	2
 6840 00ec 02       		.byte	2
 6841 00ed 02       		.byte	2
 6842 00ee 02       		.byte	2
 6843 00ef 02       		.byte	2
 6844 00f0 03       		.byte	3
 6845 00f1 03       		.byte	3
 6846 00f2 03       		.byte	3
 6847 00f3 03       		.byte	3
 6848 00f4 03       		.byte	3
 6849 00f5 03       		.byte	3
 6850 00f6 03       		.byte	3
 6851 00f7 03       		.byte	3
 6852 00f8 04       		.byte	4
 6853 00f9 04       		.byte	4
 6854 00fa 04       		.byte	4
 6855 00fb 04       		.byte	4
 6856 00fc 05       		.byte	5
 6857 00fd 05       		.byte	5
 6858 00fe 05       		.byte	5
 6859 00ff 05       		.byte	5
 6860              		.text
 6861              	.Letext0:
 6862              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 6863              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 6864              		.file 4 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\
 6865              		.file 5 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_timeval.h"
 6866              		.file 6 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\time.h"
 6867              		.file 7 "mqtt/include/config.h"
 6868              		.file 8 "mqtt/include/mqtt_buffer.h"
 6869              		.file 9 "mqtt/include/mqtt.h"
 6870              		.file 10 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\ctype.h"
 6871              		.file 11 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\string.h"
 6872              		.file 12 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\stdio.h"
 6873              		.file 13 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\stdlib.h"
 6874              		.file 14 "<built-in>"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 170


DEFINED SYMBOLS
                            *ABS*:00000000 mqtt.c
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:22     .text.Mqtt_IsLegalUtf8:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:26     .text.Mqtt_IsLegalUtf8:00000000 Mqtt_IsLegalUtf8
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:45     .text.Mqtt_IsLegalUtf8:0000000c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:49     .text.Mqtt_IsLegalUtf8:00000010 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:97     .text.Mqtt_IsLegalUtf8:0000004a $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:217    .text.Mqtt_CheckUtf8:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:221    .text.Mqtt_CheckUtf8:00000000 Mqtt_CheckUtf8
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:291    .text.Mqtt_CheckUtf8:00000038 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:296    .text.Mqtt_RB16:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:301    .text.Mqtt_RB16:00000000 Mqtt_RB16
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:320    .text.Mqtt_RB64:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:325    .text.Mqtt_RB64:00000000 Mqtt_RB64
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:407    .text.Mqtt_WB8:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:412    .text.Mqtt_WB8:00000000 Mqtt_WB8
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:427    .text.Mqtt_WB16:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:432    .text.Mqtt_WB16:00000000 Mqtt_WB16
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:450    .text.Mqtt_PackPubRelPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:454    .text.Mqtt_PackPubRelPkt:00000000 Mqtt_PackPubRelPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:519    .text.Mqtt_PackPubCompPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:523    .text.Mqtt_PackPubCompPkt:00000000 Mqtt_PackPubCompPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:603    .text.Mqtt_PackPubRecPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:607    .text.Mqtt_PackPubRecPkt:00000000 Mqtt_PackPubRecPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:687    .text.Mqtt_PackPubAckPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:691    .text.Mqtt_PackPubAckPkt:00000000 Mqtt_PackPubAckPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:771    .text.Mqtt_WB32:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:776    .text.Mqtt_WB32:00000000 Mqtt_WB32
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:800    .text.Mqtt_ReadLength:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:805    .text.Mqtt_ReadLength:00000000 Mqtt_ReadLength
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:882    .text.Mqtt_DumpLength:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:887    .text.Mqtt_DumpLength:00000000 Mqtt_DumpLength
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:934    .text.Mqtt_AppendLength:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:939    .text.Mqtt_AppendLength:00000000 Mqtt_AppendLength
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1005   .text.Mqtt_EraseLength:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1010   .text.Mqtt_EraseLength:00000000 Mqtt_EraseLength
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1085   .text.Mqtt_PktWriteString:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1090   .text.Mqtt_PktWriteString:00000000 Mqtt_PktWriteString
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1131   .text.Mqtt_CheckClentIdentifier:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1136   .text.Mqtt_CheckClentIdentifier:00000000 Mqtt_CheckClentIdentifier
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1186   .text.Mqtt_GetDataPointPktInfo:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1191   .text.Mqtt_GetDataPointPktInfo:00000000 Mqtt_GetDataPointPktInfo
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1280   .text.Mqtt_GetDataPointPktInfo:0000004c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1285   .text.Mqtt_HasIllegalCharacter:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1290   .text.Mqtt_HasIllegalCharacter:00000000 Mqtt_HasIllegalCharacter
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1306   .text.Mqtt_AppendDPSubvalue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1310   .text.Mqtt_AppendDPSubvalue:00000000 Mqtt_AppendDPSubvalue
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1501   .text.Mqtt_FormatTime:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1506   .text.Mqtt_FormatTime:00000000 Mqtt_FormatTime
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1584   .text.Mqtt_FormatTime:00000054 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1591   .text.Mqtt_AppendDP:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1595   .text.Mqtt_AppendDP:00000000 Mqtt_AppendDP
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1870   .text.Mqtt_HandlePingResp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1875   .text.Mqtt_HandlePingResp:00000000 Mqtt_HandlePingResp
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1919   .text.Mqtt_HandleConnAck:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1924   .text.Mqtt_HandleConnAck:00000000 Mqtt_HandleConnAck
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:1995   .text.Mqtt_HandlePubAck:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 171


C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2000   .text.Mqtt_HandlePubAck:00000000 Mqtt_HandlePubAck
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2066   .text.Mqtt_HandlePubComp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2071   .text.Mqtt_HandlePubComp:00000000 Mqtt_HandlePubComp
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2137   .text.Mqtt_HandleSubAck:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2142   .text.Mqtt_HandleSubAck:00000000 Mqtt_HandleSubAck
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2249   .text.Mqtt_HandleUnsubAck:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2254   .text.Mqtt_HandleUnsubAck:00000000 Mqtt_HandleUnsubAck
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2320   .text.Mqtt_InitContext:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2325   .text.Mqtt_InitContext:00000000 Mqtt_InitContext
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2373   .text.Mqtt_DestroyContext:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2378   .text.Mqtt_DestroyContext:00000000 Mqtt_DestroyContext
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2407   .text.Mqtt_SendPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2412   .text.Mqtt_SendPkt:00000000 Mqtt_SendPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2571   .text.Mqtt_SendPkt:000000a8 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2576   .text.Mqtt_HandlePubRec:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2581   .text.Mqtt_HandlePubRec:00000000 Mqtt_HandlePubRec
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2696   .text.Mqtt_HandlePubRel:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2701   .text.Mqtt_HandlePubRel:00000000 Mqtt_HandlePubRel
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2817   .text.Mqtt_HandlePublish:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:2821   .text.Mqtt_HandlePublish:00000000 Mqtt_HandlePublish
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3159   .text.Mqtt_HandlePublish:000001b4 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3165   .text.Mqtt_Dispatch:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3169   .text.Mqtt_Dispatch:00000000 Mqtt_Dispatch
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3194   .text.Mqtt_Dispatch:00000012 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3206   .text.Mqtt_Dispatch:0000001e $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3280   .text.Mqtt_RecvPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3285   .text.Mqtt_RecvPkt:00000000 Mqtt_RecvPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3461   .text.Mqtt_RecvPkt:000000bc $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3467   .text.Mqtt_PackConnectPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3472   .text.Mqtt_PackConnectPkt:00000000 Mqtt_PackConnectPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3871   .text.Mqtt_PackConnectPkt:00000214 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3876   .text.Mqtt_PackPublishPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:3881   .text.Mqtt_PackPublishPkt:00000000 Mqtt_PackPublishPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4120   .text.Mqtt_SetPktDup:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4125   .text.Mqtt_SetPktDup:00000000 Mqtt_SetPktDup
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4169   .text.Mqtt_PackSubscribePkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4174   .text.Mqtt_PackSubscribePkt:00000000 Mqtt_PackSubscribePkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4389   .text.Mqtt_AppendSubscribeTopic:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4394   .text.Mqtt_AppendSubscribeTopic:00000000 Mqtt_AppendSubscribeTopic
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4537   .text.Mqtt_PackUnsubscribePkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4542   .text.Mqtt_PackUnsubscribePkt:00000000 Mqtt_PackUnsubscribePkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4767   .text.Mqtt_AppendUnsubscribeTopic:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4772   .text.Mqtt_AppendUnsubscribeTopic:00000000 Mqtt_AppendUnsubscribeTopic
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4908   .text.Mqtt_PackPingReqPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4913   .text.Mqtt_PackPingReqPkt:00000000 Mqtt_PackPingReqPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4962   .text.Mqtt_PackDisconnectPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:4967   .text.Mqtt_PackDisconnectPkt:00000000 Mqtt_PackDisconnectPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5016   .text.Mqtt_PackCmdRetPkt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5021   .text.Mqtt_PackCmdRetPkt:00000000 Mqtt_PackCmdRetPkt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5133   .text.Mqtt_PackCmdRetPkt:0000008c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5139   .text.Mqtt_PackDataPointStart:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5144   .text.Mqtt_PackDataPointStart:00000000 Mqtt_PackDataPointStart
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5207   .text.Mqtt_PackDataPointStart:0000003c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5213   .text.Mqtt_AppendDPNull:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5218   .text.Mqtt_AppendDPNull:00000000 Mqtt_AppendDPNull
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5251   .text.Mqtt_AppendDPInt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5256   .text.Mqtt_AppendDPInt:00000000 Mqtt_AppendDPInt
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 172


C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5312   .text.Mqtt_AppendDPInt:00000038 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5317   .text.Mqtt_AppendDPDouble:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5322   .text.Mqtt_AppendDPDouble:00000000 Mqtt_AppendDPDouble
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5378   .text.Mqtt_AppendDPDouble:0000003c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5383   .text.Mqtt_AppendDPString:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5388   .text.Mqtt_AppendDPString:00000000 Mqtt_AppendDPString
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5470   .text.Mqtt_AppendDPString:00000058 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5475   .text.Mqtt_AppendDPSubvalueInt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5480   .text.Mqtt_AppendDPSubvalueInt:00000000 Mqtt_AppendDPSubvalueInt
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5528   .text.Mqtt_AppendDPSubvalueInt:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5533   .text.Mqtt_AppendDPSubvalueDouble:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5538   .text.Mqtt_AppendDPSubvalueDouble:00000000 Mqtt_AppendDPSubvalueDouble
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5585   .text.Mqtt_AppendDPSubvalueDouble:0000002c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5590   .text.Mqtt_AppendDPSubvalueString:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5595   .text.Mqtt_AppendDPSubvalueString:00000000 Mqtt_AppendDPSubvalueString
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5671   .text.Mqtt_AppendDPSubvalueString:0000004c $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5676   .text.Mqtt_AppendDPStartSubobject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5681   .text.Mqtt_AppendDPStartSubobject:00000000 Mqtt_AppendDPStartSubobject
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5821   .text.Mqtt_AppendDPStartSubobject:000000a4 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5826   .text.Mqtt_AppendDPStartObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5831   .text.Mqtt_AppendDPStartObject:00000000 Mqtt_AppendDPStartObject
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5902   .text.Mqtt_AppendDPFinishSubobject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:5907   .text.Mqtt_AppendDPFinishSubobject:00000000 Mqtt_AppendDPFinishSubobject
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6027   .text.Mqtt_AppendDPFinishObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6032   .text.Mqtt_AppendDPFinishObject:00000000 Mqtt_AppendDPFinishObject
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6063   .text.Mqtt_PackDataPointFinish:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6068   .text.Mqtt_PackDataPointFinish:00000000 Mqtt_PackDataPointFinish
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6184   .text.Mqtt_PackDataPointByBinary:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6189   .text.Mqtt_PackDataPointByBinary:00000000 Mqtt_PackDataPointByBinary
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6546   .text.Mqtt_PackDataPointByBinary:000001c0 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6552   .rodata.__FUNCTION__.6478:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6556   .rodata.__FUNCTION__.6478:00000000 __FUNCTION__.6478
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6559   .rodata.str1.4:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6599   .rodata.Mqtt_TrailingBytesForUTF8:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:6603   .rodata.Mqtt_TrailingBytesForUTF8:00000000 Mqtt_TrailingBytesForUTF8
                     .debug_frame:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:118    .text.Mqtt_IsLegalUtf8:0000005f $d
C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s:118    .text.Mqtt_IsLegalUtf8:00000060 $t

UNDEFINED SYMBOLS
MqttBuffer_AllocExtent
MqttBuffer_AppendExtent
memcpy
__locale_ctype_ptr
strlen
__aeabi_ldivmod
gmtime
strftime
sprintf
memset
malloc
free
puts
MqttBuffer_Init
MqttBuffer_Destroy
memmove
strstr
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccwfU6gd.s 			page 173


printf
MqttBuffer_Append
strcpy
snprintf
