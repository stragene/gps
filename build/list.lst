ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"list.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.vListInitialise,"ax",%progbits
  22              		.align	2
  23              		.global	vListInitialise
  24              		.thumb
  25              		.thumb_func
  27              	vListInitialise:
  28              	.LFB116:
  29              		.file 1 "./freertos/list.c"
   1:./freertos/list.c **** /*
   2:./freertos/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freertos/list.c ****     All rights reserved
   4:./freertos/list.c **** 
   5:./freertos/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freertos/list.c **** 
   7:./freertos/list.c ****     This file is part of the FreeRTOS distribution.
   8:./freertos/list.c **** 
   9:./freertos/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freertos/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freertos/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freertos/list.c **** 
  13:./freertos/list.c ****     ***************************************************************************
  14:./freertos/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freertos/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freertos/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freertos/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freertos/list.c ****     ***************************************************************************
  19:./freertos/list.c **** 
  20:./freertos/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freertos/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freertos/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freertos/list.c ****     link: http://www.freertos.org/a00114.html
  24:./freertos/list.c **** 
  25:./freertos/list.c ****     ***************************************************************************
  26:./freertos/list.c ****      *                                                                       *
  27:./freertos/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freertos/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freertos/list.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 2


  30:./freertos/list.c ****      *    is the industry's de facto standard.                               *
  31:./freertos/list.c ****      *                                                                       *
  32:./freertos/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freertos/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freertos/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freertos/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freertos/list.c ****      *                                                                       *
  37:./freertos/list.c ****     ***************************************************************************
  38:./freertos/list.c **** 
  39:./freertos/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freertos/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freertos/list.c ****     defined configASSERT()?
  42:./freertos/list.c **** 
  43:./freertos/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freertos/list.c ****     embedded software for free we request you assist our global community by
  45:./freertos/list.c ****     participating in the support forum.
  46:./freertos/list.c **** 
  47:./freertos/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freertos/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freertos/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freertos/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freertos/list.c **** 
  52:./freertos/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freertos/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freertos/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freertos/list.c **** 
  56:./freertos/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freertos/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freertos/list.c **** 
  59:./freertos/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freertos/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freertos/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freertos/list.c **** 
  63:./freertos/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freertos/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freertos/list.c ****     mission critical applications that require provable dependability.
  66:./freertos/list.c **** 
  67:./freertos/list.c ****     1 tab == 4 spaces!
  68:./freertos/list.c **** */
  69:./freertos/list.c **** 
  70:./freertos/list.c **** 
  71:./freertos/list.c **** #include <stdlib.h>
  72:./freertos/list.c **** #include "FreeRTOS.h"
  73:./freertos/list.c **** #include "list.h"
  74:./freertos/list.c **** 
  75:./freertos/list.c **** /*-----------------------------------------------------------
  76:./freertos/list.c ****  * PUBLIC LIST API documented in list.h
  77:./freertos/list.c ****  *----------------------------------------------------------*/
  78:./freertos/list.c **** 
  79:./freertos/list.c **** void vListInitialise( List_t * const pxList )
  80:./freertos/list.c **** {
  30              		.loc 1 80 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 3


  81:./freertos/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:./freertos/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:./freertos/list.c **** 	as the only list entry. */
  84:./freertos/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  36              		.loc 1 84 0
  37 0000 00F10803 		add	r3, r0, #8
  38 0004 4360     		str	r3, [r0, #4]
  85:./freertos/list.c **** 
  86:./freertos/list.c **** 	/* The list end value is the highest possible value in the list to
  87:./freertos/list.c **** 	ensure it remains at the end of the list. */
  88:./freertos/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  39              		.loc 1 88 0
  40 0006 4FF0FF32 		mov	r2, #-1
  41 000a 8260     		str	r2, [r0, #8]
  89:./freertos/list.c **** 
  90:./freertos/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:./freertos/list.c **** 	when the list is empty. */
  92:./freertos/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  42              		.loc 1 92 0
  43 000c C360     		str	r3, [r0, #12]
  93:./freertos/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  44              		.loc 1 93 0
  45 000e 0361     		str	r3, [r0, #16]
  94:./freertos/list.c **** 
  95:./freertos/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  46              		.loc 1 95 0
  47 0010 0023     		movs	r3, #0
  48 0012 0360     		str	r3, [r0]
  49 0014 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE116:
  53 0016 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  54              		.align	2
  55              		.global	vListInitialiseItem
  56              		.thumb
  57              		.thumb_func
  59              	vListInitialiseItem:
  60              	.LFB117:
  96:./freertos/list.c **** 
  97:./freertos/list.c **** 	/* Write known values into the list if
  98:./freertos/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:./freertos/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:./freertos/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:./freertos/list.c **** }
 102:./freertos/list.c **** /*-----------------------------------------------------------*/
 103:./freertos/list.c **** 
 104:./freertos/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:./freertos/list.c **** {
  61              		.loc 1 105 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL1:
 106:./freertos/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:./freertos/list.c **** 	pxItem->pvContainer = NULL;
  67              		.loc 1 107 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 4


  68 0000 0023     		movs	r3, #0
  69 0002 0361     		str	r3, [r0, #16]
  70 0004 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE117:
  74 0006 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
  75              		.align	2
  76              		.global	vListInsertEnd
  77              		.thumb
  78              		.thumb_func
  80              	vListInsertEnd:
  81              	.LFB118:
 108:./freertos/list.c **** 
 109:./freertos/list.c **** 	/* Write known values into the list item if
 110:./freertos/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:./freertos/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:./freertos/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:./freertos/list.c **** }
 114:./freertos/list.c **** /*-----------------------------------------------------------*/
 115:./freertos/list.c **** 
 116:./freertos/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:./freertos/list.c **** {
  82              		.loc 1 117 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL2:
 118:./freertos/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  88              		.loc 1 118 0
  89 0000 4368     		ldr	r3, [r0, #4]
  90              	.LVL3:
 119:./freertos/list.c **** 
 120:./freertos/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:./freertos/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:./freertos/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:./freertos/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:./freertos/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:./freertos/list.c **** 
 126:./freertos/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:./freertos/list.c **** 	makes the new list item the last item to be removed by a call to
 128:./freertos/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:./freertos/list.c **** 	pxNewListItem->pxNext = pxIndex;
  91              		.loc 1 129 0
  92 0002 4B60     		str	r3, [r1, #4]
 130:./freertos/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  93              		.loc 1 130 0
  94 0004 9A68     		ldr	r2, [r3, #8]
  95 0006 8A60     		str	r2, [r1, #8]
 131:./freertos/list.c **** 
 132:./freertos/list.c **** 	/* Only used during decision coverage testing. */
 133:./freertos/list.c **** 	mtCOVERAGE_TEST_DELAY();
 134:./freertos/list.c **** 
 135:./freertos/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
  96              		.loc 1 135 0
  97 0008 9A68     		ldr	r2, [r3, #8]
  98 000a 5160     		str	r1, [r2, #4]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 5


 136:./freertos/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
  99              		.loc 1 136 0
 100 000c 9960     		str	r1, [r3, #8]
 137:./freertos/list.c **** 
 138:./freertos/list.c **** 	/* Remember which list the item is in. */
 139:./freertos/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 101              		.loc 1 139 0
 102 000e 0861     		str	r0, [r1, #16]
 140:./freertos/list.c **** 
 141:./freertos/list.c **** 	( pxList->uxNumberOfItems )++;
 103              		.loc 1 141 0
 104 0010 0368     		ldr	r3, [r0]
 105              	.LVL4:
 106 0012 0133     		adds	r3, r3, #1
 107 0014 0360     		str	r3, [r0]
 108 0016 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE118:
 112              		.section	.text.vListInsert,"ax",%progbits
 113              		.align	2
 114              		.global	vListInsert
 115              		.thumb
 116              		.thumb_func
 118              	vListInsert:
 119              	.LFB119:
 142:./freertos/list.c **** }
 143:./freertos/list.c **** /*-----------------------------------------------------------*/
 144:./freertos/list.c **** 
 145:./freertos/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:./freertos/list.c **** {
 120              		.loc 1 146 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.LVL5:
 126 0000 30B4     		push	{r4, r5}
 127              	.LCFI0:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 5, -4
 147:./freertos/list.c **** ListItem_t *pxIterator;
 148:./freertos/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 131              		.loc 1 148 0
 132 0002 0D68     		ldr	r5, [r1]
 133              	.LVL6:
 149:./freertos/list.c **** 
 150:./freertos/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:./freertos/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:./freertos/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:./freertos/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 154:./freertos/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 155:./freertos/list.c **** 
 156:./freertos/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:./freertos/list.c **** 
 158:./freertos/list.c **** 	If the list already contains a list item with the same item value then the
 159:./freertos/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 6


 160:./freertos/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:./freertos/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:./freertos/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:./freertos/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:./freertos/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 134              		.loc 1 164 0
 135 0004 B5F1FF3F 		cmp	r5, #-1
 136 0008 01D1     		bne	.L5
 165:./freertos/list.c **** 	{
 166:./freertos/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 137              		.loc 1 166 0
 138 000a 0269     		ldr	r2, [r0, #16]
 139              	.LVL7:
 140 000c 07E0     		b	.L6
 141              	.LVL8:
 142              	.L5:
 167:./freertos/list.c **** 	}
 168:./freertos/list.c **** 	else
 169:./freertos/list.c **** 	{
 170:./freertos/list.c **** 		/* *** NOTE ***********************************************************
 171:./freertos/list.c **** 		If you find your application is crashing here then likely causes are
 172:./freertos/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:./freertos/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:./freertos/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:./freertos/list.c **** 
 176:./freertos/list.c **** 			1) Stack overflow -
 177:./freertos/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:./freertos/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:./freertos/list.c **** 			   parts where numerically high priority values denote low actual
 180:./freertos/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:./freertos/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:./freertos/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:./freertos/list.c **** 			   http://www.freertos.org/a00110.html
 184:./freertos/list.c **** 			3) Calling an API function from within a critical section or when
 185:./freertos/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:./freertos/list.c **** 			   not end in "FromISR" from an interrupt.
 187:./freertos/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:./freertos/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:./freertos/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:./freertos/list.c **** 		**********************************************************************/
 191:./freertos/list.c **** 
 192:./freertos/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 143              		.loc 1 192 0
 144 000e 00F10802 		add	r2, r0, #8
 145              	.LVL9:
 146 0012 00E0     		b	.L7
 147              	.L8:
 148 0014 1A46     		mov	r2, r3
 149              	.LVL10:
 150              	.L7:
 151              		.loc 1 192 0 is_stmt 0 discriminator 1
 152 0016 5368     		ldr	r3, [r2, #4]
 153 0018 1C68     		ldr	r4, [r3]
 154 001a A542     		cmp	r5, r4
 155 001c FAD2     		bcs	.L8
 156              	.L6:
 193:./freertos/list.c **** 		{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 7


 194:./freertos/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:./freertos/list.c **** 			insertion position. */
 196:./freertos/list.c **** 		}
 197:./freertos/list.c **** 	}
 198:./freertos/list.c **** 
 199:./freertos/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 157              		.loc 1 199 0 is_stmt 1
 158 001e 5368     		ldr	r3, [r2, #4]
 159 0020 4B60     		str	r3, [r1, #4]
 200:./freertos/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 160              		.loc 1 200 0
 161 0022 9960     		str	r1, [r3, #8]
 201:./freertos/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 162              		.loc 1 201 0
 163 0024 8A60     		str	r2, [r1, #8]
 202:./freertos/list.c **** 	pxIterator->pxNext = pxNewListItem;
 164              		.loc 1 202 0
 165 0026 5160     		str	r1, [r2, #4]
 203:./freertos/list.c **** 
 204:./freertos/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:./freertos/list.c **** 	item later. */
 206:./freertos/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 166              		.loc 1 206 0
 167 0028 0861     		str	r0, [r1, #16]
 207:./freertos/list.c **** 
 208:./freertos/list.c **** 	( pxList->uxNumberOfItems )++;
 168              		.loc 1 208 0
 169 002a 0368     		ldr	r3, [r0]
 170 002c 0133     		adds	r3, r3, #1
 171 002e 0360     		str	r3, [r0]
 209:./freertos/list.c **** }
 172              		.loc 1 209 0
 173 0030 30BC     		pop	{r4, r5}
 174              	.LCFI1:
 175              		.cfi_restore 5
 176              		.cfi_restore 4
 177              		.cfi_def_cfa_offset 0
 178              	.LVL11:
 179 0032 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE119:
 183              		.section	.text.uxListRemove,"ax",%progbits
 184              		.align	2
 185              		.global	uxListRemove
 186              		.thumb
 187              		.thumb_func
 189              	uxListRemove:
 190              	.LFB120:
 210:./freertos/list.c **** /*-----------------------------------------------------------*/
 211:./freertos/list.c **** 
 212:./freertos/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:./freertos/list.c **** {
 191              		.loc 1 213 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 8


 196              	.LVL12:
 214:./freertos/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:./freertos/list.c **** item. */
 216:./freertos/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 197              		.loc 1 216 0
 198 0000 0369     		ldr	r3, [r0, #16]
 199              	.LVL13:
 217:./freertos/list.c **** 
 218:./freertos/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 200              		.loc 1 218 0
 201 0002 4268     		ldr	r2, [r0, #4]
 202 0004 8168     		ldr	r1, [r0, #8]
 203 0006 9160     		str	r1, [r2, #8]
 219:./freertos/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 204              		.loc 1 219 0
 205 0008 8268     		ldr	r2, [r0, #8]
 206 000a 4168     		ldr	r1, [r0, #4]
 207 000c 5160     		str	r1, [r2, #4]
 220:./freertos/list.c **** 
 221:./freertos/list.c **** 	/* Only used during decision coverage testing. */
 222:./freertos/list.c **** 	mtCOVERAGE_TEST_DELAY();
 223:./freertos/list.c **** 
 224:./freertos/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:./freertos/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 208              		.loc 1 225 0
 209 000e 5A68     		ldr	r2, [r3, #4]
 210 0010 9042     		cmp	r0, r2
 211 0012 01D1     		bne	.L11
 226:./freertos/list.c **** 	{
 227:./freertos/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 212              		.loc 1 227 0
 213 0014 8268     		ldr	r2, [r0, #8]
 214 0016 5A60     		str	r2, [r3, #4]
 215              	.L11:
 228:./freertos/list.c **** 	}
 229:./freertos/list.c **** 	else
 230:./freertos/list.c **** 	{
 231:./freertos/list.c **** 		mtCOVERAGE_TEST_MARKER();
 232:./freertos/list.c **** 	}
 233:./freertos/list.c **** 
 234:./freertos/list.c **** 	pxItemToRemove->pvContainer = NULL;
 216              		.loc 1 234 0
 217 0018 0022     		movs	r2, #0
 218 001a 0261     		str	r2, [r0, #16]
 235:./freertos/list.c **** 	( pxList->uxNumberOfItems )--;
 219              		.loc 1 235 0
 220 001c 1868     		ldr	r0, [r3]
 221              	.LVL14:
 222 001e 0138     		subs	r0, r0, #1
 223 0020 1860     		str	r0, [r3]
 236:./freertos/list.c **** 
 237:./freertos/list.c **** 	return pxList->uxNumberOfItems;
 238:./freertos/list.c **** }
 224              		.loc 1 238 0
 225 0022 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE120:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 9


 229              		.text
 230              	.Letext0:
 231              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 232              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 233              		.file 4 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h"
 234              		.file 5 "freertos/include/list.h"
 235              		.file 6 "cmsis/include/core_cm4.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:22     .text.vListInitialise:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:27     .text.vListInitialise:00000000 vListInitialise
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:54     .text.vListInitialiseItem:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:59     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:75     .text.vListInsertEnd:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:80     .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:113    .text.vListInsert:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:118    .text.vListInsert:00000000 vListInsert
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:184    .text.uxListRemove:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccGqn6Xo.s:189    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
