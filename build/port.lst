ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"port.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvTaskExitError,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskExitError:
  27              	.LFB117:
  28              		.file 1 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c"
   1:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
   2:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     All rights reserved
   4:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
   5:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
   7:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     This file is part of the FreeRTOS distribution.
   8:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
   9:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  13:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     ***************************************************************************
  14:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     ***************************************************************************
  19:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  20:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     link: http://www.freertos.org/a00114.html
  24:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  25:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     ***************************************************************************
  26:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *                                                                       *
  27:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    platform software that is more than just the market leader, it     *
  30:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    is the industry's de facto standard.                               *
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 2


  31:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *                                                                       *
  32:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****      *                                                                       *
  37:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     ***************************************************************************
  38:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  39:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     defined configASSERT()?
  42:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  43:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     embedded software for free we request you assist our global community by
  45:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     participating in the support forum.
  46:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  47:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  52:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  56:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  59:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  63:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     mission critical applications that require provable dependability.
  66:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  67:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****     1 tab == 4 spaces!
  68:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** */
  69:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  70:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------
  71:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  *----------------------------------------------------------*/
  73:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  74:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Scheduler includes. */
  75:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #include "FreeRTOS.h"
  76:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #include "task.h"
  77:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  78:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #ifndef __VFP_FP__
  79:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif
  81:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  82:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #else
  87:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 3


  88:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	as the core. */
  89:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif
  91:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
  92:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* ...then bits in the registers. */
  98:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 104:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** r0p1 port. */
 106:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 110:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 113:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 123:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 126:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Constants required to manipulate the VFP. */
 127:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 130:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Constants required to set up the initial stack. */
 131:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 134:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* The systick is a 24-bit counter. */
 135:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 137:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 138:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 139:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
 140:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 141:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 142:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** occurred while the SysTick counter is stopped during tickless idle
 143:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** calculations. */
 144:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 4


 145:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 146:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 147:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 148:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** debugger. */
 149:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #ifdef configTASK_RETURN_ADDRESS
 150:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 151:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #else
 152:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 153:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif
 154:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 155:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 156:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** variable. */
 157:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 158:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 159:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 160:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 161:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * file is weak to allow application writers to change the timer used to
 162:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * generate the tick interrupt.
 163:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 164:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void vPortSetupTimerInterrupt( void );
 165:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 166:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Exception handlers.
 167:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 168:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** extern void xPortPendSVHandler( void ) __attribute__ (( naked ));
 169:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** extern void xPortSysTickHandler( void );
 170:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** extern void vPortSVCHandler( void ) __attribute__ (( naked ));
 171:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 172:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 173:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 174:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 175:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 176:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 177:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 178:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Function to enable the VFP.
 179:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 180:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 181:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 182:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 183:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 184:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 185:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void prvTaskExitError( void );
 186:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 187:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 188:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 189:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 190:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * The number of SysTick increments that make up one tick period.
 191:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 192:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if configUSE_TICKLESS_IDLE == 1
 193:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 194:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 195:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 196:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 197:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 198:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * 24 bit resolution of the SysTick timer.
 199:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 200:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if configUSE_TICKLESS_IDLE == 1
 201:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 5


 202:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 203:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 204:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 205:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 206:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * power functionality only.
 207:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 208:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if configUSE_TICKLESS_IDLE == 1
 209:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 210:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 211:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 212:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 213:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 214:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 215:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 216:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 217:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if ( configASSERT_DEFINED == 1 )
 218:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 219:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 220:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 221:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif /* configASSERT_DEFINED */
 222:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 223:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 224:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 225:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 226:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * See header file for description.
 227:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 228:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 229:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 230:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 231:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	interrupt. */
 232:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 233:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 234:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	of interrupts, and to ensure alignment. */
 235:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 236:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 237:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 238:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 239:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 240:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 241:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 242:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 243:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Save code space by skipping register initialisation. */
 244:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 245:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 246:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 247:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* A save method is being used that requires each task to maintain its
 248:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	own exec return value. */
 249:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 250:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 251:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 252:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 253:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 254:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	return pxTopOfStack;
 255:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 256:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 257:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 258:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void prvTaskExitError( void )
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 6


 259:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
  29              		.loc 1 259 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 260:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 261:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 262:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	should instead call vTaskDelete( NULL ).
 263:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 264:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 265:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	defined, then stop here so application writers can catch the error. */
 266:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  35              		.loc 1 266 0
  36 0000 0B4B     		ldr	r3, .L5
  37 0002 1B68     		ldr	r3, [r3]
  38 0004 B3F1FF3F 		cmp	r3, #-1
  39 0008 08D0     		beq	.L2
  40              	.LBB29:
  41              	.LBB30:
  42              		.file 2 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h"
   1:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*
   2:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     All rights reserved
   4:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   5:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   7:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   9:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  13:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  14:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  19:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  20:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  25:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  26:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  27:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  32:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 7


  36:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  37:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  38:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  39:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     defined configASSERT()?
  42:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  43:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     embedded software for free we request you assist our global community by
  45:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     participating in the support forum.
  46:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  47:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  52:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  56:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  59:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  63:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     mission critical applications that require provable dependability.
  66:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  67:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     1 tab == 4 spaces!
  68:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** */
  69:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  70:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef PORTMACRO_H
  71:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define PORTMACRO_H
  72:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  73:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifdef __cplusplus
  74:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** extern "C"
  75:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** {
  76:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
  77:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  78:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------
  79:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * Port specific definitions.
  80:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *
  81:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * given hardware and compiler.
  83:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *
  84:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * These settings should not be altered.
  85:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *-----------------------------------------------------------
  86:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  */
  87:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  88:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Type definitions. */
  89:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portCHAR char
  90:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portFLOAT float
  91:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portDOUBLE double
  92:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portLONG long
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 8


  93:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSHORT short
  94:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSTACK_TYPE uint32_t
  95:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portBASE_TYPE long
  96:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  97:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef portSTACK_TYPE StackType_t;
  98:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef long BaseType_t;
  99:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef unsigned long UBaseType_t;
 100:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 101:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if (configUSE_16_BIT_TICKS == 1)
 102:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef uint16_t TickType_t;
 103:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portMAX_DELAY (TickType_t)0xffff
 104:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #else
 105:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** typedef uint32_t TickType_t;
 106:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portMAX_DELAY (TickType_t)0xffffffffUL
 107:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 108:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 	not need to be guarded with a critical section. */
 110:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTICK_TYPE_IS_ATOMIC 1
 111:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 112:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 113:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 114:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Architecture specifics. */
 115:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSTACK_GROWTH (-1)
 116:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)
 117:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portBYTE_ALIGNMENT 8
 118:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 119:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 120:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Scheduler utilities. */
 121:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portYIELD()                                                                      \
 122:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {                                                                                    \
 123:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Set a PendSV to request a context switch. */                                  \
 124:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;                                  \
 125:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                                                                                          \
 126:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely	\ \ \ \
 127:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         within the specified behaviour for the architecture. */                          \
 128:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("dsb");                                                           \
 129:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("isb");                                                           \
 130:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 131:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 132:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNVIC_INT_CTRL_REG (*((volatile uint32_t *)0xe000ed04))
 133:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNVIC_PENDSVSET_BIT (1UL << 28UL)
 134:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portEND_SWITCHING_ISR(xSwitchRequired) \
 135:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     if (xSwitchRequired != pdFALSE)            \
 136:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portYIELD()
 137:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR(x)
 138:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 139:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 140:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /* Critical section management. */
 141:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortEnterCritical(void);
 142:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortExitCritical(void);
 143:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR() ulPortRaiseBASEPRI()
 144:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortSetBASEPRI(x)
 145:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portDISABLE_INTERRUPTS() vPortRaiseBASEPRI()
 146:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portENABLE_INTERRUPTS() vPortSetBASEPRI(0)
 147:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portENTER_CRITICAL() vPortEnterCritical()
 148:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portEXIT_CRITICAL() vPortExitCritical()
 149:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 9


 150:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 151:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 152:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 153:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 154:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** (which build with all the ports) will build. */
 155:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTASK_FUNCTION_PROTO(vFunction, pvParameters) void vFunction(void *pvParameters)
 156:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTASK_FUNCTION(vFunction, pvParameters) void vFunction(void *pvParameters)
 157:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 158:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 159:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Tickless idle/low power functionality. */
 160:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 161:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortSuppressTicksAndSleep(TickType_t xExpectedIdleTime);
 162:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPortSuppressTicksAndSleep(xExpectedIdleTim
 163:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 164:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 165:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 166:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Architecture specific optimisations. */
 167:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 168:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 169:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 170:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 171:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 172:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 173:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /* Generic helper function. */
 174:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     __attribute__((always_inline)) static inline uint8_t ucPortCountLeadingZeros(uint32_t ulBitmap)
 175:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 176:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint8_t ucReturn;
 177:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 178:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("clz %0, %1"
 179:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "=r"(ucReturn)
 180:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "r"(ulBitmap));
 181:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return ucReturn;
 182:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 183:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 184:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Check the configuration. */
 185:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if (configMAX_PRIORITIES > 32)
 186:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is le
 187:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 188:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 189:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 190:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portRECORD_READY_PRIORITY(uxPriority, uxReadyPriorities) (uxReadyPriorities) |= (1UL << (ux
 191:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portRESET_READY_PRIORITY(uxPriority, uxReadyPriorities) (uxReadyPriorities) &= ~(1UL << (ux
 192:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 193:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 194:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 195:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portGET_HIGHEST_PRIORITY(uxTopPriority, uxReadyPriorities) uxTopPriority = (31UL - (uint32_
 196:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 197:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 198:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 199:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 200:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 201:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifdef configASSERT
 202:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     void vPortValidateInterruptPriority(void);
 203:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortValidateInterruptPriority()
 204:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 205:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 206:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* portNOP() is not required by this port. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 10


 207:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNOP()
 208:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 209:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portINLINE __inline
 210:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 211:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef portFORCE_INLINE
 212:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portFORCE_INLINE inline __attribute__((always_inline))
 213:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 214:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 215:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt(void)
 216:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 217:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulCurrentInterrupt;
 218:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         BaseType_t xReturn;
 219:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 220:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 221:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("mrs %0, ipsr"
 222:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "=r"(ulCurrentInterrupt));
 223:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 224:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         if (ulCurrentInterrupt == 0)
 225:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         {
 226:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             xReturn = pdFALSE;
 227:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         }
 228:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         else
 229:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         {
 230:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             xReturn = pdTRUE;
 231:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         }
 232:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 233:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return xReturn;
 234:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 235:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 236:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 237:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 238:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI(void)
 239:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 240:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulNewBASEPRI;
 241:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
  43              		.loc 2 242 0
  44              		.syntax unified
  45              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
  46 000a 4FF05003 			mov r3, #80												
  47 000e 83F31188 		msr basepri, r3											
  48 0012 BFF36F8F 		isb														
  49 0016 BFF34F8F 		dsb														
  50              	
  51              	@ 0 "" 2
  52              	.LVL0:
  53              		.thumb
  54              		.syntax unified
  55              	.L3:
  56 001a FEE7     		b	.L3
  57              	.L2:
  58              	.LBE30:
  59              	.LBE29:
  60              	.LBB31:
  61              	.LBB32:
  62              		.syntax unified
  63              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 11


  64 001c 4FF05003 			mov r3, #80												
  65 0020 83F31188 		msr basepri, r3											
  66 0024 BFF36F8F 		isb														
  67 0028 BFF34F8F 		dsb														
  68              	
  69              	@ 0 "" 2
  70              	.LVL1:
  71              		.thumb
  72              		.syntax unified
  73              	.L4:
  74 002c FEE7     		b	.L4
  75              	.L6:
  76 002e 00BF     		.align	2
  77              	.L5:
  78 0030 00000000 		.word	.LANCHOR0
  79              	.LBE32:
  80              	.LBE31:
  81              		.cfi_endproc
  82              	.LFE117:
  84              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  85              		.align	2
  86              		.thumb
  87              		.thumb_func
  89              	prvPortStartFirstTask:
  90              	.LFB119:
 267:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portDISABLE_INTERRUPTS();
 268:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	for( ;; );
 269:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 270:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 271:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 272:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void vPortSVCHandler( void )
 273:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 274:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__asm volatile (
 275:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 276:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 277:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 278:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 279:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 280:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	isb								\n"
 281:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	mov r0, #0 						\n"
 282:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	msr	basepri, r0					\n"
 283:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	bx r14							\n"
 284:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"									\n"
 285:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	.align 4						\n"
 286:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 287:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				);
 288:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 289:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 290:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 291:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void prvPortStartFirstTask( void )
 292:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
  91              		.loc 1 292 0
  92              		.cfi_startproc
  93              		@ Naked Function: prologue and epilogue provided by programmer.
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
 293:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__asm volatile(
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 12


  96              		.loc 1 293 0
  97              		.syntax unified
  98              	@ 293 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c" 1
  99 0000 0648     		 ldr r0, =0xE000ED08 	
 100 0002 0068     	 ldr r0, [r0] 			
 101 0004 0068     	 ldr r0, [r0] 			
 102 0006 80F30888 	 msr msp, r0			
 103 000a 62B6     	 cpsie i				
 104 000c 61B6     	 cpsie f				
 105 000e BFF34F8F 	 dsb					
 106 0012 BFF36F8F 	 isb					
 107 0016 00DF     	 svc 0					
 108 0018 00BF     	 nop					
 109              	
 110              	@ 0 "" 2
 294:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 295:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" ldr r0, [r0] 			\n"
 296:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" ldr r0, [r0] 			\n"
 297:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 298:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 299:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" cpsie f				\n"
 300:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" dsb					\n"
 301:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" isb					\n"
 302:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" svc 0					\n" /* System call to start first task. */
 303:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					" nop					\n"
 304:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				);
 305:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 111              		.loc 1 305 0
 112              		.thumb
 113              		.syntax unified
 114              		.cfi_endproc
 115              	.LFE119:
 117 001a 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 118              		.align	2
 119              		.thumb
 120              		.thumb_func
 122              	vPortEnableVFP:
 123              	.LFB127:
 306:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 307:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 308:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
 309:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * See header file for description.
 310:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 311:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** BaseType_t xPortStartScheduler( void )
 312:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 313:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 314:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 315:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 316:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 317:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 318:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 319:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 320:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 321:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 322:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 323:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#if( configASSERT_DEFINED == 1 )
 324:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 13


 325:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		volatile uint32_t ulOriginalPriority;
 326:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 327:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 328:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 329:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 330:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		functions can be called.  ISR safe functions are those that end in
 331:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 332:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 333:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 334:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 335:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 336:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 337:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Determine the number of priority bits available.  First write to all
 338:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		possible bits. */
 339:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 340:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 341:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Read the value back to see how many bits stuck. */
 342:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 343:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 344:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Use the same mask on the maximum system call priority. */
 345:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 346:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 347:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 348:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		of bits read back. */
 349:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 350:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 351:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 352:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ulMaxPRIGROUPValue--;
 353:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 354:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 355:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 356:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 357:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		register. */
 358:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 359:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 360:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 361:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 362:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		value. */
 363:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 364:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 365:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#endif /* conifgASSERT_DEFINED */
 366:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 367:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 368:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 369:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 370:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 371:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 372:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	here already. */
 373:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	vPortSetupTimerInterrupt();
 374:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 375:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 376:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uxCriticalNesting = 0;
 377:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 378:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 379:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	vPortEnableVFP();
 380:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 381:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Lazy save always. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 14


 382:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 383:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 384:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Start the first task. */
 385:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	prvPortStartFirstTask();
 386:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 387:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 388:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	exit error function to prevent compiler warnings about a static function
 389:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	not being called in the case that the application writer overrides this
 390:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 391:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	prvTaskExitError();
 392:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 393:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Should not get here! */
 394:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	return 0;
 395:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 396:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 397:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 398:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void vPortEndScheduler( void )
 399:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 400:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 401:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	Artificially force an assert. */
 402:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 403:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 404:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 405:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 406:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void vPortEnterCritical( void )
 407:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 408:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portDISABLE_INTERRUPTS();
 409:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uxCriticalNesting++;
 410:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 411:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 412:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 413:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 414:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 415:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	assert function also uses a critical section. */
 416:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	if( uxCriticalNesting == 1 )
 417:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 418:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 419:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 420:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 421:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 422:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 423:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void vPortExitCritical( void )
 424:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 425:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( uxCriticalNesting );
 426:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uxCriticalNesting--;
 427:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	if( uxCriticalNesting == 0 )
 428:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 429:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		portENABLE_INTERRUPTS();
 430:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 431:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 432:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 433:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 434:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void xPortPendSVHandler( void )
 435:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 436:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* This is a naked function. */
 437:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 438:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__asm volatile
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 15


 439:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	(
 440:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	mrs r0, psp							\n"
 441:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	isb									\n"
 442:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 443:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 444:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldr	r2, [r3]						\n"
 445:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 446:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 447:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	it eq								\n"
 448:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 449:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 450:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 451:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 452:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 453:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 454:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	stmdb sp!, {r3}						\n"
 455:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	mov r0, %0 							\n"
 456:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	msr basepri, r0						\n"
 457:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	dsb									\n"
 458:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	isb									\n"
 459:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	bl vTaskSwitchContext				\n"
 460:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	mov r0, #0							\n"
 461:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	msr basepri, r0						\n"
 462:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldmia sp!, {r3}						\n"
 463:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 464:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 465:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldr r0, [r1]						\n"
 466:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 467:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 468:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 469:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 470:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	it eq								\n"
 471:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 472:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 473:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	msr psp, r0							\n"
 474:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	isb									\n"
 475:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 476:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 477:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 478:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"			push { r14 }				\n"
 479:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"			pop { pc }					\n"
 480:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		#endif
 481:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#endif
 482:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 483:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	bx r14								\n"
 484:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"										\n"
 485:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"	.align 4							\n"
 486:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 487:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 488:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	);
 489:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 490:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 491:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 492:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** void xPortSysTickHandler( void )
 493:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 494:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 495:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 16


 496:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	save and then restore the interrupt mask value as its value is already
 497:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	known. */
 498:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portDISABLE_INTERRUPTS();
 499:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 500:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Increment the RTOS tick. */
 501:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 502:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 503:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* A context switch is required.  Context switching is performed in
 504:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 505:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 506:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 507:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 508:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portENABLE_INTERRUPTS();
 509:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 510:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 511:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 512:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if configUSE_TICKLESS_IDLE == 1
 513:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 514:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 515:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 516:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 517:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	TickType_t xModifiableIdleTime;
 518:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 519:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 520:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 521:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 522:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 523:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 524:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 525:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 526:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 527:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 528:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		kernel with respect to calendar time. */
 529:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 530:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 531:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 532:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		tick periods.  -1 is used because this code will execute part way
 533:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		through one of the tick periods. */
 534:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 535:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 536:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 537:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 538:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 539:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 540:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 541:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 542:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		__asm volatile( "cpsid i" );
 543:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		__asm volatile( "dsb" );
 544:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		__asm volatile( "isb" );
 545:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 546:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 547:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		to be unsuspended then abandon the low power entry. */
 548:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 549:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 550:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Restart from whatever is left in the count register to complete
 551:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			this tick period. */
 552:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 17


 553:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 554:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Restart SysTick. */
 555:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 556:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 557:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Reset the reload register to the value required for normal tick
 558:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			periods. */
 559:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 560:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 561:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 562:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			above. */
 563:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			__asm volatile( "cpsie i" );
 564:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 565:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		else
 566:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 567:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Set the new reload value. */
 568:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 569:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 570:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 571:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			zero. */
 572:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 573:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 574:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Restart SysTick. */
 575:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 576:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 577:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 578:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 579:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 580:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			should not be executed again.  However, the original expected idle
 581:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 582:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 583:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 584:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			if( xModifiableIdleTime > 0 )
 585:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			{
 586:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				__asm volatile( "dsb" );
 587:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				__asm volatile( "wfi" );
 588:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				__asm volatile( "isb" );
 589:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			}
 590:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 591:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 592:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 593:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			accounted for as best it can be, but using the tickless mode will
 594:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 595:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			kernel with respect to calendar time. */
 596:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 597:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 598:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 599:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 600:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			above. */
 601:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			__asm volatile( "cpsie i" );
 602:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 603:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 604:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			{
 605:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				uint32_t ulCalculatedLoadValue;
 606:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 607:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 608:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				count reloaded with ulReloadValue.  Reset the
 609:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 18


 610:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				period. */
 611:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 612:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 613:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 614:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				underflowed because the post sleep hook did something
 615:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				that took too long. */
 616:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 617:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				{
 618:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 619:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				}
 620:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 621:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 622:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 623:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* The tick interrupt handler will already have pended the tick
 624:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				processing in the kernel.  As the pending tick will be
 625:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				processed as soon as this function exits, the tick value
 626:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				maintained by the tick is stepped forward by one less than the
 627:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				time spent waiting. */
 628:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 629:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			}
 630:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			else
 631:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			{
 632:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 633:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 634:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				periods (not the ulReload value which accounted for part
 635:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				ticks). */
 636:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 637:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 638:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* How many complete tick periods passed while the processor
 639:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				was waiting? */
 640:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 641:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 642:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 643:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				period remains. */
 644:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 645:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			}
 646:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 647:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 648:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 649:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 650:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			can only execute once in the case that the reload register is near
 651:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			zero. */
 652:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 653:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portENTER_CRITICAL();
 654:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			{
 655:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 656:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 657:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 658:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			}
 659:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			portEXIT_CRITICAL();
 660:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 661:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 662:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 663:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 664:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 665:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 666:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 19


 667:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 668:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  * frequency.
 669:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c ****  */
 670:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 671:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 672:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 673:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 674:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 675:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 676:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 677:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 678:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 679:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 680:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 681:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 682:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 683:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 684:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 685:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 686:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 687:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /* This is a naked function. */
 688:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** static void vPortEnableVFP( void )
 689:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** {
 124              		.loc 1 689 0
 125              		.cfi_startproc
 126              		@ Naked Function: prologue and epilogue provided by programmer.
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 690:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__asm volatile
 129              		.loc 1 690 0
 130              		.syntax unified
 131              	@ 690 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c" 1
 132 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 133 0004 0168     		ldr r1, [r0]				
 134              									
 135 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 136 000a 0160     		str r1, [r0]				
 137 000c 7047     		bx r14						
 138              	@ 0 "" 2
 691:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	(
 692:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 693:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"	ldr r1, [r0]				\n"
 694:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"								\n"
 695:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 696:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"	str r1, [r0]				\n"
 697:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		"	bx r14						"
 698:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	);
 699:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 139              		.loc 1 699 0
 140              		.thumb
 141              		.syntax unified
 142              		.cfi_endproc
 143              	.LFE127:
 145 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 146              		.align	2
 147              		.global	pxPortInitialiseStack
 148              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 20


 149              		.thumb_func
 151              	pxPortInitialiseStack:
 152              	.LFB116:
 229:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 153              		.loc 1 229 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL2:
 237:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 159              		.loc 1 237 0
 160 0000 4FF08073 		mov	r3, #16777216
 161 0004 40F8043C 		str	r3, [r0, #-4]
 162              	.LVL3:
 239:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	pxTopOfStack--;
 163              		.loc 1 239 0
 164 0008 21F00101 		bic	r1, r1, #1
 165              	.LVL4:
 166 000c 40F8081C 		str	r1, [r0, #-8]
 167              	.LVL5:
 241:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 168              		.loc 1 241 0
 169 0010 054B     		ldr	r3, .L10
 170 0012 40F80C3C 		str	r3, [r0, #-12]
 171              	.LVL6:
 245:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 172              		.loc 1 245 0
 173 0016 40F8202C 		str	r2, [r0, #-32]
 174              	.LVL7:
 250:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 175              		.loc 1 250 0
 176 001a 6FF00203 		mvn	r3, #2
 177 001e 40F8243C 		str	r3, [r0, #-36]
 178              	.LVL8:
 255:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 179              		.loc 1 255 0
 180 0022 4438     		subs	r0, r0, #68
 181              	.LVL9:
 182 0024 7047     		bx	lr
 183              	.L11:
 184 0026 00BF     		.align	2
 185              	.L10:
 186 0028 00000000 		.word	prvTaskExitError
 187              		.cfi_endproc
 188              	.LFE116:
 190              		.section	.text.SVC_Handler,"ax",%progbits
 191              		.align	2
 192              		.global	SVC_Handler
 193              		.thumb
 194              		.thumb_func
 196              	SVC_Handler:
 197              	.LFB118:
 273:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	__asm volatile (
 198              		.loc 1 273 0
 199              		.cfi_startproc
 200              		@ Naked Function: prologue and epilogue provided by programmer.
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 21


 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 274:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 203              		.loc 1 274 0
 204              		.syntax unified
 205              	@ 274 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c" 1
 206 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 207 0002 1968     		ldr r1, [r3]					
 208 0004 0868     		ldr r0, [r1]					
 209 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 210 000a 80F30988 		msr psp, r0						
 211 000e BFF36F8F 		isb								
 212 0012 4FF00000 		mov r0, #0 						
 213 0016 80F31188 		msr	basepri, r0					
 214 001a 7047     		bx r14							
 215              										
 216 001c AFF30080 		.align 4						
 217 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 218              	
 219              	@ 0 "" 2
 288:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 220              		.loc 1 288 0
 221              		.thumb
 222              		.syntax unified
 223              		.cfi_endproc
 224              	.LFE118:
 226              		.section	.text.vPortEndScheduler,"ax",%progbits
 227              		.align	2
 228              		.global	vPortEndScheduler
 229              		.thumb
 230              		.thumb_func
 232              	vPortEndScheduler:
 233              	.LFB121:
 399:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 234              		.loc 1 399 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 402:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 239              		.loc 1 402 0
 240 0000 074B     		ldr	r3, .L16
 241 0002 1B68     		ldr	r3, [r3]
 242 0004 B3F57A7F 		cmp	r3, #1000
 243 0008 08D0     		beq	.L13
 244              	.LBB33:
 245              	.LBB34:
 246              		.loc 2 242 0
 247              		.syntax unified
 248              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 249 000a 4FF05003 			mov r3, #80												
 250 000e 83F31188 		msr basepri, r3											
 251 0012 BFF36F8F 		isb														
 252 0016 BFF34F8F 		dsb														
 253              	
 254              	@ 0 "" 2
 255              	.LVL10:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 22


 256              		.thumb
 257              		.syntax unified
 258              	.L15:
 259 001a FEE7     		b	.L15
 260              	.L13:
 261 001c 7047     		bx	lr
 262              	.L17:
 263 001e 00BF     		.align	2
 264              	.L16:
 265 0020 00000000 		.word	.LANCHOR0
 266              	.LBE34:
 267              	.LBE33:
 268              		.cfi_endproc
 269              	.LFE121:
 271              		.section	.text.vPortEnterCritical,"ax",%progbits
 272              		.align	2
 273              		.global	vPortEnterCritical
 274              		.thumb
 275              		.thumb_func
 277              	vPortEnterCritical:
 278              	.LFB122:
 407:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portDISABLE_INTERRUPTS();
 279              		.loc 1 407 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284              	.LBB35:
 285              	.LBB36:
 286              		.loc 2 242 0
 287              		.syntax unified
 288              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 289 0000 4FF05003 			mov r3, #80												
 290 0004 83F31188 		msr basepri, r3											
 291 0008 BFF36F8F 		isb														
 292 000c BFF34F8F 		dsb														
 293              	
 294              	@ 0 "" 2
 295              		.thumb
 296              		.syntax unified
 297              	.LBE36:
 298              	.LBE35:
 409:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 299              		.loc 1 409 0
 300 0010 0A4A     		ldr	r2, .L21
 301 0012 1368     		ldr	r3, [r2]
 302 0014 0133     		adds	r3, r3, #1
 303 0016 1360     		str	r3, [r2]
 416:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 304              		.loc 1 416 0
 305 0018 012B     		cmp	r3, #1
 306 001a 0DD1     		bne	.L18
 418:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 307              		.loc 1 418 0
 308 001c 084B     		ldr	r3, .L21+4
 309 001e 1B68     		ldr	r3, [r3]
 310 0020 13F0FF0F 		tst	r3, #255
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 23


 311 0024 08D0     		beq	.L18
 312              	.LBB37:
 313              	.LBB38:
 314              		.loc 2 242 0
 315              		.syntax unified
 316              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 317 0026 4FF05003 			mov r3, #80												
 318 002a 83F31188 		msr basepri, r3											
 319 002e BFF36F8F 		isb														
 320 0032 BFF34F8F 		dsb														
 321              	
 322              	@ 0 "" 2
 323              	.LVL11:
 324              		.thumb
 325              		.syntax unified
 326              	.L20:
 327 0036 FEE7     		b	.L20
 328              	.L18:
 329 0038 7047     		bx	lr
 330              	.L22:
 331 003a 00BF     		.align	2
 332              	.L21:
 333 003c 00000000 		.word	.LANCHOR0
 334 0040 04ED00E0 		.word	-536810236
 335              	.LBE38:
 336              	.LBE37:
 337              		.cfi_endproc
 338              	.LFE122:
 340              		.section	.text.vPortExitCritical,"ax",%progbits
 341              		.align	2
 342              		.global	vPortExitCritical
 343              		.thumb
 344              		.thumb_func
 346              	vPortExitCritical:
 347              	.LFB123:
 424:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( uxCriticalNesting );
 348              		.loc 1 424 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 425:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uxCriticalNesting--;
 353              		.loc 1 425 0
 354 0000 094B     		ldr	r3, .L27
 355 0002 1B68     		ldr	r3, [r3]
 356 0004 43B9     		cbnz	r3, .L24
 357              	.LBB39:
 358              	.LBB40:
 359              		.loc 2 242 0
 360              		.syntax unified
 361              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 362 0006 4FF05003 			mov r3, #80												
 363 000a 83F31188 		msr basepri, r3											
 364 000e BFF36F8F 		isb														
 365 0012 BFF34F8F 		dsb														
 366              	
 367              	@ 0 "" 2
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 24


 368              	.LVL12:
 369              		.thumb
 370              		.syntax unified
 371              	.L25:
 372 0016 FEE7     		b	.L25
 373              	.L24:
 374              	.LBE40:
 375              	.LBE39:
 426:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	if( uxCriticalNesting == 0 )
 376              		.loc 1 426 0
 377 0018 013B     		subs	r3, r3, #1
 378 001a 034A     		ldr	r2, .L27
 379 001c 1360     		str	r3, [r2]
 427:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 380              		.loc 1 427 0
 381 001e 0BB9     		cbnz	r3, .L23
 382              	.LVL13:
 383              	.LBB41:
 384              	.LBB42:
 243:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 244:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	msr basepri, %0											\n"
 245:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	isb														\n"
 246:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	dsb														\n"
 247:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "=r"(ulNewBASEPRI)
 248:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
 249:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 250:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 251:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 252:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 253:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void)
 254:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 255:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 256:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 257:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
 258:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mrs %0, basepri											\n"
 259:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %1, %2												\n"
 260:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	msr basepri, %1											\n"
 261:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	isb														\n"
 262:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	dsb														\n"
 263:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "=r"(ulOriginalBASEPRI), "=r"(ulNewBASEPRI)
 264:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
 265:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 266:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 267:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 	warnings. */
 268:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return ulOriginalBASEPRI;
 269:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 270:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 271:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 272:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
 273:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 274:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
 385              		.loc 2 274 0
 386              		.syntax unified
 387              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 388 0020 83F31188 			msr basepri, r3	
 389              	@ 0 "" 2
 390              	.LVL14:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 25


 391              		.thumb
 392              		.syntax unified
 393              	.L23:
 394 0024 7047     		bx	lr
 395              	.L28:
 396 0026 00BF     		.align	2
 397              	.L27:
 398 0028 00000000 		.word	.LANCHOR0
 399              	.LBE42:
 400              	.LBE41:
 401              		.cfi_endproc
 402              	.LFE123:
 404              		.section	.text.PendSV_Handler,"ax",%progbits
 405              		.align	2
 406              		.global	PendSV_Handler
 407              		.thumb
 408              		.thumb_func
 410              	PendSV_Handler:
 411              	.LFB124:
 435:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* This is a naked function. */
 412              		.loc 1 435 0
 413              		.cfi_startproc
 414              		@ Naked Function: prologue and epilogue provided by programmer.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 438:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	(
 417              		.loc 1 438 0
 418              		.syntax unified
 419              	@ 438 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c" 1
 420 0000 EFF30980 			mrs r0, psp							
 421 0004 BFF36F8F 		isb									
 422              											
 423 0008 154B     		ldr	r3, pxCurrentTCBConst			
 424 000a 1A68     		ldr	r2, [r3]						
 425              											
 426 000c 1EF0100F 		tst r14, #0x10						
 427 0010 08BF     		it eq								
 428 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 429              											
 430 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 431              											
 432 001a 1060     		str r0, [r2]						
 433              											
 434 001c 4DF8043D 		stmdb sp!, {r3}						
 435 0020 4FF05000 		mov r0, #80 							
 436 0024 80F31188 		msr basepri, r0						
 437 0028 BFF34F8F 		dsb									
 438 002c BFF36F8F 		isb									
 439 0030 FFF7FEFF 		bl vTaskSwitchContext				
 440 0034 4FF00000 		mov r0, #0							
 441 0038 80F31188 		msr basepri, r0						
 442 003c 08BC     		ldmia sp!, {r3}						
 443              											
 444 003e 1968     		ldr r1, [r3]						
 445 0040 0868     		ldr r0, [r1]						
 446              											
 447 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 26


 448              											
 449 0046 1EF0100F 		tst r14, #0x10						
 450 004a 08BF     		it eq								
 451 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 452              											
 453 0050 80F30988 		msr psp, r0							
 454 0054 BFF36F8F 		isb									
 455              											
 456              											
 457 0058 7047     		bx r14								
 458              											
 459 005a 00BFAFF3 		.align 4							
 459      0080
 460 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 461              	
 462              	@ 0 "" 2
 489:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 463              		.loc 1 489 0
 464              		.thumb
 465              		.syntax unified
 466              		.cfi_endproc
 467              	.LFE124:
 469              		.section	.text.SysTick_Handler,"ax",%progbits
 470              		.align	2
 471              		.global	SysTick_Handler
 472              		.thumb
 473              		.thumb_func
 475              	SysTick_Handler:
 476              	.LFB125:
 493:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 477              		.loc 1 493 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481 0000 08B5     		push	{r3, lr}
 482              	.LCFI0:
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 3, -8
 485              		.cfi_offset 14, -4
 486              	.LBB43:
 487              	.LBB44:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 488              		.loc 2 242 0
 489              		.syntax unified
 490              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 491 0002 4FF05003 			mov r3, #80												
 492 0006 83F31188 		msr basepri, r3											
 493 000a BFF36F8F 		isb														
 494 000e BFF34F8F 		dsb														
 495              	
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.LBE44:
 500              	.LBE43:
 501:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 501              		.loc 1 501 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 27


 502 0012 FFF7FEFF 		bl	xTaskIncrementTick
 503              	.LVL15:
 504 0016 18B1     		cbz	r0, .L31
 505:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 505              		.loc 1 505 0
 506 0018 4FF08052 		mov	r2, #268435456
 507 001c 024B     		ldr	r3, .L33
 508 001e 1A60     		str	r2, [r3]
 509              	.L31:
 510              	.LVL16:
 511              	.LBB45:
 512              	.LBB46:
 513              		.loc 2 274 0
 514 0020 0023     		movs	r3, #0
 515              		.syntax unified
 516              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 517 0022 83F31188 			msr basepri, r3	
 518              	@ 0 "" 2
 519              	.LVL17:
 520              		.thumb
 521              		.syntax unified
 522 0026 08BD     		pop	{r3, pc}
 523              	.L34:
 524              		.align	2
 525              	.L33:
 526 0028 04ED00E0 		.word	-536810236
 527              	.LBE46:
 528              	.LBE45:
 529              		.cfi_endproc
 530              	.LFE125:
 532              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 533              		.align	2
 534              		.weak	vPortSetupTimerInterrupt
 535              		.thumb
 536              		.thumb_func
 538              	vPortSetupTimerInterrupt:
 539              	.LFB126:
 671:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 540              		.loc 1 671 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 682:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 545              		.loc 1 682 0
 546 0000 064B     		ldr	r3, .L36
 547 0002 1B68     		ldr	r3, [r3]
 548 0004 064A     		ldr	r2, .L36+4
 549 0006 A2FB0323 		umull	r2, r3, r2, r3
 550 000a DB08     		lsrs	r3, r3, #3
 551 000c 013B     		subs	r3, r3, #1
 552 000e 054A     		ldr	r2, .L36+8
 553 0010 1360     		str	r3, [r2]
 683:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** }
 554              		.loc 1 683 0
 555 0012 0722     		movs	r2, #7
 556 0014 044B     		ldr	r3, .L36+12
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 28


 557 0016 1A60     		str	r2, [r3]
 558 0018 7047     		bx	lr
 559              	.L37:
 560 001a 00BF     		.align	2
 561              	.L36:
 562 001c 00000000 		.word	SystemCoreClock
 563 0020 CDCCCCCC 		.word	-858993459
 564 0024 14E000E0 		.word	-536813548
 565 0028 10E000E0 		.word	-536813552
 566              		.cfi_endproc
 567              	.LFE126:
 569              		.section	.text.xPortStartScheduler,"ax",%progbits
 570              		.align	2
 571              		.global	xPortStartScheduler
 572              		.thumb
 573              		.thumb_func
 575              	xPortStartScheduler:
 576              	.LFB120:
 312:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 577              		.loc 1 312 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 320:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 581              		.loc 1 320 0
 582 0000 314B     		ldr	r3, .L46
 583 0002 1A68     		ldr	r2, [r3]
 584 0004 314B     		ldr	r3, .L46+4
 585 0006 9A42     		cmp	r2, r3
 586 0008 08D1     		bne	.L39
 587              	.LBB47:
 588              	.LBB48:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 589              		.loc 2 242 0
 590              		.syntax unified
 591              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 592 000a 4FF05003 			mov r3, #80												
 593 000e 83F31188 		msr basepri, r3											
 594 0012 BFF36F8F 		isb														
 595 0016 BFF34F8F 		dsb														
 596              	
 597              	@ 0 "" 2
 598              	.LVL18:
 599              		.thumb
 600              		.syntax unified
 601              	.L40:
 602 001a FEE7     		b	.L40
 603              	.L39:
 604              	.LBE48:
 605              	.LBE47:
 321:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 606              		.loc 1 321 0
 607 001c 2A4B     		ldr	r3, .L46
 608 001e 1A68     		ldr	r2, [r3]
 609 0020 2B4B     		ldr	r3, .L46+8
 610 0022 9A42     		cmp	r2, r3
 611 0024 08D1     		bne	.L41
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 29


 612              	.LBB49:
 613              	.LBB50:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 614              		.loc 2 242 0
 615              		.syntax unified
 616              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 617 0026 4FF05003 			mov r3, #80												
 618 002a 83F31188 		msr basepri, r3											
 619 002e BFF36F8F 		isb														
 620 0032 BFF34F8F 		dsb														
 621              	
 622              	@ 0 "" 2
 623              	.LVL19:
 624              		.thumb
 625              		.syntax unified
 626              	.L42:
 627 0036 FEE7     		b	.L42
 628              	.L41:
 629              	.LBE50:
 630              	.LBE49:
 312:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 631              		.loc 1 312 0
 632 0038 00B5     		push	{lr}
 633              	.LCFI1:
 634              		.cfi_def_cfa_offset 4
 635              		.cfi_offset 14, -4
 636 003a 83B0     		sub	sp, sp, #12
 637              	.LCFI2:
 638              		.cfi_def_cfa_offset 16
 639              	.LVL20:
 640              	.LBB51:
 335:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 641              		.loc 1 335 0
 642 003c 254B     		ldr	r3, .L46+12
 643 003e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 644 0040 D2B2     		uxtb	r2, r2
 645 0042 0192     		str	r2, [sp, #4]
 339:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 646              		.loc 1 339 0
 647 0044 FF22     		movs	r2, #255
 648 0046 1A70     		strb	r2, [r3]
 342:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 649              		.loc 1 342 0
 650 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 651 004a DBB2     		uxtb	r3, r3
 652 004c 8DF80330 		strb	r3, [sp, #3]
 345:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 653              		.loc 1 345 0
 654 0050 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 655 0054 03F05003 		and	r3, r3, #80
 656 0058 1F4A     		ldr	r2, .L46+16
 657 005a 1370     		strb	r3, [r2]
 349:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 658              		.loc 1 349 0
 659 005c 0722     		movs	r2, #7
 660 005e 1F4B     		ldr	r3, .L46+20
 661 0060 1A60     		str	r2, [r3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 30


 350:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 662              		.loc 1 350 0
 663 0062 09E0     		b	.L43
 664              	.L44:
 352:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 665              		.loc 1 352 0
 666 0064 1D4A     		ldr	r2, .L46+20
 667 0066 1368     		ldr	r3, [r2]
 668 0068 013B     		subs	r3, r3, #1
 669 006a 1360     		str	r3, [r2]
 353:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 670              		.loc 1 353 0
 671 006c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 672 0070 5B00     		lsls	r3, r3, #1
 673 0072 DBB2     		uxtb	r3, r3
 674 0074 8DF80330 		strb	r3, [sp, #3]
 675              	.L43:
 350:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 676              		.loc 1 350 0
 677 0078 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 678 007c 13F0800F 		tst	r3, #128
 679 0080 F0D1     		bne	.L44
 358:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 680              		.loc 1 358 0
 681 0082 164A     		ldr	r2, .L46+20
 682 0084 1368     		ldr	r3, [r2]
 683 0086 1B02     		lsls	r3, r3, #8
 359:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 684              		.loc 1 359 0
 685 0088 03F4E063 		and	r3, r3, #1792
 686 008c 1360     		str	r3, [r2]
 363:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	}
 687              		.loc 1 363 0
 688 008e 019B     		ldr	r3, [sp, #4]
 689 0090 DBB2     		uxtb	r3, r3
 690 0092 104A     		ldr	r2, .L46+12
 691 0094 1370     		strb	r3, [r2]
 692              	.LBE51:
 368:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 693              		.loc 1 368 0
 694 0096 124B     		ldr	r3, .L46+24
 695 0098 1A68     		ldr	r2, [r3]
 696 009a 42F47002 		orr	r2, r2, #15728640
 697 009e 1A60     		str	r2, [r3]
 369:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 698              		.loc 1 369 0
 699 00a0 1A68     		ldr	r2, [r3]
 700 00a2 42F07042 		orr	r2, r2, #-268435456
 701 00a6 1A60     		str	r2, [r3]
 373:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 702              		.loc 1 373 0
 703 00a8 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 704              	.LVL21:
 376:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 705              		.loc 1 376 0
 706 00ac 0022     		movs	r2, #0
 707 00ae 0D4B     		ldr	r3, .L46+28
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 31


 708 00b0 1A60     		str	r2, [r3]
 379:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 709              		.loc 1 379 0
 710 00b2 FFF7FEFF 		bl	vPortEnableVFP
 711              	.LVL22:
 382:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 712              		.loc 1 382 0
 713 00b6 0C4A     		ldr	r2, .L46+32
 714 00b8 1368     		ldr	r3, [r2]
 715 00ba 43F04043 		orr	r3, r3, #-1073741824
 716 00be 1360     		str	r3, [r2]
 385:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 717              		.loc 1 385 0
 718 00c0 FFF7FEFF 		bl	prvPortStartFirstTask
 719              	.LVL23:
 391:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 720              		.loc 1 391 0
 721 00c4 FFF7FEFF 		bl	prvTaskExitError
 722              	.LVL24:
 723              	.L47:
 724              		.align	2
 725              	.L46:
 726 00c8 00ED00E0 		.word	-536810240
 727 00cc 71C20F41 		.word	1091551857
 728 00d0 70C20F41 		.word	1091551856
 729 00d4 00E400E0 		.word	-536812544
 730 00d8 00000000 		.word	.LANCHOR1
 731 00dc 00000000 		.word	.LANCHOR2
 732 00e0 20ED00E0 		.word	-536810208
 733 00e4 00000000 		.word	.LANCHOR0
 734 00e8 34EF00E0 		.word	-536809676
 735              		.cfi_endproc
 736              	.LFE120:
 738              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 739              		.align	2
 740              		.global	vPortValidateInterruptPriority
 741              		.thumb
 742              		.thumb_func
 744              	vPortValidateInterruptPriority:
 745              	.LFB128:
 700:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** /*-----------------------------------------------------------*/
 701:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 702:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** #if( configASSERT_DEFINED == 1 )
 703:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 704:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	void vPortValidateInterruptPriority( void )
 705:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	{
 746              		.loc 1 705 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 706:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uint32_t ulCurrentInterrupt;
 707:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 	uint8_t ucCurrentPriority;
 708:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 709:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 710:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 751              		.loc 1 710 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 32


 752              		.syntax unified
 753              	@ 710 "./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c" 1
 754 0000 EFF30583 		mrs r3, ipsr
 755              	@ 0 "" 2
 756              	.LVL25:
 711:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 712:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 713:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 757              		.loc 1 713 0
 758              		.thumb
 759              		.syntax unified
 760 0004 0F2B     		cmp	r3, #15
 761 0006 0FD9     		bls	.L49
 714:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		{
 715:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* Look up the interrupt's priority. */
 716:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 762              		.loc 1 716 0
 763 0008 104A     		ldr	r2, .L53
 764 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 765              	.LVL26:
 766 000c DBB2     		uxtb	r3, r3
 767              	.LVL27:
 717:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 718:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 719:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			an interrupt that has been assigned a priority above
 720:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 721:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 722:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			from interrupts that have been assigned a priority at or below
 723:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 724:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 725:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			Numerically low interrupt priority numbers represent logically high
 726:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 727:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			be set to a value equal to or numerically *higher* than
 728:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 729:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 730:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 731:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			default priority of	zero as that is the highest possible priority,
 732:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 733:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			and	therefore also guaranteed to be invalid.
 734:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 735:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 736:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			interrupt entry is as fast and simple as possible.
 737:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 738:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			The following links provide detailed information:
 739:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 740:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			http://www.freertos.org/FAQHelp.html */
 741:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 768              		.loc 1 741 0
 769 000e 104A     		ldr	r2, .L53+4
 770 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 771 0012 9342     		cmp	r3, r2
 772 0014 08D2     		bcs	.L49
 773              	.LBB52:
 774              	.LBB53:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 775              		.loc 2 242 0
 776              		.syntax unified
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 33


 777              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 778 0016 4FF05003 			mov r3, #80												
 779 001a 83F31188 		msr basepri, r3											
 780 001e BFF36F8F 		isb														
 781 0022 BFF34F8F 		dsb														
 782              	
 783              	@ 0 "" 2
 784              	.LVL28:
 785              		.thumb
 786              		.syntax unified
 787              	.L50:
 788 0026 FEE7     		b	.L50
 789              	.L49:
 790              	.LBE53:
 791              	.LBE52:
 742:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		}
 743:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 744:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 745:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		that define each interrupt's priority to be split between bits that
 746:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 747:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 748:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 749:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		this is not the case (if some bits represent a sub-priority).
 750:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 
 751:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		If the application only uses CMSIS libraries for interrupt
 752:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 753:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 754:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 755:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 756:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		of zero will result in unpredicable behaviour. */
 757:./freertos/Source/portable/GCC/ARM_CM4_MPU/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 792              		.loc 1 757 0
 793 0028 0A4B     		ldr	r3, .L53+8
 794 002a 1B68     		ldr	r3, [r3]
 795 002c 03F4E063 		and	r3, r3, #1792
 796 0030 094A     		ldr	r2, .L53+12
 797 0032 1268     		ldr	r2, [r2]
 798 0034 9342     		cmp	r3, r2
 799 0036 08D9     		bls	.L48
 800              	.LBB54:
 801              	.LBB55:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 802              		.loc 2 242 0
 803              		.syntax unified
 804              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 805 0038 4FF05003 			mov r3, #80												
 806 003c 83F31188 		msr basepri, r3											
 807 0040 BFF36F8F 		isb														
 808 0044 BFF34F8F 		dsb														
 809              	
 810              	@ 0 "" 2
 811              	.LVL29:
 812              		.thumb
 813              		.syntax unified
 814              	.L52:
 815 0048 FEE7     		b	.L52
 816              	.L48:
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 34


 817 004a 7047     		bx	lr
 818              	.L54:
 819              		.align	2
 820              	.L53:
 821 004c F0E300E0 		.word	-536812560
 822 0050 00000000 		.word	.LANCHOR1
 823 0054 0CED00E0 		.word	-536810228
 824 0058 00000000 		.word	.LANCHOR2
 825              	.LBE55:
 826              	.LBE54:
 827              		.cfi_endproc
 828              	.LFE128:
 830              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 831              		.set	.LANCHOR1,. + 0
 834              	ucMaxSysCallPriority:
 835 0000 00       		.space	1
 836              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 837              		.align	2
 838              		.set	.LANCHOR2,. + 0
 841              	ulMaxPRIGROUPValue:
 842 0000 00000000 		.space	4
 843              		.section	.data.uxCriticalNesting,"aw",%progbits
 844              		.align	2
 845              		.set	.LANCHOR0,. + 0
 848              	uxCriticalNesting:
 849 0000 AAAAAAAA 		.word	-1431655766
 850              		.text
 851              	.Letext0:
 852              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 853              		.file 4 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 854              		.file 5 "freertos/include/projdefs.h"
 855              		.file 6 "cmsis/include/core_cm4.h"
 856              		.file 7 "user/include/FreeRTOSConfig.h"
 857              		.file 8 "freertos/include/task.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:22     .text.prvTaskExitError:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:26     .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:78     .text.prvTaskExitError:00000030 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:85     .text.prvPortStartFirstTask:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:89     .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:118    .text.vPortEnableVFP:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:122    .text.vPortEnableVFP:00000000 vPortEnableVFP
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:146    .text.pxPortInitialiseStack:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:151    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:186    .text.pxPortInitialiseStack:00000028 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:191    .text.SVC_Handler:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:196    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:217    .text.SVC_Handler:00000020 pxCurrentTCBConst2
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:217    .text.SVC_Handler:00000020 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:227    .text.vPortEndScheduler:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:232    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:265    .text.vPortEndScheduler:00000020 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:272    .text.vPortEnterCritical:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:277    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:333    .text.vPortEnterCritical:0000003c $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:341    .text.vPortExitCritical:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:346    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:398    .text.vPortExitCritical:00000028 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:405    .text.PendSV_Handler:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:410    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:460    .text.PendSV_Handler:00000060 pxCurrentTCBConst
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:460    .text.PendSV_Handler:00000060 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:470    .text.SysTick_Handler:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:475    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:526    .text.SysTick_Handler:00000028 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:533    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:538    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:562    .text.vPortSetupTimerInterrupt:0000001c $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:570    .text.xPortStartScheduler:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:575    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:726    .text.xPortStartScheduler:000000c8 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:739    .text.vPortValidateInterruptPriority:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:744    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:821    .text.vPortValidateInterruptPriority:0000004c $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:834    .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:835    .bss.ucMaxSysCallPriority:00000000 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:837    .bss.ulMaxPRIGROUPValue:00000000 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:841    .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:844    .data.uxCriticalNesting:00000000 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:848    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:145    .text.vPortEnableVFP:0000000e $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:2390   .text.vPortEnableVFP:00000010 $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:117    .text.prvPortStartFirstTask:0000001a $d
C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s:2390   .text.prvPortStartFirstTask:0000001c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc3pnMYQ.s 			page 36


SystemCoreClock
