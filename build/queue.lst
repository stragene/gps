ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"queue.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvIsQueueFull,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvIsQueueFull:
  27              	.LFB136:
  28              		.file 1 "./freertos/queue.c"
   1:./freertos/queue.c **** /*
   2:./freertos/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freertos/queue.c ****     All rights reserved
   4:./freertos/queue.c **** 
   5:./freertos/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freertos/queue.c **** 
   7:./freertos/queue.c ****     This file is part of the FreeRTOS distribution.
   8:./freertos/queue.c **** 
   9:./freertos/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freertos/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freertos/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freertos/queue.c **** 
  13:./freertos/queue.c ****     ***************************************************************************
  14:./freertos/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freertos/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freertos/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freertos/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freertos/queue.c ****     ***************************************************************************
  19:./freertos/queue.c **** 
  20:./freertos/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freertos/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freertos/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freertos/queue.c ****     link: http://www.freertos.org/a00114.html
  24:./freertos/queue.c **** 
  25:./freertos/queue.c ****     ***************************************************************************
  26:./freertos/queue.c ****      *                                                                       *
  27:./freertos/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freertos/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freertos/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:./freertos/queue.c ****      *    is the industry's de facto standard.                               *
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 2


  31:./freertos/queue.c ****      *                                                                       *
  32:./freertos/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freertos/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freertos/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freertos/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freertos/queue.c ****      *                                                                       *
  37:./freertos/queue.c ****     ***************************************************************************
  38:./freertos/queue.c **** 
  39:./freertos/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freertos/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freertos/queue.c ****     defined configASSERT()?
  42:./freertos/queue.c **** 
  43:./freertos/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freertos/queue.c ****     embedded software for free we request you assist our global community by
  45:./freertos/queue.c ****     participating in the support forum.
  46:./freertos/queue.c **** 
  47:./freertos/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freertos/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freertos/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freertos/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freertos/queue.c **** 
  52:./freertos/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freertos/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freertos/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freertos/queue.c **** 
  56:./freertos/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freertos/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freertos/queue.c **** 
  59:./freertos/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freertos/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freertos/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freertos/queue.c **** 
  63:./freertos/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freertos/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freertos/queue.c ****     mission critical applications that require provable dependability.
  66:./freertos/queue.c **** 
  67:./freertos/queue.c ****     1 tab == 4 spaces!
  68:./freertos/queue.c **** */
  69:./freertos/queue.c **** 
  70:./freertos/queue.c **** #include <stdlib.h>
  71:./freertos/queue.c **** #include <string.h>
  72:./freertos/queue.c **** 
  73:./freertos/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:./freertos/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:./freertos/queue.c **** task.h is included from an application file. */
  76:./freertos/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:./freertos/queue.c **** 
  78:./freertos/queue.c **** #include "FreeRTOS.h"
  79:./freertos/queue.c **** #include "task.h"
  80:./freertos/queue.c **** #include "queue.h"
  81:./freertos/queue.c **** 
  82:./freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:./freertos/queue.c **** 	#include "croutine.h"
  84:./freertos/queue.c **** #endif
  85:./freertos/queue.c **** 
  86:./freertos/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:./freertos/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 3


  88:./freertos/queue.c **** header files above, but not in this file, in order to generate the correct
  89:./freertos/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:./freertos/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:./freertos/queue.c **** 
  92:./freertos/queue.c **** 
  93:./freertos/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:./freertos/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:./freertos/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:./freertos/queue.c **** 
  97:./freertos/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:./freertos/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:./freertos/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:./freertos/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:./freertos/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:./freertos/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:./freertos/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:./freertos/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:./freertos/queue.c **** against the coding standard (although an exception to the standard has been
 106:./freertos/queue.c **** permitted where the dual use also significantly changes the type of the
 107:./freertos/queue.c **** structure member). */
 108:./freertos/queue.c **** #define pxMutexHolder					pcTail
 109:./freertos/queue.c **** #define uxQueueType						pcHead
 110:./freertos/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:./freertos/queue.c **** 
 112:./freertos/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:./freertos/queue.c **** zero. */
 114:./freertos/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:./freertos/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:./freertos/queue.c **** 
 117:./freertos/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:./freertos/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:./freertos/queue.c **** 	performed just because a higher priority task has been woken. */
 120:./freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:./freertos/queue.c **** #else
 122:./freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:./freertos/queue.c **** #endif
 124:./freertos/queue.c **** 
 125:./freertos/queue.c **** /*
 126:./freertos/queue.c ****  * Definition of the queue used by the scheduler.
 127:./freertos/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:./freertos/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:./freertos/queue.c ****  */
 130:./freertos/queue.c **** typedef struct QueueDefinition
 131:./freertos/queue.c **** {
 132:./freertos/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:./freertos/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:./freertos/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:./freertos/queue.c **** 
 136:./freertos/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:./freertos/queue.c **** 	{
 138:./freertos/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:./freertos/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:./freertos/queue.c **** 	} u;
 141:./freertos/queue.c **** 
 142:./freertos/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:./freertos/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:./freertos/queue.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 4


 145:./freertos/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:./freertos/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:./freertos/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:./freertos/queue.c **** 
 149:./freertos/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:./freertos/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:./freertos/queue.c **** 
 152:./freertos/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:./freertos/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:./freertos/queue.c **** 	#endif
 155:./freertos/queue.c **** 
 156:./freertos/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:./freertos/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:./freertos/queue.c **** 	#endif
 159:./freertos/queue.c **** 
 160:./freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:./freertos/queue.c **** 		UBaseType_t uxQueueNumber;
 162:./freertos/queue.c **** 		uint8_t ucQueueType;
 163:./freertos/queue.c **** 	#endif
 164:./freertos/queue.c **** 
 165:./freertos/queue.c **** } xQUEUE;
 166:./freertos/queue.c **** 
 167:./freertos/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:./freertos/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:./freertos/queue.c **** typedef xQUEUE Queue_t;
 170:./freertos/queue.c **** 
 171:./freertos/queue.c **** /*-----------------------------------------------------------*/
 172:./freertos/queue.c **** 
 173:./freertos/queue.c **** /*
 174:./freertos/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:./freertos/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:./freertos/queue.c ****  */
 177:./freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:./freertos/queue.c **** 
 179:./freertos/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:./freertos/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:./freertos/queue.c **** 	more user friendly. */
 182:./freertos/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:./freertos/queue.c **** 	{
 184:./freertos/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:./freertos/queue.c **** 		QueueHandle_t xHandle;
 186:./freertos/queue.c **** 	} xQueueRegistryItem;
 187:./freertos/queue.c **** 
 188:./freertos/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:./freertos/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:./freertos/queue.c **** 	debuggers. */
 191:./freertos/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:./freertos/queue.c **** 
 193:./freertos/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:./freertos/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:./freertos/queue.c **** 	array position being vacant. */
 196:./freertos/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:./freertos/queue.c **** 
 198:./freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:./freertos/queue.c **** 
 200:./freertos/queue.c **** /*
 201:./freertos/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 5


 202:./freertos/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:./freertos/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:./freertos/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:./freertos/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:./freertos/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:./freertos/queue.c ****  */
 208:./freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:./freertos/queue.c **** 
 210:./freertos/queue.c **** /*
 211:./freertos/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:./freertos/queue.c ****  *
 213:./freertos/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:./freertos/queue.c ****  */
 215:./freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:./freertos/queue.c **** 
 217:./freertos/queue.c **** /*
 218:./freertos/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:./freertos/queue.c ****  *
 220:./freertos/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:./freertos/queue.c ****  */
 222:./freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:./freertos/queue.c **** 
 224:./freertos/queue.c **** /*
 225:./freertos/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:./freertos/queue.c ****  * back of the queue.
 227:./freertos/queue.c ****  */
 228:./freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:./freertos/queue.c **** 
 230:./freertos/queue.c **** /*
 231:./freertos/queue.c ****  * Copies an item out of a queue.
 232:./freertos/queue.c ****  */
 233:./freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:./freertos/queue.c **** 
 235:./freertos/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:./freertos/queue.c **** 	/*
 237:./freertos/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:./freertos/queue.c **** 	 * the queue set that the queue contains data.
 239:./freertos/queue.c **** 	 */
 240:./freertos/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:./freertos/queue.c **** #endif
 242:./freertos/queue.c **** 
 243:./freertos/queue.c **** /*
 244:./freertos/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:./freertos/queue.c ****  * dynamically to fill in the structure's members.
 246:./freertos/queue.c ****  */
 247:./freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:./freertos/queue.c **** 
 249:./freertos/queue.c **** /*
 250:./freertos/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:./freertos/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:./freertos/queue.c ****  * as a mutex.
 253:./freertos/queue.c ****  */
 254:./freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:./freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:./freertos/queue.c **** #endif
 257:./freertos/queue.c **** 
 258:./freertos/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 6


 259:./freertos/queue.c **** 
 260:./freertos/queue.c **** /*
 261:./freertos/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:./freertos/queue.c ****  * accessing the queue event lists.
 263:./freertos/queue.c ****  */
 264:./freertos/queue.c **** #define prvLockQueue( pxQueue )								\
 265:./freertos/queue.c **** 	taskENTER_CRITICAL();									\
 266:./freertos/queue.c **** 	{														\
 267:./freertos/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:./freertos/queue.c **** 		{													\
 269:./freertos/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:./freertos/queue.c **** 		}													\
 271:./freertos/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:./freertos/queue.c **** 		{													\
 273:./freertos/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:./freertos/queue.c **** 		}													\
 275:./freertos/queue.c **** 	}														\
 276:./freertos/queue.c **** 	taskEXIT_CRITICAL()
 277:./freertos/queue.c **** /*-----------------------------------------------------------*/
 278:./freertos/queue.c **** 
 279:./freertos/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:./freertos/queue.c **** {
 281:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:./freertos/queue.c **** 
 283:./freertos/queue.c **** 	configASSERT( pxQueue );
 284:./freertos/queue.c **** 
 285:./freertos/queue.c **** 	taskENTER_CRITICAL();
 286:./freertos/queue.c **** 	{
 287:./freertos/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:./freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:./freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:./freertos/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:./freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:./freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:./freertos/queue.c **** 
 294:./freertos/queue.c **** 		if( xNewQueue == pdFALSE )
 295:./freertos/queue.c **** 		{
 296:./freertos/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:./freertos/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:./freertos/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:./freertos/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:./freertos/queue.c **** 			it will be possible to write to it. */
 301:./freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:./freertos/queue.c **** 			{
 303:./freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:./freertos/queue.c **** 				{
 305:./freertos/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:./freertos/queue.c **** 				}
 307:./freertos/queue.c **** 				else
 308:./freertos/queue.c **** 				{
 309:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:./freertos/queue.c **** 				}
 311:./freertos/queue.c **** 			}
 312:./freertos/queue.c **** 			else
 313:./freertos/queue.c **** 			{
 314:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:./freertos/queue.c **** 			}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 7


 316:./freertos/queue.c **** 		}
 317:./freertos/queue.c **** 		else
 318:./freertos/queue.c **** 		{
 319:./freertos/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:./freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:./freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:./freertos/queue.c **** 		}
 323:./freertos/queue.c **** 	}
 324:./freertos/queue.c **** 	taskEXIT_CRITICAL();
 325:./freertos/queue.c **** 
 326:./freertos/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:./freertos/queue.c **** 	versions. */
 328:./freertos/queue.c **** 	return pdPASS;
 329:./freertos/queue.c **** }
 330:./freertos/queue.c **** /*-----------------------------------------------------------*/
 331:./freertos/queue.c **** 
 332:./freertos/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:./freertos/queue.c **** 
 334:./freertos/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:./freertos/queue.c **** 	{
 336:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 337:./freertos/queue.c **** 
 338:./freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:./freertos/queue.c **** 
 340:./freertos/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:./freertos/queue.c **** 		supplied. */
 342:./freertos/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:./freertos/queue.c **** 
 344:./freertos/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:./freertos/queue.c **** 		should not be provided if the item size is 0. */
 346:./freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:./freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:./freertos/queue.c **** 
 349:./freertos/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:./freertos/queue.c **** 		{
 351:./freertos/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:./freertos/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:./freertos/queue.c **** 			the real queue and semaphore structures. */
 354:./freertos/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:./freertos/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:./freertos/queue.c **** 		}
 357:./freertos/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:./freertos/queue.c **** 
 359:./freertos/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:./freertos/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:./freertos/queue.c **** 		but is already set. */
 362:./freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:./freertos/queue.c **** 
 364:./freertos/queue.c **** 		if( pxNewQueue != NULL )
 365:./freertos/queue.c **** 		{
 366:./freertos/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:./freertos/queue.c **** 			{
 368:./freertos/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:./freertos/queue.c **** 				note this queue was allocated statically in case the queue is
 370:./freertos/queue.c **** 				later deleted. */
 371:./freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:./freertos/queue.c **** 			}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 8


 373:./freertos/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:./freertos/queue.c **** 
 375:./freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:./freertos/queue.c **** 		}
 377:./freertos/queue.c **** 
 378:./freertos/queue.c **** 		return pxNewQueue;
 379:./freertos/queue.c **** 	}
 380:./freertos/queue.c **** 
 381:./freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:./freertos/queue.c **** /*-----------------------------------------------------------*/
 383:./freertos/queue.c **** 
 384:./freertos/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:./freertos/queue.c **** 
 386:./freertos/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:./freertos/queue.c **** 	{
 388:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 389:./freertos/queue.c **** 	size_t xQueueSizeInBytes;
 390:./freertos/queue.c **** 	uint8_t *pucQueueStorage;
 391:./freertos/queue.c **** 
 392:./freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:./freertos/queue.c **** 
 394:./freertos/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:./freertos/queue.c **** 		{
 396:./freertos/queue.c **** 			/* There is not going to be a queue storage area. */
 397:./freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:./freertos/queue.c **** 		}
 399:./freertos/queue.c **** 		else
 400:./freertos/queue.c **** 		{
 401:./freertos/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:./freertos/queue.c **** 			can be in the queue at any time. */
 403:./freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:./freertos/queue.c **** 		}
 405:./freertos/queue.c **** 
 406:./freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:./freertos/queue.c **** 
 408:./freertos/queue.c **** 		if( pxNewQueue != NULL )
 409:./freertos/queue.c **** 		{
 410:./freertos/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:./freertos/queue.c **** 			storage area. */
 412:./freertos/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:./freertos/queue.c **** 
 414:./freertos/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:./freertos/queue.c **** 			{
 416:./freertos/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:./freertos/queue.c **** 				note this task was created dynamically in case it is later
 418:./freertos/queue.c **** 				deleted. */
 419:./freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:./freertos/queue.c **** 			}
 421:./freertos/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:./freertos/queue.c **** 
 423:./freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:./freertos/queue.c **** 		}
 425:./freertos/queue.c **** 
 426:./freertos/queue.c **** 		return pxNewQueue;
 427:./freertos/queue.c **** 	}
 428:./freertos/queue.c **** 
 429:./freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 9


 430:./freertos/queue.c **** /*-----------------------------------------------------------*/
 431:./freertos/queue.c **** 
 432:./freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:./freertos/queue.c **** {
 434:./freertos/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:./freertos/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:./freertos/queue.c **** 	( void ) ucQueueType;
 437:./freertos/queue.c **** 
 438:./freertos/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:./freertos/queue.c **** 	{
 440:./freertos/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:./freertos/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:./freertos/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:./freertos/queue.c **** 		value that is known to be within the memory map. */
 444:./freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:./freertos/queue.c **** 	}
 446:./freertos/queue.c **** 	else
 447:./freertos/queue.c **** 	{
 448:./freertos/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:./freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:./freertos/queue.c **** 	}
 451:./freertos/queue.c **** 
 452:./freertos/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:./freertos/queue.c **** 	defined. */
 454:./freertos/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:./freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:./freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:./freertos/queue.c **** 
 458:./freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:./freertos/queue.c **** 	{
 460:./freertos/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:./freertos/queue.c **** 	}
 462:./freertos/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:./freertos/queue.c **** 
 464:./freertos/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:./freertos/queue.c **** 	{
 466:./freertos/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:./freertos/queue.c **** 	}
 468:./freertos/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:./freertos/queue.c **** 
 470:./freertos/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:./freertos/queue.c **** }
 472:./freertos/queue.c **** /*-----------------------------------------------------------*/
 473:./freertos/queue.c **** 
 474:./freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:./freertos/queue.c **** 
 476:./freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:./freertos/queue.c **** 	{
 478:./freertos/queue.c **** 		if( pxNewQueue != NULL )
 479:./freertos/queue.c **** 		{
 480:./freertos/queue.c **** 			/* The queue create function will set all the queue structure members
 481:./freertos/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:./freertos/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:./freertos/queue.c **** 			in particular the information required for priority inheritance. */
 484:./freertos/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:./freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:./freertos/queue.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 10


 487:./freertos/queue.c **** 			/* In case this is a recursive mutex. */
 488:./freertos/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:./freertos/queue.c **** 
 490:./freertos/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:./freertos/queue.c **** 
 492:./freertos/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:./freertos/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:./freertos/queue.c **** 		}
 495:./freertos/queue.c **** 		else
 496:./freertos/queue.c **** 		{
 497:./freertos/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:./freertos/queue.c **** 		}
 499:./freertos/queue.c **** 	}
 500:./freertos/queue.c **** 
 501:./freertos/queue.c **** #endif /* configUSE_MUTEXES */
 502:./freertos/queue.c **** /*-----------------------------------------------------------*/
 503:./freertos/queue.c **** 
 504:./freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:./freertos/queue.c **** 
 506:./freertos/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:./freertos/queue.c **** 	{
 508:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 509:./freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:./freertos/queue.c **** 
 511:./freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:./freertos/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:./freertos/queue.c **** 
 514:./freertos/queue.c **** 		return pxNewQueue;
 515:./freertos/queue.c **** 	}
 516:./freertos/queue.c **** 
 517:./freertos/queue.c **** #endif /* configUSE_MUTEXES */
 518:./freertos/queue.c **** /*-----------------------------------------------------------*/
 519:./freertos/queue.c **** 
 520:./freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:./freertos/queue.c **** 
 522:./freertos/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:./freertos/queue.c **** 	{
 524:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 525:./freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:./freertos/queue.c **** 
 527:./freertos/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:./freertos/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:./freertos/queue.c **** 		( void ) ucQueueType;
 530:./freertos/queue.c **** 
 531:./freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:./freertos/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:./freertos/queue.c **** 
 534:./freertos/queue.c **** 		return pxNewQueue;
 535:./freertos/queue.c **** 	}
 536:./freertos/queue.c **** 
 537:./freertos/queue.c **** #endif /* configUSE_MUTEXES */
 538:./freertos/queue.c **** /*-----------------------------------------------------------*/
 539:./freertos/queue.c **** 
 540:./freertos/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:./freertos/queue.c **** 
 542:./freertos/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:./freertos/queue.c **** 	{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 11


 544:./freertos/queue.c **** 	void *pxReturn;
 545:./freertos/queue.c **** 
 546:./freertos/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:./freertos/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:./freertos/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:./freertos/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:./freertos/queue.c **** 		following critical section exiting and the function returning. */
 551:./freertos/queue.c **** 		taskENTER_CRITICAL();
 552:./freertos/queue.c **** 		{
 553:./freertos/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:./freertos/queue.c **** 			{
 555:./freertos/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:./freertos/queue.c **** 			}
 557:./freertos/queue.c **** 			else
 558:./freertos/queue.c **** 			{
 559:./freertos/queue.c **** 				pxReturn = NULL;
 560:./freertos/queue.c **** 			}
 561:./freertos/queue.c **** 		}
 562:./freertos/queue.c **** 		taskEXIT_CRITICAL();
 563:./freertos/queue.c **** 
 564:./freertos/queue.c **** 		return pxReturn;
 565:./freertos/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:./freertos/queue.c **** 
 567:./freertos/queue.c **** #endif
 568:./freertos/queue.c **** /*-----------------------------------------------------------*/
 569:./freertos/queue.c **** 
 570:./freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:./freertos/queue.c **** 
 572:./freertos/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:./freertos/queue.c **** 	{
 574:./freertos/queue.c **** 	BaseType_t xReturn;
 575:./freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:./freertos/queue.c **** 
 577:./freertos/queue.c **** 		configASSERT( pxMutex );
 578:./freertos/queue.c **** 
 579:./freertos/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:./freertos/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:./freertos/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:./freertos/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:./freertos/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:./freertos/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:./freertos/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:./freertos/queue.c **** 		{
 587:./freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:./freertos/queue.c **** 
 589:./freertos/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:./freertos/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:./freertos/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:./freertos/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:./freertos/queue.c **** 			uxRecursiveCallCount member. */
 594:./freertos/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:./freertos/queue.c **** 
 596:./freertos/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:./freertos/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:./freertos/queue.c **** 			{
 599:./freertos/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:./freertos/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 12


 601:./freertos/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:./freertos/queue.c **** 			}
 603:./freertos/queue.c **** 			else
 604:./freertos/queue.c **** 			{
 605:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:./freertos/queue.c **** 			}
 607:./freertos/queue.c **** 
 608:./freertos/queue.c **** 			xReturn = pdPASS;
 609:./freertos/queue.c **** 		}
 610:./freertos/queue.c **** 		else
 611:./freertos/queue.c **** 		{
 612:./freertos/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:./freertos/queue.c **** 			holder. */
 614:./freertos/queue.c **** 			xReturn = pdFAIL;
 615:./freertos/queue.c **** 
 616:./freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:./freertos/queue.c **** 		}
 618:./freertos/queue.c **** 
 619:./freertos/queue.c **** 		return xReturn;
 620:./freertos/queue.c **** 	}
 621:./freertos/queue.c **** 
 622:./freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:./freertos/queue.c **** /*-----------------------------------------------------------*/
 624:./freertos/queue.c **** 
 625:./freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:./freertos/queue.c **** 
 627:./freertos/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:./freertos/queue.c **** 	{
 629:./freertos/queue.c **** 	BaseType_t xReturn;
 630:./freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:./freertos/queue.c **** 
 632:./freertos/queue.c **** 		configASSERT( pxMutex );
 633:./freertos/queue.c **** 
 634:./freertos/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:./freertos/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:./freertos/queue.c **** 
 637:./freertos/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:./freertos/queue.c **** 
 639:./freertos/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:./freertos/queue.c **** 		{
 641:./freertos/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:./freertos/queue.c **** 			xReturn = pdPASS;
 643:./freertos/queue.c **** 		}
 644:./freertos/queue.c **** 		else
 645:./freertos/queue.c **** 		{
 646:./freertos/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:./freertos/queue.c **** 
 648:./freertos/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:./freertos/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:./freertos/queue.c **** 			before reaching here. */
 651:./freertos/queue.c **** 			if( xReturn != pdFAIL )
 652:./freertos/queue.c **** 			{
 653:./freertos/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:./freertos/queue.c **** 			}
 655:./freertos/queue.c **** 			else
 656:./freertos/queue.c **** 			{
 657:./freertos/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 13


 658:./freertos/queue.c **** 			}
 659:./freertos/queue.c **** 		}
 660:./freertos/queue.c **** 
 661:./freertos/queue.c **** 		return xReturn;
 662:./freertos/queue.c **** 	}
 663:./freertos/queue.c **** 
 664:./freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:./freertos/queue.c **** /*-----------------------------------------------------------*/
 666:./freertos/queue.c **** 
 667:./freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:./freertos/queue.c **** 
 669:./freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:./freertos/queue.c **** 	{
 671:./freertos/queue.c **** 	QueueHandle_t xHandle;
 672:./freertos/queue.c **** 
 673:./freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:./freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:./freertos/queue.c **** 
 676:./freertos/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:./freertos/queue.c **** 
 678:./freertos/queue.c **** 		if( xHandle != NULL )
 679:./freertos/queue.c **** 		{
 680:./freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:./freertos/queue.c **** 
 682:./freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:./freertos/queue.c **** 		}
 684:./freertos/queue.c **** 		else
 685:./freertos/queue.c **** 		{
 686:./freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:./freertos/queue.c **** 		}
 688:./freertos/queue.c **** 
 689:./freertos/queue.c **** 		return xHandle;
 690:./freertos/queue.c **** 	}
 691:./freertos/queue.c **** 
 692:./freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:./freertos/queue.c **** /*-----------------------------------------------------------*/
 694:./freertos/queue.c **** 
 695:./freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:./freertos/queue.c **** 
 697:./freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:./freertos/queue.c **** 	{
 699:./freertos/queue.c **** 	QueueHandle_t xHandle;
 700:./freertos/queue.c **** 
 701:./freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:./freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:./freertos/queue.c **** 
 704:./freertos/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:./freertos/queue.c **** 
 706:./freertos/queue.c **** 		if( xHandle != NULL )
 707:./freertos/queue.c **** 		{
 708:./freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:./freertos/queue.c **** 
 710:./freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:./freertos/queue.c **** 		}
 712:./freertos/queue.c **** 		else
 713:./freertos/queue.c **** 		{
 714:./freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 14


 715:./freertos/queue.c **** 		}
 716:./freertos/queue.c **** 
 717:./freertos/queue.c **** 		return xHandle;
 718:./freertos/queue.c **** 	}
 719:./freertos/queue.c **** 
 720:./freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:./freertos/queue.c **** /*-----------------------------------------------------------*/
 722:./freertos/queue.c **** 
 723:./freertos/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:./freertos/queue.c **** {
 725:./freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:./freertos/queue.c **** TimeOut_t xTimeOut;
 727:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:./freertos/queue.c **** 
 729:./freertos/queue.c **** 	configASSERT( pxQueue );
 730:./freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:./freertos/queue.c **** 	{
 734:./freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:./freertos/queue.c **** 	}
 736:./freertos/queue.c **** 	#endif
 737:./freertos/queue.c **** 
 738:./freertos/queue.c **** 
 739:./freertos/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:./freertos/queue.c **** 	statements within the function itself.  This is done in the interest
 741:./freertos/queue.c **** 	of execution time efficiency. */
 742:./freertos/queue.c **** 	for( ;; )
 743:./freertos/queue.c **** 	{
 744:./freertos/queue.c **** 		taskENTER_CRITICAL();
 745:./freertos/queue.c **** 		{
 746:./freertos/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:./freertos/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:./freertos/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:./freertos/queue.c **** 			queue is full. */
 750:./freertos/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:./freertos/queue.c **** 			{
 752:./freertos/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:./freertos/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:./freertos/queue.c **** 
 755:./freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:./freertos/queue.c **** 				{
 757:./freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:./freertos/queue.c **** 					{
 759:./freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:./freertos/queue.c **** 						{
 761:./freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:./freertos/queue.c **** 							to the queue set caused a higher priority task to
 763:./freertos/queue.c **** 							unblock. A context switch is required. */
 764:./freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:./freertos/queue.c **** 						}
 766:./freertos/queue.c **** 						else
 767:./freertos/queue.c **** 						{
 768:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:./freertos/queue.c **** 						}
 770:./freertos/queue.c **** 					}
 771:./freertos/queue.c **** 					else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 15


 772:./freertos/queue.c **** 					{
 773:./freertos/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:./freertos/queue.c **** 						queue then unblock it now. */
 775:./freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:./freertos/queue.c **** 						{
 777:./freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:./freertos/queue.c **** 							{
 779:./freertos/queue.c **** 								/* The unblocked task has a priority higher than
 780:./freertos/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:./freertos/queue.c **** 								do this from within the critical section - the
 782:./freertos/queue.c **** 								kernel takes care of that. */
 783:./freertos/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:./freertos/queue.c **** 							}
 785:./freertos/queue.c **** 							else
 786:./freertos/queue.c **** 							{
 787:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:./freertos/queue.c **** 							}
 789:./freertos/queue.c **** 						}
 790:./freertos/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:./freertos/queue.c **** 						{
 792:./freertos/queue.c **** 							/* This path is a special case that will only get
 793:./freertos/queue.c **** 							executed if the task was holding multiple mutexes
 794:./freertos/queue.c **** 							and the mutexes were given back in an order that is
 795:./freertos/queue.c **** 							different to that in which they were taken. */
 796:./freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:./freertos/queue.c **** 						}
 798:./freertos/queue.c **** 						else
 799:./freertos/queue.c **** 						{
 800:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:./freertos/queue.c **** 						}
 802:./freertos/queue.c **** 					}
 803:./freertos/queue.c **** 				}
 804:./freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:./freertos/queue.c **** 				{
 806:./freertos/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:./freertos/queue.c **** 					queue then unblock it now. */
 808:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:./freertos/queue.c **** 					{
 810:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:./freertos/queue.c **** 						{
 812:./freertos/queue.c **** 							/* The unblocked task has a priority higher than
 813:./freertos/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:./freertos/queue.c **** 							this from within the critical section - the kernel
 815:./freertos/queue.c **** 							takes care of that. */
 816:./freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:./freertos/queue.c **** 						}
 818:./freertos/queue.c **** 						else
 819:./freertos/queue.c **** 						{
 820:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:./freertos/queue.c **** 						}
 822:./freertos/queue.c **** 					}
 823:./freertos/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:./freertos/queue.c **** 					{
 825:./freertos/queue.c **** 						/* This path is a special case that will only get
 826:./freertos/queue.c **** 						executed if the task was holding multiple mutexes and
 827:./freertos/queue.c **** 						the mutexes were given back in an order that is
 828:./freertos/queue.c **** 						different to that in which they were taken. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 16


 829:./freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:./freertos/queue.c **** 					}
 831:./freertos/queue.c **** 					else
 832:./freertos/queue.c **** 					{
 833:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:./freertos/queue.c **** 					}
 835:./freertos/queue.c **** 				}
 836:./freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:./freertos/queue.c **** 
 838:./freertos/queue.c **** 				taskEXIT_CRITICAL();
 839:./freertos/queue.c **** 				return pdPASS;
 840:./freertos/queue.c **** 			}
 841:./freertos/queue.c **** 			else
 842:./freertos/queue.c **** 			{
 843:./freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:./freertos/queue.c **** 				{
 845:./freertos/queue.c **** 					/* The queue was full and no block time is specified (or
 846:./freertos/queue.c **** 					the block time has expired) so leave now. */
 847:./freertos/queue.c **** 					taskEXIT_CRITICAL();
 848:./freertos/queue.c **** 
 849:./freertos/queue.c **** 					/* Return to the original privilege level before exiting
 850:./freertos/queue.c **** 					the function. */
 851:./freertos/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:./freertos/queue.c **** 					return errQUEUE_FULL;
 853:./freertos/queue.c **** 				}
 854:./freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:./freertos/queue.c **** 				{
 856:./freertos/queue.c **** 					/* The queue was full and a block time was specified so
 857:./freertos/queue.c **** 					configure the timeout structure. */
 858:./freertos/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:./freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:./freertos/queue.c **** 				}
 861:./freertos/queue.c **** 				else
 862:./freertos/queue.c **** 				{
 863:./freertos/queue.c **** 					/* Entry time was already set. */
 864:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:./freertos/queue.c **** 				}
 866:./freertos/queue.c **** 			}
 867:./freertos/queue.c **** 		}
 868:./freertos/queue.c **** 		taskEXIT_CRITICAL();
 869:./freertos/queue.c **** 
 870:./freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:./freertos/queue.c **** 		now the critical section has been exited. */
 872:./freertos/queue.c **** 
 873:./freertos/queue.c **** 		vTaskSuspendAll();
 874:./freertos/queue.c **** 		prvLockQueue( pxQueue );
 875:./freertos/queue.c **** 
 876:./freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:./freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:./freertos/queue.c **** 		{
 879:./freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:./freertos/queue.c **** 			{
 881:./freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:./freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:./freertos/queue.c **** 
 884:./freertos/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:./freertos/queue.c **** 				event list.  It is possible	that interrupts occurring now
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 17


 886:./freertos/queue.c **** 				remove this task from the event	list again - but as the
 887:./freertos/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:./freertos/queue.c **** 				ready last instead of the actual ready list. */
 889:./freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 890:./freertos/queue.c **** 
 891:./freertos/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:./freertos/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:./freertos/queue.c **** 				task is already in a ready list before it yields - in which
 894:./freertos/queue.c **** 				case the yield will not cause a context switch unless there
 895:./freertos/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:./freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:./freertos/queue.c **** 				{
 898:./freertos/queue.c **** 					portYIELD_WITHIN_API();
 899:./freertos/queue.c **** 				}
 900:./freertos/queue.c **** 			}
 901:./freertos/queue.c **** 			else
 902:./freertos/queue.c **** 			{
 903:./freertos/queue.c **** 				/* Try again. */
 904:./freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 905:./freertos/queue.c **** 				( void ) xTaskResumeAll();
 906:./freertos/queue.c **** 			}
 907:./freertos/queue.c **** 		}
 908:./freertos/queue.c **** 		else
 909:./freertos/queue.c **** 		{
 910:./freertos/queue.c **** 			/* The timeout has expired. */
 911:./freertos/queue.c **** 			prvUnlockQueue( pxQueue );
 912:./freertos/queue.c **** 			( void ) xTaskResumeAll();
 913:./freertos/queue.c **** 
 914:./freertos/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:./freertos/queue.c **** 			return errQUEUE_FULL;
 916:./freertos/queue.c **** 		}
 917:./freertos/queue.c **** 	}
 918:./freertos/queue.c **** }
 919:./freertos/queue.c **** /*-----------------------------------------------------------*/
 920:./freertos/queue.c **** 
 921:./freertos/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:./freertos/queue.c **** {
 923:./freertos/queue.c **** BaseType_t xReturn;
 924:./freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:./freertos/queue.c **** 
 927:./freertos/queue.c **** 	configASSERT( pxQueue );
 928:./freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:./freertos/queue.c **** 
 931:./freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:./freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:./freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:./freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:./freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:./freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:./freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:./freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:./freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:./freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:./freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:./freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 18


 943:./freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:./freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:./freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:./freertos/queue.c **** 
 947:./freertos/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:./freertos/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:./freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:./freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:./freertos/queue.c **** 	post). */
 952:./freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:./freertos/queue.c **** 	{
 954:./freertos/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:./freertos/queue.c **** 		{
 956:./freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:./freertos/queue.c **** 
 958:./freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:./freertos/queue.c **** 
 960:./freertos/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:./freertos/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:./freertos/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:./freertos/queue.c **** 			called here even though the disinherit function does not check if
 964:./freertos/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:./freertos/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:./freertos/queue.c **** 
 967:./freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:./freertos/queue.c **** 			be done when the queue is unlocked later. */
 969:./freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:./freertos/queue.c **** 			{
 971:./freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:./freertos/queue.c **** 				{
 973:./freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:./freertos/queue.c **** 					{
 975:./freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:./freertos/queue.c **** 						{
 977:./freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:./freertos/queue.c **** 							to the queue set caused a higher priority task to
 979:./freertos/queue.c **** 							unblock.  A context switch is required. */
 980:./freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:./freertos/queue.c **** 							{
 982:./freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:./freertos/queue.c **** 							}
 984:./freertos/queue.c **** 							else
 985:./freertos/queue.c **** 							{
 986:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:./freertos/queue.c **** 							}
 988:./freertos/queue.c **** 						}
 989:./freertos/queue.c **** 						else
 990:./freertos/queue.c **** 						{
 991:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:./freertos/queue.c **** 						}
 993:./freertos/queue.c **** 					}
 994:./freertos/queue.c **** 					else
 995:./freertos/queue.c **** 					{
 996:./freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:./freertos/queue.c **** 						{
 998:./freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:./freertos/queue.c **** 							{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 19


1000:./freertos/queue.c **** 								/* The task waiting has a higher priority so
1001:./freertos/queue.c **** 								record that a context switch is required. */
1002:./freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:./freertos/queue.c **** 								{
1004:./freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:./freertos/queue.c **** 								}
1006:./freertos/queue.c **** 								else
1007:./freertos/queue.c **** 								{
1008:./freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:./freertos/queue.c **** 								}
1010:./freertos/queue.c **** 							}
1011:./freertos/queue.c **** 							else
1012:./freertos/queue.c **** 							{
1013:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:./freertos/queue.c **** 							}
1015:./freertos/queue.c **** 						}
1016:./freertos/queue.c **** 						else
1017:./freertos/queue.c **** 						{
1018:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:./freertos/queue.c **** 						}
1020:./freertos/queue.c **** 					}
1021:./freertos/queue.c **** 				}
1022:./freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:./freertos/queue.c **** 				{
1024:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:./freertos/queue.c **** 					{
1026:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:./freertos/queue.c **** 						{
1028:./freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:./freertos/queue.c **** 							context	switch is required. */
1030:./freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:./freertos/queue.c **** 							{
1032:./freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:./freertos/queue.c **** 							}
1034:./freertos/queue.c **** 							else
1035:./freertos/queue.c **** 							{
1036:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:./freertos/queue.c **** 							}
1038:./freertos/queue.c **** 						}
1039:./freertos/queue.c **** 						else
1040:./freertos/queue.c **** 						{
1041:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:./freertos/queue.c **** 						}
1043:./freertos/queue.c **** 					}
1044:./freertos/queue.c **** 					else
1045:./freertos/queue.c **** 					{
1046:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:./freertos/queue.c **** 					}
1048:./freertos/queue.c **** 				}
1049:./freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:./freertos/queue.c **** 			}
1051:./freertos/queue.c **** 			else
1052:./freertos/queue.c **** 			{
1053:./freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:./freertos/queue.c **** 				knows that data was posted while it was locked. */
1055:./freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:./freertos/queue.c **** 			}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 20


1057:./freertos/queue.c **** 
1058:./freertos/queue.c **** 			xReturn = pdPASS;
1059:./freertos/queue.c **** 		}
1060:./freertos/queue.c **** 		else
1061:./freertos/queue.c **** 		{
1062:./freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:./freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1064:./freertos/queue.c **** 		}
1065:./freertos/queue.c **** 	}
1066:./freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:./freertos/queue.c **** 
1068:./freertos/queue.c **** 	return xReturn;
1069:./freertos/queue.c **** }
1070:./freertos/queue.c **** /*-----------------------------------------------------------*/
1071:./freertos/queue.c **** 
1072:./freertos/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:./freertos/queue.c **** {
1074:./freertos/queue.c **** BaseType_t xReturn;
1075:./freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:./freertos/queue.c **** 
1078:./freertos/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:./freertos/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:./freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:./freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:./freertos/queue.c **** 	post). */
1083:./freertos/queue.c **** 
1084:./freertos/queue.c **** 	configASSERT( pxQueue );
1085:./freertos/queue.c **** 
1086:./freertos/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:./freertos/queue.c **** 	if the item size is not 0. */
1088:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:./freertos/queue.c **** 
1090:./freertos/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:./freertos/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:./freertos/queue.c **** 	interrupts, only tasks. */
1093:./freertos/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:./freertos/queue.c **** 
1095:./freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:./freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:./freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:./freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:./freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:./freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:./freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:./freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:./freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:./freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:./freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:./freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:./freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:./freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:./freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:./freertos/queue.c **** 
1111:./freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:./freertos/queue.c **** 	{
1113:./freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 21


1114:./freertos/queue.c **** 
1115:./freertos/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:./freertos/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:./freertos/queue.c **** 		space'. */
1118:./freertos/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:./freertos/queue.c **** 		{
1120:./freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:./freertos/queue.c **** 
1122:./freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:./freertos/queue.c **** 
1124:./freertos/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:./freertos/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:./freertos/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:./freertos/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:./freertos/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:./freertos/queue.c **** 			messages (semaphores) available. */
1130:./freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:./freertos/queue.c **** 
1132:./freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:./freertos/queue.c **** 			be done when the queue is unlocked later. */
1134:./freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:./freertos/queue.c **** 			{
1136:./freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:./freertos/queue.c **** 				{
1138:./freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:./freertos/queue.c **** 					{
1140:./freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:./freertos/queue.c **** 						{
1142:./freertos/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:./freertos/queue.c **** 							posting	to the queue set caused a higher priority
1144:./freertos/queue.c **** 							task to	unblock.  A context switch is required. */
1145:./freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:./freertos/queue.c **** 							{
1147:./freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:./freertos/queue.c **** 							}
1149:./freertos/queue.c **** 							else
1150:./freertos/queue.c **** 							{
1151:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:./freertos/queue.c **** 							}
1153:./freertos/queue.c **** 						}
1154:./freertos/queue.c **** 						else
1155:./freertos/queue.c **** 						{
1156:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:./freertos/queue.c **** 						}
1158:./freertos/queue.c **** 					}
1159:./freertos/queue.c **** 					else
1160:./freertos/queue.c **** 					{
1161:./freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:./freertos/queue.c **** 						{
1163:./freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:./freertos/queue.c **** 							{
1165:./freertos/queue.c **** 								/* The task waiting has a higher priority so
1166:./freertos/queue.c **** 								record that a context switch is required. */
1167:./freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:./freertos/queue.c **** 								{
1169:./freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:./freertos/queue.c **** 								}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 22


1171:./freertos/queue.c **** 								else
1172:./freertos/queue.c **** 								{
1173:./freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:./freertos/queue.c **** 								}
1175:./freertos/queue.c **** 							}
1176:./freertos/queue.c **** 							else
1177:./freertos/queue.c **** 							{
1178:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:./freertos/queue.c **** 							}
1180:./freertos/queue.c **** 						}
1181:./freertos/queue.c **** 						else
1182:./freertos/queue.c **** 						{
1183:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:./freertos/queue.c **** 						}
1185:./freertos/queue.c **** 					}
1186:./freertos/queue.c **** 				}
1187:./freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:./freertos/queue.c **** 				{
1189:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:./freertos/queue.c **** 					{
1191:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:./freertos/queue.c **** 						{
1193:./freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:./freertos/queue.c **** 							context	switch is required. */
1195:./freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:./freertos/queue.c **** 							{
1197:./freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:./freertos/queue.c **** 							}
1199:./freertos/queue.c **** 							else
1200:./freertos/queue.c **** 							{
1201:./freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:./freertos/queue.c **** 							}
1203:./freertos/queue.c **** 						}
1204:./freertos/queue.c **** 						else
1205:./freertos/queue.c **** 						{
1206:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:./freertos/queue.c **** 						}
1208:./freertos/queue.c **** 					}
1209:./freertos/queue.c **** 					else
1210:./freertos/queue.c **** 					{
1211:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:./freertos/queue.c **** 					}
1213:./freertos/queue.c **** 				}
1214:./freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:./freertos/queue.c **** 			}
1216:./freertos/queue.c **** 			else
1217:./freertos/queue.c **** 			{
1218:./freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:./freertos/queue.c **** 				knows that data was posted while it was locked. */
1220:./freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:./freertos/queue.c **** 			}
1222:./freertos/queue.c **** 
1223:./freertos/queue.c **** 			xReturn = pdPASS;
1224:./freertos/queue.c **** 		}
1225:./freertos/queue.c **** 		else
1226:./freertos/queue.c **** 		{
1227:./freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 23


1228:./freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1229:./freertos/queue.c **** 		}
1230:./freertos/queue.c **** 	}
1231:./freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:./freertos/queue.c **** 
1233:./freertos/queue.c **** 	return xReturn;
1234:./freertos/queue.c **** }
1235:./freertos/queue.c **** /*-----------------------------------------------------------*/
1236:./freertos/queue.c **** 
1237:./freertos/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:./freertos/queue.c **** {
1239:./freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:./freertos/queue.c **** TimeOut_t xTimeOut;
1241:./freertos/queue.c **** int8_t *pcOriginalReadPosition;
1242:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:./freertos/queue.c **** 
1244:./freertos/queue.c **** 	configASSERT( pxQueue );
1245:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:./freertos/queue.c **** 	{
1248:./freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:./freertos/queue.c **** 	}
1250:./freertos/queue.c **** 	#endif
1251:./freertos/queue.c **** 
1252:./freertos/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:./freertos/queue.c **** 	statements within the function itself.  This is done in the interest
1254:./freertos/queue.c **** 	of execution time efficiency. */
1255:./freertos/queue.c **** 
1256:./freertos/queue.c **** 	for( ;; )
1257:./freertos/queue.c **** 	{
1258:./freertos/queue.c **** 		taskENTER_CRITICAL();
1259:./freertos/queue.c **** 		{
1260:./freertos/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:./freertos/queue.c **** 
1262:./freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:./freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:./freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:./freertos/queue.c **** 			{
1266:./freertos/queue.c **** 				/* Remember the read position in case the queue is only being
1267:./freertos/queue.c **** 				peeked. */
1268:./freertos/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:./freertos/queue.c **** 
1270:./freertos/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:./freertos/queue.c **** 
1272:./freertos/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:./freertos/queue.c **** 				{
1274:./freertos/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:./freertos/queue.c **** 
1276:./freertos/queue.c **** 					/* Actually removing data, not just peeking. */
1277:./freertos/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:./freertos/queue.c **** 
1279:./freertos/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:./freertos/queue.c **** 					{
1281:./freertos/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:./freertos/queue.c **** 						{
1283:./freertos/queue.c **** 							/* Record the information required to implement
1284:./freertos/queue.c **** 							priority inheritance should it become necessary. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 24


1285:./freertos/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:./freertos/queue.c **** 						}
1287:./freertos/queue.c **** 						else
1288:./freertos/queue.c **** 						{
1289:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:./freertos/queue.c **** 						}
1291:./freertos/queue.c **** 					}
1292:./freertos/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:./freertos/queue.c **** 
1294:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:./freertos/queue.c **** 					{
1296:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:./freertos/queue.c **** 						{
1298:./freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:./freertos/queue.c **** 						}
1300:./freertos/queue.c **** 						else
1301:./freertos/queue.c **** 						{
1302:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:./freertos/queue.c **** 						}
1304:./freertos/queue.c **** 					}
1305:./freertos/queue.c **** 					else
1306:./freertos/queue.c **** 					{
1307:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:./freertos/queue.c **** 					}
1309:./freertos/queue.c **** 				}
1310:./freertos/queue.c **** 				else
1311:./freertos/queue.c **** 				{
1312:./freertos/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:./freertos/queue.c **** 
1314:./freertos/queue.c **** 					/* The data is not being removed, so reset the read
1315:./freertos/queue.c **** 					pointer. */
1316:./freertos/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:./freertos/queue.c **** 
1318:./freertos/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:./freertos/queue.c **** 					any other tasks waiting for the data. */
1320:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:./freertos/queue.c **** 					{
1322:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:./freertos/queue.c **** 						{
1324:./freertos/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:./freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:./freertos/queue.c **** 						}
1327:./freertos/queue.c **** 						else
1328:./freertos/queue.c **** 						{
1329:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:./freertos/queue.c **** 						}
1331:./freertos/queue.c **** 					}
1332:./freertos/queue.c **** 					else
1333:./freertos/queue.c **** 					{
1334:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:./freertos/queue.c **** 					}
1336:./freertos/queue.c **** 				}
1337:./freertos/queue.c **** 
1338:./freertos/queue.c **** 				taskEXIT_CRITICAL();
1339:./freertos/queue.c **** 				return pdPASS;
1340:./freertos/queue.c **** 			}
1341:./freertos/queue.c **** 			else
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 25


1342:./freertos/queue.c **** 			{
1343:./freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:./freertos/queue.c **** 				{
1345:./freertos/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:./freertos/queue.c **** 					the block time has expired) so leave now. */
1347:./freertos/queue.c **** 					taskEXIT_CRITICAL();
1348:./freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:./freertos/queue.c **** 					return errQUEUE_EMPTY;
1350:./freertos/queue.c **** 				}
1351:./freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:./freertos/queue.c **** 				{
1353:./freertos/queue.c **** 					/* The queue was empty and a block time was specified so
1354:./freertos/queue.c **** 					configure the timeout structure. */
1355:./freertos/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:./freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:./freertos/queue.c **** 				}
1358:./freertos/queue.c **** 				else
1359:./freertos/queue.c **** 				{
1360:./freertos/queue.c **** 					/* Entry time was already set. */
1361:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:./freertos/queue.c **** 				}
1363:./freertos/queue.c **** 			}
1364:./freertos/queue.c **** 		}
1365:./freertos/queue.c **** 		taskEXIT_CRITICAL();
1366:./freertos/queue.c **** 
1367:./freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:./freertos/queue.c **** 		now the critical section has been exited. */
1369:./freertos/queue.c **** 
1370:./freertos/queue.c **** 		vTaskSuspendAll();
1371:./freertos/queue.c **** 		prvLockQueue( pxQueue );
1372:./freertos/queue.c **** 
1373:./freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:./freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:./freertos/queue.c **** 		{
1376:./freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:./freertos/queue.c **** 			{
1378:./freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:./freertos/queue.c **** 
1380:./freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:./freertos/queue.c **** 				{
1382:./freertos/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:./freertos/queue.c **** 					{
1384:./freertos/queue.c **** 						taskENTER_CRITICAL();
1385:./freertos/queue.c **** 						{
1386:./freertos/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:./freertos/queue.c **** 						}
1388:./freertos/queue.c **** 						taskEXIT_CRITICAL();
1389:./freertos/queue.c **** 					}
1390:./freertos/queue.c **** 					else
1391:./freertos/queue.c **** 					{
1392:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:./freertos/queue.c **** 					}
1394:./freertos/queue.c **** 				}
1395:./freertos/queue.c **** 				#endif
1396:./freertos/queue.c **** 
1397:./freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:./freertos/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 26


1399:./freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:./freertos/queue.c **** 				{
1401:./freertos/queue.c **** 					portYIELD_WITHIN_API();
1402:./freertos/queue.c **** 				}
1403:./freertos/queue.c **** 				else
1404:./freertos/queue.c **** 				{
1405:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:./freertos/queue.c **** 				}
1407:./freertos/queue.c **** 			}
1408:./freertos/queue.c **** 			else
1409:./freertos/queue.c **** 			{
1410:./freertos/queue.c **** 				/* Try again. */
1411:./freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1412:./freertos/queue.c **** 				( void ) xTaskResumeAll();
1413:./freertos/queue.c **** 			}
1414:./freertos/queue.c **** 		}
1415:./freertos/queue.c **** 		else
1416:./freertos/queue.c **** 		{
1417:./freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1418:./freertos/queue.c **** 			( void ) xTaskResumeAll();
1419:./freertos/queue.c **** 
1420:./freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:./freertos/queue.c **** 			{
1422:./freertos/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:./freertos/queue.c **** 				return errQUEUE_EMPTY;
1424:./freertos/queue.c **** 			}
1425:./freertos/queue.c **** 			else
1426:./freertos/queue.c **** 			{
1427:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:./freertos/queue.c **** 			}
1429:./freertos/queue.c **** 		}
1430:./freertos/queue.c **** 	}
1431:./freertos/queue.c **** }
1432:./freertos/queue.c **** /*-----------------------------------------------------------*/
1433:./freertos/queue.c **** 
1434:./freertos/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:./freertos/queue.c **** {
1436:./freertos/queue.c **** BaseType_t xReturn;
1437:./freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:./freertos/queue.c **** 
1440:./freertos/queue.c **** 	configASSERT( pxQueue );
1441:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:./freertos/queue.c **** 
1443:./freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:./freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:./freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:./freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:./freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:./freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:./freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:./freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:./freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:./freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:./freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:./freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:./freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 27


1456:./freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:./freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:./freertos/queue.c **** 
1459:./freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:./freertos/queue.c **** 	{
1461:./freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:./freertos/queue.c **** 
1463:./freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:./freertos/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:./freertos/queue.c **** 		{
1466:./freertos/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:./freertos/queue.c **** 
1468:./freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:./freertos/queue.c **** 
1470:./freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:./freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:./freertos/queue.c **** 
1473:./freertos/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:./freertos/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:./freertos/queue.c **** 			will know that an ISR has removed data while the queue was
1476:./freertos/queue.c **** 			locked. */
1477:./freertos/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:./freertos/queue.c **** 			{
1479:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:./freertos/queue.c **** 				{
1481:./freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:./freertos/queue.c **** 					{
1483:./freertos/queue.c **** 						/* The task waiting has a higher priority than us so
1484:./freertos/queue.c **** 						force a context switch. */
1485:./freertos/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:./freertos/queue.c **** 						{
1487:./freertos/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:./freertos/queue.c **** 						}
1489:./freertos/queue.c **** 						else
1490:./freertos/queue.c **** 						{
1491:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:./freertos/queue.c **** 						}
1493:./freertos/queue.c **** 					}
1494:./freertos/queue.c **** 					else
1495:./freertos/queue.c **** 					{
1496:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:./freertos/queue.c **** 					}
1498:./freertos/queue.c **** 				}
1499:./freertos/queue.c **** 				else
1500:./freertos/queue.c **** 				{
1501:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:./freertos/queue.c **** 				}
1503:./freertos/queue.c **** 			}
1504:./freertos/queue.c **** 			else
1505:./freertos/queue.c **** 			{
1506:./freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:./freertos/queue.c **** 				knows that data was removed while it was locked. */
1508:./freertos/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:./freertos/queue.c **** 			}
1510:./freertos/queue.c **** 
1511:./freertos/queue.c **** 			xReturn = pdPASS;
1512:./freertos/queue.c **** 		}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 28


1513:./freertos/queue.c **** 		else
1514:./freertos/queue.c **** 		{
1515:./freertos/queue.c **** 			xReturn = pdFAIL;
1516:./freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:./freertos/queue.c **** 		}
1518:./freertos/queue.c **** 	}
1519:./freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:./freertos/queue.c **** 
1521:./freertos/queue.c **** 	return xReturn;
1522:./freertos/queue.c **** }
1523:./freertos/queue.c **** /*-----------------------------------------------------------*/
1524:./freertos/queue.c **** 
1525:./freertos/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:./freertos/queue.c **** {
1527:./freertos/queue.c **** BaseType_t xReturn;
1528:./freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:./freertos/queue.c **** int8_t *pcOriginalReadPosition;
1530:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:./freertos/queue.c **** 
1532:./freertos/queue.c **** 	configASSERT( pxQueue );
1533:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:./freertos/queue.c **** 
1536:./freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:./freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:./freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:./freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:./freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:./freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:./freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:./freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:./freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:./freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:./freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:./freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:./freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:./freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:./freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:./freertos/queue.c **** 
1552:./freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:./freertos/queue.c **** 	{
1554:./freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:./freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:./freertos/queue.c **** 		{
1557:./freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:./freertos/queue.c **** 
1559:./freertos/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:./freertos/queue.c **** 			actually being removed from the queue. */
1561:./freertos/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:./freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:./freertos/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:./freertos/queue.c **** 
1565:./freertos/queue.c **** 			xReturn = pdPASS;
1566:./freertos/queue.c **** 		}
1567:./freertos/queue.c **** 		else
1568:./freertos/queue.c **** 		{
1569:./freertos/queue.c **** 			xReturn = pdFAIL;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 29


1570:./freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:./freertos/queue.c **** 		}
1572:./freertos/queue.c **** 	}
1573:./freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:./freertos/queue.c **** 
1575:./freertos/queue.c **** 	return xReturn;
1576:./freertos/queue.c **** }
1577:./freertos/queue.c **** /*-----------------------------------------------------------*/
1578:./freertos/queue.c **** 
1579:./freertos/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:./freertos/queue.c **** {
1581:./freertos/queue.c **** UBaseType_t uxReturn;
1582:./freertos/queue.c **** 
1583:./freertos/queue.c **** 	configASSERT( xQueue );
1584:./freertos/queue.c **** 
1585:./freertos/queue.c **** 	taskENTER_CRITICAL();
1586:./freertos/queue.c **** 	{
1587:./freertos/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:./freertos/queue.c **** 	}
1589:./freertos/queue.c **** 	taskEXIT_CRITICAL();
1590:./freertos/queue.c **** 
1591:./freertos/queue.c **** 	return uxReturn;
1592:./freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:./freertos/queue.c **** /*-----------------------------------------------------------*/
1594:./freertos/queue.c **** 
1595:./freertos/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:./freertos/queue.c **** {
1597:./freertos/queue.c **** UBaseType_t uxReturn;
1598:./freertos/queue.c **** Queue_t *pxQueue;
1599:./freertos/queue.c **** 
1600:./freertos/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:./freertos/queue.c **** 	configASSERT( pxQueue );
1602:./freertos/queue.c **** 
1603:./freertos/queue.c **** 	taskENTER_CRITICAL();
1604:./freertos/queue.c **** 	{
1605:./freertos/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:./freertos/queue.c **** 	}
1607:./freertos/queue.c **** 	taskEXIT_CRITICAL();
1608:./freertos/queue.c **** 
1609:./freertos/queue.c **** 	return uxReturn;
1610:./freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:./freertos/queue.c **** /*-----------------------------------------------------------*/
1612:./freertos/queue.c **** 
1613:./freertos/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:./freertos/queue.c **** {
1615:./freertos/queue.c **** UBaseType_t uxReturn;
1616:./freertos/queue.c **** 
1617:./freertos/queue.c **** 	configASSERT( xQueue );
1618:./freertos/queue.c **** 
1619:./freertos/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:./freertos/queue.c **** 
1621:./freertos/queue.c **** 	return uxReturn;
1622:./freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:./freertos/queue.c **** /*-----------------------------------------------------------*/
1624:./freertos/queue.c **** 
1625:./freertos/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:./freertos/queue.c **** {
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 30


1627:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:./freertos/queue.c **** 
1629:./freertos/queue.c **** 	configASSERT( pxQueue );
1630:./freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:./freertos/queue.c **** 
1632:./freertos/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:./freertos/queue.c **** 	{
1634:./freertos/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:./freertos/queue.c **** 	}
1636:./freertos/queue.c **** 	#endif
1637:./freertos/queue.c **** 
1638:./freertos/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:./freertos/queue.c **** 	{
1640:./freertos/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:./freertos/queue.c **** 		again. */
1642:./freertos/queue.c **** 		vPortFree( pxQueue );
1643:./freertos/queue.c **** 	}
1644:./freertos/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:./freertos/queue.c **** 	{
1646:./freertos/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:./freertos/queue.c **** 		check before attempting to free the memory. */
1648:./freertos/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:./freertos/queue.c **** 		{
1650:./freertos/queue.c **** 			vPortFree( pxQueue );
1651:./freertos/queue.c **** 		}
1652:./freertos/queue.c **** 		else
1653:./freertos/queue.c **** 		{
1654:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:./freertos/queue.c **** 		}
1656:./freertos/queue.c **** 	}
1657:./freertos/queue.c **** 	#else
1658:./freertos/queue.c **** 	{
1659:./freertos/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:./freertos/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:./freertos/queue.c **** 		( void ) pxQueue;
1662:./freertos/queue.c **** 	}
1663:./freertos/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:./freertos/queue.c **** }
1665:./freertos/queue.c **** /*-----------------------------------------------------------*/
1666:./freertos/queue.c **** 
1667:./freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:./freertos/queue.c **** 
1669:./freertos/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:./freertos/queue.c **** 	{
1671:./freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:./freertos/queue.c **** 	}
1673:./freertos/queue.c **** 
1674:./freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:./freertos/queue.c **** /*-----------------------------------------------------------*/
1676:./freertos/queue.c **** 
1677:./freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:./freertos/queue.c **** 
1679:./freertos/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:./freertos/queue.c **** 	{
1681:./freertos/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:./freertos/queue.c **** 	}
1683:./freertos/queue.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 31


1684:./freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:./freertos/queue.c **** /*-----------------------------------------------------------*/
1686:./freertos/queue.c **** 
1687:./freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:./freertos/queue.c **** 
1689:./freertos/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:./freertos/queue.c **** 	{
1691:./freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:./freertos/queue.c **** 	}
1693:./freertos/queue.c **** 
1694:./freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:./freertos/queue.c **** /*-----------------------------------------------------------*/
1696:./freertos/queue.c **** 
1697:./freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:./freertos/queue.c **** {
1699:./freertos/queue.c **** BaseType_t xReturn = pdFALSE;
1700:./freertos/queue.c **** UBaseType_t uxMessagesWaiting;
1701:./freertos/queue.c **** 
1702:./freertos/queue.c **** 	/* This function is called from a critical section. */
1703:./freertos/queue.c **** 
1704:./freertos/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:./freertos/queue.c **** 
1706:./freertos/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:./freertos/queue.c **** 	{
1708:./freertos/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:./freertos/queue.c **** 		{
1710:./freertos/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:./freertos/queue.c **** 			{
1712:./freertos/queue.c **** 				/* The mutex is no longer being held. */
1713:./freertos/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:./freertos/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:./freertos/queue.c **** 			}
1716:./freertos/queue.c **** 			else
1717:./freertos/queue.c **** 			{
1718:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:./freertos/queue.c **** 			}
1720:./freertos/queue.c **** 		}
1721:./freertos/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:./freertos/queue.c **** 	}
1723:./freertos/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:./freertos/queue.c **** 	{
1725:./freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:./freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:./freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:./freertos/queue.c **** 		{
1729:./freertos/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:./freertos/queue.c **** 		}
1731:./freertos/queue.c **** 		else
1732:./freertos/queue.c **** 		{
1733:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:./freertos/queue.c **** 		}
1735:./freertos/queue.c **** 	}
1736:./freertos/queue.c **** 	else
1737:./freertos/queue.c **** 	{
1738:./freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:./freertos/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:./freertos/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 32


1741:./freertos/queue.c **** 		{
1742:./freertos/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1743:./freertos/queue.c **** 		}
1744:./freertos/queue.c **** 		else
1745:./freertos/queue.c **** 		{
1746:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:./freertos/queue.c **** 		}
1748:./freertos/queue.c **** 
1749:./freertos/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:./freertos/queue.c **** 		{
1751:./freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:./freertos/queue.c **** 			{
1753:./freertos/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:./freertos/queue.c **** 				one from the recorded number of items in the queue so when
1755:./freertos/queue.c **** 				one is added again below the number of recorded items remains
1756:./freertos/queue.c **** 				correct. */
1757:./freertos/queue.c **** 				--uxMessagesWaiting;
1758:./freertos/queue.c **** 			}
1759:./freertos/queue.c **** 			else
1760:./freertos/queue.c **** 			{
1761:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:./freertos/queue.c **** 			}
1763:./freertos/queue.c **** 		}
1764:./freertos/queue.c **** 		else
1765:./freertos/queue.c **** 		{
1766:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:./freertos/queue.c **** 		}
1768:./freertos/queue.c **** 	}
1769:./freertos/queue.c **** 
1770:./freertos/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:./freertos/queue.c **** 
1772:./freertos/queue.c **** 	return xReturn;
1773:./freertos/queue.c **** }
1774:./freertos/queue.c **** /*-----------------------------------------------------------*/
1775:./freertos/queue.c **** 
1776:./freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:./freertos/queue.c **** {
1778:./freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:./freertos/queue.c **** 	{
1780:./freertos/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:./freertos/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:./freertos/queue.c **** 		{
1783:./freertos/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:./freertos/queue.c **** 		}
1785:./freertos/queue.c **** 		else
1786:./freertos/queue.c **** 		{
1787:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:./freertos/queue.c **** 		}
1789:./freertos/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:./freertos/queue.c **** 	}
1791:./freertos/queue.c **** }
1792:./freertos/queue.c **** /*-----------------------------------------------------------*/
1793:./freertos/queue.c **** 
1794:./freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:./freertos/queue.c **** {
1796:./freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:./freertos/queue.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 33


1798:./freertos/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:./freertos/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:./freertos/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:./freertos/queue.c **** 	updated. */
1802:./freertos/queue.c **** 	taskENTER_CRITICAL();
1803:./freertos/queue.c **** 	{
1804:./freertos/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:./freertos/queue.c **** 
1806:./freertos/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:./freertos/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:./freertos/queue.c **** 		{
1809:./freertos/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:./freertos/queue.c **** 			blocked waiting for data to become available? */
1811:./freertos/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:./freertos/queue.c **** 			{
1813:./freertos/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:./freertos/queue.c **** 				{
1815:./freertos/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:./freertos/queue.c **** 					{
1817:./freertos/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:./freertos/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:./freertos/queue.c **** 						A context switch is required. */
1820:./freertos/queue.c **** 						vTaskMissedYield();
1821:./freertos/queue.c **** 					}
1822:./freertos/queue.c **** 					else
1823:./freertos/queue.c **** 					{
1824:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:./freertos/queue.c **** 					}
1826:./freertos/queue.c **** 				}
1827:./freertos/queue.c **** 				else
1828:./freertos/queue.c **** 				{
1829:./freertos/queue.c **** 					/* Tasks that are removed from the event list will get
1830:./freertos/queue.c **** 					added to the pending ready list as the scheduler is still
1831:./freertos/queue.c **** 					suspended. */
1832:./freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:./freertos/queue.c **** 					{
1834:./freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:./freertos/queue.c **** 						{
1836:./freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:./freertos/queue.c **** 							context	switch is required. */
1838:./freertos/queue.c **** 							vTaskMissedYield();
1839:./freertos/queue.c **** 						}
1840:./freertos/queue.c **** 						else
1841:./freertos/queue.c **** 						{
1842:./freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:./freertos/queue.c **** 						}
1844:./freertos/queue.c **** 					}
1845:./freertos/queue.c **** 					else
1846:./freertos/queue.c **** 					{
1847:./freertos/queue.c **** 						break;
1848:./freertos/queue.c **** 					}
1849:./freertos/queue.c **** 				}
1850:./freertos/queue.c **** 			}
1851:./freertos/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:./freertos/queue.c **** 			{
1853:./freertos/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:./freertos/queue.c **** 				the pending ready list as the scheduler is still suspended. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 34


1855:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:./freertos/queue.c **** 				{
1857:./freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:./freertos/queue.c **** 					{
1859:./freertos/queue.c **** 						/* The task waiting has a higher priority so record that
1860:./freertos/queue.c **** 						a context switch is required. */
1861:./freertos/queue.c **** 						vTaskMissedYield();
1862:./freertos/queue.c **** 					}
1863:./freertos/queue.c **** 					else
1864:./freertos/queue.c **** 					{
1865:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:./freertos/queue.c **** 					}
1867:./freertos/queue.c **** 				}
1868:./freertos/queue.c **** 				else
1869:./freertos/queue.c **** 				{
1870:./freertos/queue.c **** 					break;
1871:./freertos/queue.c **** 				}
1872:./freertos/queue.c **** 			}
1873:./freertos/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:./freertos/queue.c **** 
1875:./freertos/queue.c **** 			--cTxLock;
1876:./freertos/queue.c **** 		}
1877:./freertos/queue.c **** 
1878:./freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:./freertos/queue.c **** 	}
1880:./freertos/queue.c **** 	taskEXIT_CRITICAL();
1881:./freertos/queue.c **** 
1882:./freertos/queue.c **** 	/* Do the same for the Rx lock. */
1883:./freertos/queue.c **** 	taskENTER_CRITICAL();
1884:./freertos/queue.c **** 	{
1885:./freertos/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:./freertos/queue.c **** 
1887:./freertos/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:./freertos/queue.c **** 		{
1889:./freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:./freertos/queue.c **** 			{
1891:./freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:./freertos/queue.c **** 				{
1893:./freertos/queue.c **** 					vTaskMissedYield();
1894:./freertos/queue.c **** 				}
1895:./freertos/queue.c **** 				else
1896:./freertos/queue.c **** 				{
1897:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:./freertos/queue.c **** 				}
1899:./freertos/queue.c **** 
1900:./freertos/queue.c **** 				--cRxLock;
1901:./freertos/queue.c **** 			}
1902:./freertos/queue.c **** 			else
1903:./freertos/queue.c **** 			{
1904:./freertos/queue.c **** 				break;
1905:./freertos/queue.c **** 			}
1906:./freertos/queue.c **** 		}
1907:./freertos/queue.c **** 
1908:./freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:./freertos/queue.c **** 	}
1910:./freertos/queue.c **** 	taskEXIT_CRITICAL();
1911:./freertos/queue.c **** }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 35


1912:./freertos/queue.c **** /*-----------------------------------------------------------*/
1913:./freertos/queue.c **** 
1914:./freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:./freertos/queue.c **** {
1916:./freertos/queue.c **** BaseType_t xReturn;
1917:./freertos/queue.c **** 
1918:./freertos/queue.c **** 	taskENTER_CRITICAL();
1919:./freertos/queue.c **** 	{
1920:./freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:./freertos/queue.c **** 		{
1922:./freertos/queue.c **** 			xReturn = pdTRUE;
1923:./freertos/queue.c **** 		}
1924:./freertos/queue.c **** 		else
1925:./freertos/queue.c **** 		{
1926:./freertos/queue.c **** 			xReturn = pdFALSE;
1927:./freertos/queue.c **** 		}
1928:./freertos/queue.c **** 	}
1929:./freertos/queue.c **** 	taskEXIT_CRITICAL();
1930:./freertos/queue.c **** 
1931:./freertos/queue.c **** 	return xReturn;
1932:./freertos/queue.c **** }
1933:./freertos/queue.c **** /*-----------------------------------------------------------*/
1934:./freertos/queue.c **** 
1935:./freertos/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:./freertos/queue.c **** {
1937:./freertos/queue.c **** BaseType_t xReturn;
1938:./freertos/queue.c **** 
1939:./freertos/queue.c **** 	configASSERT( xQueue );
1940:./freertos/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:./freertos/queue.c **** 	{
1942:./freertos/queue.c **** 		xReturn = pdTRUE;
1943:./freertos/queue.c **** 	}
1944:./freertos/queue.c **** 	else
1945:./freertos/queue.c **** 	{
1946:./freertos/queue.c **** 		xReturn = pdFALSE;
1947:./freertos/queue.c **** 	}
1948:./freertos/queue.c **** 
1949:./freertos/queue.c **** 	return xReturn;
1950:./freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:./freertos/queue.c **** /*-----------------------------------------------------------*/
1952:./freertos/queue.c **** 
1953:./freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:./freertos/queue.c **** {
  29              		.loc 1 1954 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
1955:./freertos/queue.c **** BaseType_t xReturn;
1956:./freertos/queue.c **** 
1957:./freertos/queue.c **** 	taskENTER_CRITICAL();
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 36


  40              		.loc 1 1957 0
  41 0004 FFF7FEFF 		bl	vPortEnterCritical
  42              	.LVL1:
1958:./freertos/queue.c **** 	{
1959:./freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  43              		.loc 1 1959 0
  44 0008 A26B     		ldr	r2, [r4, #56]
  45 000a E36B     		ldr	r3, [r4, #60]
  46 000c 9A42     		cmp	r2, r3
  47 000e 01D1     		bne	.L3
1960:./freertos/queue.c **** 		{
1961:./freertos/queue.c **** 			xReturn = pdTRUE;
  48              		.loc 1 1961 0
  49 0010 0124     		movs	r4, #1
  50              	.LVL2:
  51 0012 00E0     		b	.L2
  52              	.LVL3:
  53              	.L3:
1962:./freertos/queue.c **** 		}
1963:./freertos/queue.c **** 		else
1964:./freertos/queue.c **** 		{
1965:./freertos/queue.c **** 			xReturn = pdFALSE;
  54              		.loc 1 1965 0
  55 0014 0024     		movs	r4, #0
  56              	.LVL4:
  57              	.L2:
1966:./freertos/queue.c **** 		}
1967:./freertos/queue.c **** 	}
1968:./freertos/queue.c **** 	taskEXIT_CRITICAL();
  58              		.loc 1 1968 0
  59 0016 FFF7FEFF 		bl	vPortExitCritical
  60              	.LVL5:
1969:./freertos/queue.c **** 
1970:./freertos/queue.c **** 	return xReturn;
1971:./freertos/queue.c **** }
  61              		.loc 1 1971 0
  62 001a 2046     		mov	r0, r4
  63 001c 10BD     		pop	{r4, pc}
  64              		.cfi_endproc
  65              	.LFE136:
  67 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  72              	prvIsQueueEmpty:
  73              	.LFB134:
1915:./freertos/queue.c **** BaseType_t xReturn;
  74              		.loc 1 1915 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              	.LVL6:
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 37


  84 0002 0446     		mov	r4, r0
1918:./freertos/queue.c **** 	{
  85              		.loc 1 1918 0
  86 0004 FFF7FEFF 		bl	vPortEnterCritical
  87              	.LVL7:
1920:./freertos/queue.c **** 		{
  88              		.loc 1 1920 0
  89 0008 A36B     		ldr	r3, [r4, #56]
  90 000a 0BB9     		cbnz	r3, .L7
1922:./freertos/queue.c **** 		}
  91              		.loc 1 1922 0
  92 000c 0124     		movs	r4, #1
  93              	.LVL8:
  94 000e 00E0     		b	.L6
  95              	.LVL9:
  96              	.L7:
1926:./freertos/queue.c **** 		}
  97              		.loc 1 1926 0
  98 0010 0024     		movs	r4, #0
  99              	.LVL10:
 100              	.L6:
1929:./freertos/queue.c **** 
 101              		.loc 1 1929 0
 102 0012 FFF7FEFF 		bl	vPortExitCritical
 103              	.LVL11:
1932:./freertos/queue.c **** /*-----------------------------------------------------------*/
 104              		.loc 1 1932 0
 105 0016 2046     		mov	r0, r4
 106 0018 10BD     		pop	{r4, pc}
 107              		.cfi_endproc
 108              	.LFE134:
 110 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	prvCopyDataToQueue:
 116              	.LFB131:
1698:./freertos/queue.c **** BaseType_t xReturn = pdFALSE;
 117              		.loc 1 1698 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL12:
 122 0000 70B5     		push	{r4, r5, r6, lr}
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 0446     		mov	r4, r0
 130 0004 1646     		mov	r6, r2
 131              	.LVL13:
1704:./freertos/queue.c **** 
 132              		.loc 1 1704 0
 133 0006 856B     		ldr	r5, [r0, #56]
 134              	.LVL14:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 38


1706:./freertos/queue.c **** 	{
 135              		.loc 1 1706 0
 136 0008 026C     		ldr	r2, [r0, #64]
 137              	.LVL15:
 138 000a 3AB9     		cbnz	r2, .L10
1710:./freertos/queue.c **** 			{
 139              		.loc 1 1710 0
 140 000c 0368     		ldr	r3, [r0]
 141 000e 43BB     		cbnz	r3, .L14
1713:./freertos/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 142              		.loc 1 1713 0
 143 0010 4068     		ldr	r0, [r0, #4]
 144              	.LVL16:
 145 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 146              	.LVL17:
1714:./freertos/queue.c **** 			}
 147              		.loc 1 1714 0
 148 0016 0023     		movs	r3, #0
 149 0018 6360     		str	r3, [r4, #4]
 150 001a 29E0     		b	.L11
 151              	.LVL18:
 152              	.L10:
1723:./freertos/queue.c **** 	{
 153              		.loc 1 1723 0
 154 001c 6EB9     		cbnz	r6, .L12
1725:./freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 155              		.loc 1 1725 0
 156 001e 8068     		ldr	r0, [r0, #8]
 157              	.LVL19:
 158 0020 FFF7FEFF 		bl	memcpy
 159              	.LVL20:
1726:./freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 160              		.loc 1 1726 0
 161 0024 A268     		ldr	r2, [r4, #8]
 162 0026 236C     		ldr	r3, [r4, #64]
 163 0028 1344     		add	r3, r3, r2
 164 002a A360     		str	r3, [r4, #8]
1727:./freertos/queue.c **** 		{
 165              		.loc 1 1727 0
 166 002c 6268     		ldr	r2, [r4, #4]
 167 002e 9342     		cmp	r3, r2
 168 0030 19D3     		bcc	.L15
1729:./freertos/queue.c **** 		}
 169              		.loc 1 1729 0
 170 0032 2368     		ldr	r3, [r4]
 171 0034 A360     		str	r3, [r4, #8]
1699:./freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 172              		.loc 1 1699 0
 173 0036 0020     		movs	r0, #0
 174 0038 1AE0     		b	.L11
 175              	.LVL21:
 176              	.L12:
1738:./freertos/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 177              		.loc 1 1738 0
 178 003a C068     		ldr	r0, [r0, #12]
 179              	.LVL22:
 180 003c FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 39


 181              	.LVL23:
1739:./freertos/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 182              		.loc 1 1739 0
 183 0040 236C     		ldr	r3, [r4, #64]
 184 0042 5B42     		negs	r3, r3
 185 0044 E268     		ldr	r2, [r4, #12]
 186 0046 1A44     		add	r2, r2, r3
 187 0048 E260     		str	r2, [r4, #12]
1740:./freertos/queue.c **** 		{
 188              		.loc 1 1740 0
 189 004a 2168     		ldr	r1, [r4]
 190 004c 8A42     		cmp	r2, r1
 191 004e 02D2     		bcs	.L13
1742:./freertos/queue.c **** 		}
 192              		.loc 1 1742 0
 193 0050 6268     		ldr	r2, [r4, #4]
 194 0052 1344     		add	r3, r3, r2
 195 0054 E360     		str	r3, [r4, #12]
 196              	.L13:
1749:./freertos/queue.c **** 		{
 197              		.loc 1 1749 0
 198 0056 022E     		cmp	r6, #2
 199 0058 07D1     		bne	.L16
1751:./freertos/queue.c **** 			{
 200              		.loc 1 1751 0
 201 005a 45B1     		cbz	r5, .L17
1757:./freertos/queue.c **** 			}
 202              		.loc 1 1757 0
 203 005c 013D     		subs	r5, r5, #1
 204              	.LVL24:
1699:./freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 205              		.loc 1 1699 0
 206 005e 0020     		movs	r0, #0
 207 0060 06E0     		b	.L11
 208              	.LVL25:
 209              	.L14:
 210 0062 0020     		movs	r0, #0
 211              	.LVL26:
 212 0064 04E0     		b	.L11
 213              	.LVL27:
 214              	.L15:
 215 0066 0020     		movs	r0, #0
 216 0068 02E0     		b	.L11
 217              	.L16:
 218 006a 0020     		movs	r0, #0
 219 006c 00E0     		b	.L11
 220              	.L17:
 221 006e 0020     		movs	r0, #0
 222              	.LVL28:
 223              	.L11:
1770:./freertos/queue.c **** 
 224              		.loc 1 1770 0
 225 0070 0135     		adds	r5, r5, #1
 226              	.LVL29:
 227 0072 A563     		str	r5, [r4, #56]
1773:./freertos/queue.c **** /*-----------------------------------------------------------*/
 228              		.loc 1 1773 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 40


 229 0074 70BD     		pop	{r4, r5, r6, pc}
 230              		.cfi_endproc
 231              	.LFE131:
 233 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 234              		.align	2
 235              		.thumb
 236              		.thumb_func
 238              	prvCopyDataFromQueue:
 239              	.LFB132:
1777:./freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 240              		.loc 1 1777 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL30:
1778:./freertos/queue.c **** 	{
 245              		.loc 1 1778 0
 246 0000 026C     		ldr	r2, [r0, #64]
 247 0002 72B1     		cbz	r2, .L23
1777:./freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 248              		.loc 1 1777 0
 249 0004 10B5     		push	{r4, lr}
 250              	.LCFI3:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 4, -8
 253              		.cfi_offset 14, -4
 254 0006 0346     		mov	r3, r0
1780:./freertos/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 255              		.loc 1 1780 0
 256 0008 C468     		ldr	r4, [r0, #12]
 257 000a 1444     		add	r4, r4, r2
 258 000c C460     		str	r4, [r0, #12]
1781:./freertos/queue.c **** 		{
 259              		.loc 1 1781 0
 260 000e 4068     		ldr	r0, [r0, #4]
 261              	.LVL31:
 262 0010 8442     		cmp	r4, r0
 263 0012 01D3     		bcc	.L21
1783:./freertos/queue.c **** 		}
 264              		.loc 1 1783 0
 265 0014 1868     		ldr	r0, [r3]
 266 0016 D860     		str	r0, [r3, #12]
 267              	.L21:
 268 0018 0846     		mov	r0, r1
1789:./freertos/queue.c **** 	}
 269              		.loc 1 1789 0
 270 001a D968     		ldr	r1, [r3, #12]
 271              	.LVL32:
 272 001c FFF7FEFF 		bl	memcpy
 273              	.LVL33:
 274 0020 10BD     		pop	{r4, pc}
 275              	.LVL34:
 276              	.L23:
 277              	.LCFI4:
 278              		.cfi_def_cfa_offset 0
 279              		.cfi_restore 4
 280              		.cfi_restore 14
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 41


 281 0022 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE132:
 285              		.section	.text.prvUnlockQueue,"ax",%progbits
 286              		.align	2
 287              		.thumb
 288              		.thumb_func
 290              	prvUnlockQueue:
 291              	.LFB133:
1795:./freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 292              		.loc 1 1795 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL35:
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 3, -16
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 5, -8
 303              		.cfi_offset 14, -4
 304 0002 0546     		mov	r5, r0
1802:./freertos/queue.c **** 	{
 305              		.loc 1 1802 0
 306 0004 FFF7FEFF 		bl	vPortEnterCritical
 307              	.LVL36:
 308              	.LBB76:
1804:./freertos/queue.c **** 
 309              		.loc 1 1804 0
 310 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 311 000c 64B2     		sxtb	r4, r4
 312              	.LVL37:
1807:./freertos/queue.c **** 		{
 313              		.loc 1 1807 0
 314 000e 0AE0     		b	.L25
 315              	.L28:
1855:./freertos/queue.c **** 				{
 316              		.loc 1 1855 0
 317 0010 6B6A     		ldr	r3, [r5, #36]
 318 0012 53B1     		cbz	r3, .L26
1857:./freertos/queue.c **** 					{
 319              		.loc 1 1857 0
 320 0014 05F12400 		add	r0, r5, #36
 321 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 322              	.LVL38:
 323 001c 08B1     		cbz	r0, .L27
1861:./freertos/queue.c **** 					}
 324              		.loc 1 1861 0
 325 001e FFF7FEFF 		bl	vTaskMissedYield
 326              	.LVL39:
 327              	.L27:
1875:./freertos/queue.c **** 		}
 328              		.loc 1 1875 0
 329 0022 013C     		subs	r4, r4, #1
 330              	.LVL40:
 331 0024 64B2     		sxtb	r4, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 42


 332              	.LVL41:
 333              	.L25:
1807:./freertos/queue.c **** 		{
 334              		.loc 1 1807 0
 335 0026 002C     		cmp	r4, #0
 336 0028 F2DC     		bgt	.L28
 337              	.L26:
1878:./freertos/queue.c **** 	}
 338              		.loc 1 1878 0
 339 002a FF23     		movs	r3, #255
 340 002c 85F84530 		strb	r3, [r5, #69]
 341              	.LBE76:
1880:./freertos/queue.c **** 
 342              		.loc 1 1880 0
 343 0030 FFF7FEFF 		bl	vPortExitCritical
 344              	.LVL42:
1883:./freertos/queue.c **** 	{
 345              		.loc 1 1883 0
 346 0034 FFF7FEFF 		bl	vPortEnterCritical
 347              	.LVL43:
 348              	.LBB77:
1885:./freertos/queue.c **** 
 349              		.loc 1 1885 0
 350 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 351              	.LVL44:
 352 003c 64B2     		sxtb	r4, r4
 353              	.LVL45:
1887:./freertos/queue.c **** 		{
 354              		.loc 1 1887 0
 355 003e 0AE0     		b	.L29
 356              	.L32:
1889:./freertos/queue.c **** 			{
 357              		.loc 1 1889 0
 358 0040 2B69     		ldr	r3, [r5, #16]
 359 0042 53B1     		cbz	r3, .L30
1891:./freertos/queue.c **** 				{
 360              		.loc 1 1891 0
 361 0044 05F11000 		add	r0, r5, #16
 362 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 363              	.LVL46:
 364 004c 08B1     		cbz	r0, .L31
1893:./freertos/queue.c **** 				}
 365              		.loc 1 1893 0
 366 004e FFF7FEFF 		bl	vTaskMissedYield
 367              	.LVL47:
 368              	.L31:
1900:./freertos/queue.c **** 			}
 369              		.loc 1 1900 0
 370 0052 013C     		subs	r4, r4, #1
 371              	.LVL48:
 372 0054 64B2     		sxtb	r4, r4
 373              	.LVL49:
 374              	.L29:
1887:./freertos/queue.c **** 		{
 375              		.loc 1 1887 0
 376 0056 002C     		cmp	r4, #0
 377 0058 F2DC     		bgt	.L32
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 43


 378              	.L30:
1908:./freertos/queue.c **** 	}
 379              		.loc 1 1908 0
 380 005a FF23     		movs	r3, #255
 381 005c 85F84430 		strb	r3, [r5, #68]
 382              	.LBE77:
1910:./freertos/queue.c **** }
 383              		.loc 1 1910 0
 384 0060 FFF7FEFF 		bl	vPortExitCritical
 385              	.LVL50:
 386 0064 38BD     		pop	{r3, r4, r5, pc}
 387              		.cfi_endproc
 388              	.LFE133:
 390 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 391              		.align	2
 392              		.global	xQueueGenericReset
 393              		.thumb
 394              		.thumb_func
 396              	xQueueGenericReset:
 397              	.LFB116:
 280:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 398              		.loc 1 280 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL51:
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              	.LCFI6:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 3, -16
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410              	.LVL52:
 283:./freertos/queue.c **** 
 411              		.loc 1 283 0
 412 0002 40B9     		cbnz	r0, .L35
 413              	.LBB78:
 414              	.LBB79:
 415              		.file 2 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h"
   1:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*
   2:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     All rights reserved
   4:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   5:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   7:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
   9:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  13:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  14:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 44


  18:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  19:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  20:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  25:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  26:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  27:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  32:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****      *                                                                       *
  37:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     ***************************************************************************
  38:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  39:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     defined configASSERT()?
  42:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  43:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     embedded software for free we request you assist our global community by
  45:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     participating in the support forum.
  46:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  47:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  52:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  56:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  59:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  63:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     mission critical applications that require provable dependability.
  66:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  67:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     1 tab == 4 spaces!
  68:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** */
  69:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  70:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef PORTMACRO_H
  71:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define PORTMACRO_H
  72:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  73:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifdef __cplusplus
  74:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** extern "C"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 45


  75:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** {
  76:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
  77:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  78:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------
  79:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * Port specific definitions.
  80:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *
  81:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * given hardware and compiler.
  83:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *
  84:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  * These settings should not be altered.
  85:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  *-----------------------------------------------------------
  86:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****  */
  87:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  88:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Type definitions. */
  89:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portCHAR char
  90:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portFLOAT float
  91:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portDOUBLE double
  92:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portLONG long
  93:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSHORT short
  94:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSTACK_TYPE uint32_t
  95:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portBASE_TYPE long
  96:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
  97:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef portSTACK_TYPE StackType_t;
  98:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef long BaseType_t;
  99:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef unsigned long UBaseType_t;
 100:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 101:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if (configUSE_16_BIT_TICKS == 1)
 102:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     typedef uint16_t TickType_t;
 103:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portMAX_DELAY (TickType_t)0xffff
 104:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #else
 105:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** typedef uint32_t TickType_t;
 106:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portMAX_DELAY (TickType_t)0xffffffffUL
 107:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 108:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 	not need to be guarded with a critical section. */
 110:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTICK_TYPE_IS_ATOMIC 1
 111:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 112:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 113:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 114:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Architecture specifics. */
 115:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSTACK_GROWTH (-1)
 116:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)
 117:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portBYTE_ALIGNMENT 8
 118:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 119:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 120:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Scheduler utilities. */
 121:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portYIELD()                                                                      \
 122:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {                                                                                    \
 123:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Set a PendSV to request a context switch. */                                  \
 124:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;                                  \
 125:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                                                                                          \
 126:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely	\ \ \ \
 127:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         within the specified behaviour for the architecture. */                          \
 128:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("dsb");                                                           \
 129:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("isb");                                                           \
 130:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 131:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 46


 132:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNVIC_INT_CTRL_REG (*((volatile uint32_t *)0xe000ed04))
 133:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNVIC_PENDSVSET_BIT (1UL << 28UL)
 134:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portEND_SWITCHING_ISR(xSwitchRequired) \
 135:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     if (xSwitchRequired != pdFALSE)            \
 136:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portYIELD()
 137:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR(x)
 138:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 139:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 140:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /* Critical section management. */
 141:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortEnterCritical(void);
 142:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortExitCritical(void);
 143:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR() ulPortRaiseBASEPRI()
 144:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortSetBASEPRI(x)
 145:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portDISABLE_INTERRUPTS() vPortRaiseBASEPRI()
 146:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portENABLE_INTERRUPTS() vPortSetBASEPRI(0)
 147:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portENTER_CRITICAL() vPortEnterCritical()
 148:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portEXIT_CRITICAL() vPortExitCritical()
 149:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 150:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 151:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 152:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 153:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 154:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** (which build with all the ports) will build. */
 155:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTASK_FUNCTION_PROTO(vFunction, pvParameters) void vFunction(void *pvParameters)
 156:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portTASK_FUNCTION(vFunction, pvParameters) void vFunction(void *pvParameters)
 157:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 158:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 159:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Tickless idle/low power functionality. */
 160:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 161:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     extern void vPortSuppressTicksAndSleep(TickType_t xExpectedIdleTime);
 162:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPortSuppressTicksAndSleep(xExpectedIdleTim
 163:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 164:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /*-----------------------------------------------------------*/
 165:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 166:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Architecture specific optimisations. */
 167:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 168:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 169:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 170:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 171:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 172:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 173:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /* Generic helper function. */
 174:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     __attribute__((always_inline)) static inline uint8_t ucPortCountLeadingZeros(uint32_t ulBitmap)
 175:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 176:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint8_t ucReturn;
 177:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 178:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("clz %0, %1"
 179:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "=r"(ucReturn)
 180:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "r"(ulBitmap));
 181:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return ucReturn;
 182:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 183:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 184:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Check the configuration. */
 185:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #if (configMAX_PRIORITIES > 32)
 186:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is le
 187:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 188:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 47


 189:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 190:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portRECORD_READY_PRIORITY(uxPriority, uxReadyPriorities) (uxReadyPriorities) |= (1UL << (ux
 191:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portRESET_READY_PRIORITY(uxPriority, uxReadyPriorities) (uxReadyPriorities) &= ~(1UL << (ux
 192:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 193:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 194:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 195:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portGET_HIGHEST_PRIORITY(uxTopPriority, uxReadyPriorities) uxTopPriority = (31UL - (uint32_
 196:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 197:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 198:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 199:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 200:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 201:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifdef configASSERT
 202:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     void vPortValidateInterruptPriority(void);
 203:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortValidateInterruptPriority()
 204:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 205:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 206:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** /* portNOP() is not required by this port. */
 207:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portNOP()
 208:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 209:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portINLINE __inline
 210:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 211:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #ifndef portFORCE_INLINE
 212:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #define portFORCE_INLINE inline __attribute__((always_inline))
 213:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** #endif
 214:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 215:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt(void)
 216:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 217:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulCurrentInterrupt;
 218:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         BaseType_t xReturn;
 219:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 220:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 221:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile("mrs %0, ipsr"
 222:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****                        : "=r"(ulCurrentInterrupt));
 223:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 224:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         if (ulCurrentInterrupt == 0)
 225:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         {
 226:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             xReturn = pdFALSE;
 227:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         }
 228:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         else
 229:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         {
 230:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             xReturn = pdTRUE;
 231:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         }
 232:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 233:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return xReturn;
 234:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 235:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 236:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 237:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 238:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI(void)
 239:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 240:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulNewBASEPRI;
 241:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
 416              		.loc 2 242 0
 417              		.syntax unified
 418              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 48


 419 0004 4FF05003 			mov r3, #80												
 420 0008 83F31188 		msr basepri, r3											
 421 000c BFF36F8F 		isb														
 422 0010 BFF34F8F 		dsb														
 423              	
 424              	@ 0 "" 2
 425              	.LVL53:
 426              		.thumb
 427              		.syntax unified
 428              	.L36:
 429 0014 FEE7     		b	.L36
 430              	.L35:
 431 0016 0446     		mov	r4, r0
 432 0018 0D46     		mov	r5, r1
 433              	.LBE79:
 434              	.LBE78:
 285:./freertos/queue.c **** 	{
 435              		.loc 1 285 0
 436 001a FFF7FEFF 		bl	vPortEnterCritical
 437              	.LVL54:
 287:./freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 438              		.loc 1 287 0
 439 001e 2168     		ldr	r1, [r4]
 440 0020 E26B     		ldr	r2, [r4, #60]
 441 0022 236C     		ldr	r3, [r4, #64]
 442 0024 03FB0210 		mla	r0, r3, r2, r1
 443 0028 6060     		str	r0, [r4, #4]
 288:./freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 444              		.loc 1 288 0
 445 002a 0020     		movs	r0, #0
 446 002c A063     		str	r0, [r4, #56]
 289:./freertos/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 447              		.loc 1 289 0
 448 002e A160     		str	r1, [r4, #8]
 290:./freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 449              		.loc 1 290 0
 450 0030 013A     		subs	r2, r2, #1
 451 0032 02FB0313 		mla	r3, r2, r3, r1
 452 0036 E360     		str	r3, [r4, #12]
 291:./freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 453              		.loc 1 291 0
 454 0038 FF23     		movs	r3, #255
 455 003a 84F84430 		strb	r3, [r4, #68]
 292:./freertos/queue.c **** 
 456              		.loc 1 292 0
 457 003e 84F84530 		strb	r3, [r4, #69]
 294:./freertos/queue.c **** 		{
 458              		.loc 1 294 0
 459 0042 7DB9     		cbnz	r5, .L37
 301:./freertos/queue.c **** 			{
 460              		.loc 1 301 0
 461 0044 2369     		ldr	r3, [r4, #16]
 462 0046 ABB1     		cbz	r3, .L38
 303:./freertos/queue.c **** 				{
 463              		.loc 1 303 0
 464 0048 04F11000 		add	r0, r4, #16
 465 004c FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 49


 466              	.LVL55:
 467 0050 80B1     		cbz	r0, .L38
 305:./freertos/queue.c **** 				}
 468              		.loc 1 305 0
 469 0052 4FF08052 		mov	r2, #268435456
 470 0056 094B     		ldr	r3, .L40
 471 0058 1A60     		str	r2, [r3]
 472              		.syntax unified
 473              	@ 305 "./freertos/queue.c" 1
 474 005a BFF34F8F 		dsb
 475              	@ 0 "" 2
 476              	@ 305 "./freertos/queue.c" 1
 477 005e BFF36F8F 		isb
 478              	@ 0 "" 2
 479              		.thumb
 480              		.syntax unified
 481 0062 07E0     		b	.L38
 482              	.L37:
 320:./freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 483              		.loc 1 320 0
 484 0064 04F11000 		add	r0, r4, #16
 485 0068 FFF7FEFF 		bl	vListInitialise
 486              	.LVL56:
 321:./freertos/queue.c **** 		}
 487              		.loc 1 321 0
 488 006c 04F12400 		add	r0, r4, #36
 489 0070 FFF7FEFF 		bl	vListInitialise
 490              	.LVL57:
 491              	.L38:
 324:./freertos/queue.c **** 
 492              		.loc 1 324 0
 493 0074 FFF7FEFF 		bl	vPortExitCritical
 494              	.LVL58:
 329:./freertos/queue.c **** /*-----------------------------------------------------------*/
 495              		.loc 1 329 0
 496 0078 0120     		movs	r0, #1
 497 007a 38BD     		pop	{r3, r4, r5, pc}
 498              	.LVL59:
 499              	.L41:
 500              		.align	2
 501              	.L40:
 502 007c 04ED00E0 		.word	-536810236
 503              		.cfi_endproc
 504              	.LFE116:
 506              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 507              		.align	2
 508              		.thumb
 509              		.thumb_func
 511              	prvInitialiseNewQueue:
 512              	.LFB118:
 433:./freertos/queue.c **** 	/* Remove compiler warnings about unused parameters should
 513              		.loc 1 433 0
 514              		.cfi_startproc
 515              		@ args = 4, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              	.LVL60:
 518 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 50


 519              	.LCFI7:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
 523 0002 029B     		ldr	r3, [sp, #8]
 524              	.LVL61:
 438:./freertos/queue.c **** 	{
 525              		.loc 1 438 0
 526 0004 0C46     		mov	r4, r1
 527 0006 09B9     		cbnz	r1, .L43
 444:./freertos/queue.c **** 	}
 528              		.loc 1 444 0
 529 0008 1B60     		str	r3, [r3]
 530 000a 00E0     		b	.L44
 531              	.L43:
 449:./freertos/queue.c **** 	}
 532              		.loc 1 449 0
 533 000c 1A60     		str	r2, [r3]
 534              	.L44:
 454:./freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 535              		.loc 1 454 0
 536 000e D863     		str	r0, [r3, #60]
 455:./freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 537              		.loc 1 455 0
 538 0010 1C64     		str	r4, [r3, #64]
 456:./freertos/queue.c **** 
 539              		.loc 1 456 0
 540 0012 0121     		movs	r1, #1
 541              	.LVL62:
 542 0014 1846     		mov	r0, r3
 543              	.LVL63:
 544 0016 FFF7FEFF 		bl	xQueueGenericReset
 545              	.LVL64:
 546 001a 10BD     		pop	{r4, pc}
 547              		.cfi_endproc
 548              	.LFE118:
 550              		.section	.text.xQueueGenericCreate,"ax",%progbits
 551              		.align	2
 552              		.global	xQueueGenericCreate
 553              		.thumb
 554              		.thumb_func
 556              	xQueueGenericCreate:
 557              	.LFB117:
 387:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 558              		.loc 1 387 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              	.LVL65:
 392:./freertos/queue.c **** 
 563              		.loc 1 392 0
 564 0000 40B9     		cbnz	r0, .L47
 565              	.LBB80:
 566              	.LBB81:
 567              		.loc 2 242 0
 568              		.syntax unified
 569              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 51


 570 0002 4FF05003 			mov r3, #80												
 571 0006 83F31188 		msr basepri, r3											
 572 000a BFF36F8F 		isb														
 573 000e BFF34F8F 		dsb														
 574              	
 575              	@ 0 "" 2
 576              	.LVL66:
 577              		.thumb
 578              		.syntax unified
 579              	.L48:
 580 0012 FEE7     		b	.L48
 581              	.L47:
 582              	.LBE81:
 583              	.LBE80:
 387:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 584              		.loc 1 387 0
 585 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 586              	.LCFI8:
 587              		.cfi_def_cfa_offset 20
 588              		.cfi_offset 4, -20
 589              		.cfi_offset 5, -16
 590              		.cfi_offset 6, -12
 591              		.cfi_offset 7, -8
 592              		.cfi_offset 14, -4
 593 0016 83B0     		sub	sp, sp, #12
 594              	.LCFI9:
 595              		.cfi_def_cfa_offset 32
 596 0018 0346     		mov	r3, r0
 394:./freertos/queue.c **** 		{
 597              		.loc 1 394 0
 598 001a 11B1     		cbz	r1, .L51
 403:./freertos/queue.c **** 		}
 599              		.loc 1 403 0
 600 001c 01FB00F0 		mul	r0, r1, r0
 601              	.LVL67:
 602 0020 00E0     		b	.L49
 603              	.LVL68:
 604              	.L51:
 397:./freertos/queue.c **** 		}
 605              		.loc 1 397 0
 606 0022 0020     		movs	r0, #0
 607              	.LVL69:
 608              	.L49:
 609 0024 1D46     		mov	r5, r3
 610 0026 1746     		mov	r7, r2
 611 0028 0C46     		mov	r4, r1
 612              	.LVL70:
 406:./freertos/queue.c **** 
 613              		.loc 1 406 0
 614 002a 4830     		adds	r0, r0, #72
 615              	.LVL71:
 616 002c FFF7FEFF 		bl	pvPortMalloc
 617              	.LVL72:
 408:./freertos/queue.c **** 		{
 618              		.loc 1 408 0
 619 0030 0646     		mov	r6, r0
 620 0032 38B1     		cbz	r0, .L50
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 52


 621              	.LVL73:
 423:./freertos/queue.c **** 		}
 622              		.loc 1 423 0
 623 0034 0090     		str	r0, [sp]
 624 0036 3B46     		mov	r3, r7
 625 0038 00F14802 		add	r2, r0, #72
 626              	.LVL74:
 627 003c 2146     		mov	r1, r4
 628 003e 2846     		mov	r0, r5
 629              	.LVL75:
 630 0040 FFF7FEFF 		bl	prvInitialiseNewQueue
 631              	.LVL76:
 632              	.L50:
 427:./freertos/queue.c **** 
 633              		.loc 1 427 0
 634 0044 3046     		mov	r0, r6
 635 0046 03B0     		add	sp, sp, #12
 636              	.LCFI10:
 637              		.cfi_def_cfa_offset 20
 638              		@ sp needed
 639 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 640              		.cfi_endproc
 641              	.LFE117:
 643 004a 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 644              		.align	2
 645              		.global	xQueueGenericSend
 646              		.thumb
 647              		.thumb_func
 649              	xQueueGenericSend:
 650              	.LFB121:
 724:./freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 651              		.loc 1 724 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 16
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              	.LVL77:
 656 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 657              	.LCFI11:
 658              		.cfi_def_cfa_offset 20
 659              		.cfi_offset 4, -20
 660              		.cfi_offset 5, -16
 661              		.cfi_offset 6, -12
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 85B0     		sub	sp, sp, #20
 665              	.LCFI12:
 666              		.cfi_def_cfa_offset 40
 667 0004 0192     		str	r2, [sp, #4]
 668              	.LVL78:
 729:./freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 669              		.loc 1 729 0
 670 0006 40B9     		cbnz	r0, .L54
 671              	.LBB82:
 672              	.LBB83:
 673              		.loc 2 242 0
 674              		.syntax unified
 675              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 53


 676 0008 4FF05003 			mov r3, #80												
 677 000c 83F31188 		msr basepri, r3											
 678 0010 BFF36F8F 		isb														
 679 0014 BFF34F8F 		dsb														
 680              	
 681              	@ 0 "" 2
 682              	.LVL79:
 683              		.thumb
 684              		.syntax unified
 685              	.L55:
 686 0018 FEE7     		b	.L55
 687              	.LVL80:
 688              	.L54:
 689 001a 0446     		mov	r4, r0
 690              	.LBE83:
 691              	.LBE82:
 730:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 692              		.loc 1 730 0
 693 001c 19B9     		cbnz	r1, .L77
 730:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 694              		.loc 1 730 0 is_stmt 0 discriminator 2
 695 001e 026C     		ldr	r2, [r0, #64]
 696              	.LVL81:
 697 0020 1AB9     		cbnz	r2, .L78
 730:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 698              		.loc 1 730 0
 699 0022 0122     		movs	r2, #1
 700 0024 02E0     		b	.L56
 701              	.LVL82:
 702              	.L77:
 703 0026 0122     		movs	r2, #1
 704              	.LVL83:
 705 0028 00E0     		b	.L56
 706              	.L78:
 707 002a 0022     		movs	r2, #0
 708              	.L56:
 730:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 709              		.loc 1 730 0 discriminator 6
 710 002c 42B9     		cbnz	r2, .L57
 711              	.LBB84:
 712              	.LBB85:
 713              		.loc 2 242 0 is_stmt 1
 714              		.syntax unified
 715              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 716 002e 4FF05003 			mov r3, #80												
 717 0032 83F31188 		msr basepri, r3											
 718 0036 BFF36F8F 		isb														
 719 003a BFF34F8F 		dsb														
 720              	
 721              	@ 0 "" 2
 722              	.LVL84:
 723              		.thumb
 724              		.syntax unified
 725              	.L58:
 726 003e FEE7     		b	.L58
 727              	.LVL85:
 728              	.L57:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 54


 729              	.LBE85:
 730              	.LBE84:
 731:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 731              		.loc 1 731 0
 732 0040 022B     		cmp	r3, #2
 733 0042 03D1     		bne	.L79
 731:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 734              		.loc 1 731 0 is_stmt 0 discriminator 2
 735 0044 E26B     		ldr	r2, [r4, #60]
 736 0046 012A     		cmp	r2, #1
 737 0048 02D1     		bne	.L80
 738 004a 02E0     		b	.L59
 739              	.L79:
 731:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 740              		.loc 1 731 0
 741 004c 0122     		movs	r2, #1
 742 004e 00E0     		b	.L59
 743              	.L80:
 744 0050 0022     		movs	r2, #0
 745              	.L59:
 731:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 746              		.loc 1 731 0 discriminator 6
 747 0052 42B9     		cbnz	r2, .L60
 748              	.LBB86:
 749              	.LBB87:
 750              		.loc 2 242 0 is_stmt 1
 751              		.syntax unified
 752              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 753 0054 4FF05003 			mov r3, #80												
 754 0058 83F31188 		msr basepri, r3											
 755 005c BFF36F8F 		isb														
 756 0060 BFF34F8F 		dsb														
 757              	
 758              	@ 0 "" 2
 759              	.LVL86:
 760              		.thumb
 761              		.syntax unified
 762              	.L61:
 763 0064 FEE7     		b	.L61
 764              	.LVL87:
 765              	.L60:
 766 0066 1D46     		mov	r5, r3
 767 0068 0E46     		mov	r6, r1
 768              	.LBE87:
 769              	.LBE86:
 734:./freertos/queue.c **** 	}
 770              		.loc 1 734 0
 771 006a FFF7FEFF 		bl	xTaskGetSchedulerState
 772              	.LVL88:
 773 006e 18B9     		cbnz	r0, .L81
 734:./freertos/queue.c **** 	}
 774              		.loc 1 734 0 is_stmt 0 discriminator 2
 775 0070 019B     		ldr	r3, [sp, #4]
 776 0072 1BB9     		cbnz	r3, .L82
 734:./freertos/queue.c **** 	}
 777              		.loc 1 734 0
 778 0074 0123     		movs	r3, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 55


 779 0076 02E0     		b	.L62
 780              	.L81:
 781 0078 0123     		movs	r3, #1
 782 007a 00E0     		b	.L62
 783              	.L82:
 784 007c 0023     		movs	r3, #0
 785              	.L62:
 734:./freertos/queue.c **** 	}
 786              		.loc 1 734 0 discriminator 6
 787 007e 43B9     		cbnz	r3, .L83
 788              	.LBB88:
 789              	.LBB89:
 790              		.loc 2 242 0 is_stmt 1
 791              		.syntax unified
 792              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 793 0080 4FF05003 			mov r3, #80												
 794 0084 83F31188 		msr basepri, r3											
 795 0088 BFF36F8F 		isb														
 796 008c BFF34F8F 		dsb														
 797              	
 798              	@ 0 "" 2
 799              	.LVL89:
 800              		.thumb
 801              		.syntax unified
 802              	.L64:
 803 0090 FEE7     		b	.L64
 804              	.L83:
 805              	.LBE89:
 806              	.LBE88:
 807 0092 0027     		movs	r7, #0
 808              	.LVL90:
 809              	.L63:
 744:./freertos/queue.c **** 		{
 810              		.loc 1 744 0
 811 0094 FFF7FEFF 		bl	vPortEnterCritical
 812              	.LVL91:
 750:./freertos/queue.c **** 			{
 813              		.loc 1 750 0
 814 0098 A26B     		ldr	r2, [r4, #56]
 815 009a E36B     		ldr	r3, [r4, #60]
 816 009c 9A42     		cmp	r2, r3
 817 009e 01D3     		bcc	.L65
 750:./freertos/queue.c **** 			{
 818              		.loc 1 750 0 is_stmt 0 discriminator 1
 819 00a0 022D     		cmp	r5, #2
 820 00a2 21D1     		bne	.L66
 821              	.L65:
 753:./freertos/queue.c **** 
 822              		.loc 1 753 0 is_stmt 1
 823 00a4 2A46     		mov	r2, r5
 824 00a6 3146     		mov	r1, r6
 825 00a8 2046     		mov	r0, r4
 826 00aa FFF7FEFF 		bl	prvCopyDataToQueue
 827              	.LVL92:
 808:./freertos/queue.c **** 					{
 828              		.loc 1 808 0
 829 00ae 636A     		ldr	r3, [r4, #36]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 56


 830 00b0 6BB1     		cbz	r3, .L67
 810:./freertos/queue.c **** 						{
 831              		.loc 1 810 0
 832 00b2 04F12400 		add	r0, r4, #36
 833              	.LVL93:
 834 00b6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 835              	.LVL94:
 836 00ba 88B1     		cbz	r0, .L68
 816:./freertos/queue.c **** 						}
 837              		.loc 1 816 0
 838 00bc 4FF08052 		mov	r2, #268435456
 839 00c0 324B     		ldr	r3, .L85
 840 00c2 1A60     		str	r2, [r3]
 841              		.syntax unified
 842              	@ 816 "./freertos/queue.c" 1
 843 00c4 BFF34F8F 		dsb
 844              	@ 0 "" 2
 845              	@ 816 "./freertos/queue.c" 1
 846 00c8 BFF36F8F 		isb
 847              	@ 0 "" 2
 848              		.thumb
 849              		.syntax unified
 850 00cc 08E0     		b	.L68
 851              	.LVL95:
 852              	.L67:
 823:./freertos/queue.c **** 					{
 853              		.loc 1 823 0
 854 00ce 38B1     		cbz	r0, .L68
 829:./freertos/queue.c **** 					}
 855              		.loc 1 829 0
 856 00d0 4FF08052 		mov	r2, #268435456
 857 00d4 2D4B     		ldr	r3, .L85
 858 00d6 1A60     		str	r2, [r3]
 859              		.syntax unified
 860              	@ 829 "./freertos/queue.c" 1
 861 00d8 BFF34F8F 		dsb
 862              	@ 0 "" 2
 863              	@ 829 "./freertos/queue.c" 1
 864 00dc BFF36F8F 		isb
 865              	@ 0 "" 2
 866              	.LVL96:
 867              		.thumb
 868              		.syntax unified
 869              	.L68:
 838:./freertos/queue.c **** 				return pdPASS;
 870              		.loc 1 838 0
 871 00e0 FFF7FEFF 		bl	vPortExitCritical
 872              	.LVL97:
 839:./freertos/queue.c **** 			}
 873              		.loc 1 839 0
 874 00e4 0120     		movs	r0, #1
 875 00e6 4EE0     		b	.L69
 876              	.L66:
 843:./freertos/queue.c **** 				{
 877              		.loc 1 843 0
 878 00e8 019B     		ldr	r3, [sp, #4]
 879 00ea 1BB9     		cbnz	r3, .L70
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 57


 847:./freertos/queue.c **** 
 880              		.loc 1 847 0
 881 00ec FFF7FEFF 		bl	vPortExitCritical
 882              	.LVL98:
 852:./freertos/queue.c **** 				}
 883              		.loc 1 852 0
 884 00f0 0020     		movs	r0, #0
 885 00f2 48E0     		b	.L69
 886              	.L70:
 854:./freertos/queue.c **** 				{
 887              		.loc 1 854 0
 888 00f4 1FB9     		cbnz	r7, .L71
 858:./freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 889              		.loc 1 858 0
 890 00f6 02A8     		add	r0, sp, #8
 891 00f8 FFF7FEFF 		bl	vTaskSetTimeOutState
 892              	.LVL99:
 859:./freertos/queue.c **** 				}
 893              		.loc 1 859 0
 894 00fc 0127     		movs	r7, #1
 895              	.LVL100:
 896              	.L71:
 868:./freertos/queue.c **** 
 897              		.loc 1 868 0
 898 00fe FFF7FEFF 		bl	vPortExitCritical
 899              	.LVL101:
 873:./freertos/queue.c **** 		prvLockQueue( pxQueue );
 900              		.loc 1 873 0
 901 0102 FFF7FEFF 		bl	vTaskSuspendAll
 902              	.LVL102:
 874:./freertos/queue.c **** 
 903              		.loc 1 874 0
 904 0106 FFF7FEFF 		bl	vPortEnterCritical
 905              	.LVL103:
 906 010a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 907 010e 5BB2     		sxtb	r3, r3
 908 0110 B3F1FF3F 		cmp	r3, #-1
 909 0114 02D1     		bne	.L72
 874:./freertos/queue.c **** 
 910              		.loc 1 874 0 is_stmt 0 discriminator 1
 911 0116 0023     		movs	r3, #0
 912 0118 84F84430 		strb	r3, [r4, #68]
 913              	.L72:
 874:./freertos/queue.c **** 
 914              		.loc 1 874 0 discriminator 3
 915 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 916 0120 5BB2     		sxtb	r3, r3
 917 0122 B3F1FF3F 		cmp	r3, #-1
 918 0126 02D1     		bne	.L73
 874:./freertos/queue.c **** 
 919              		.loc 1 874 0 discriminator 4
 920 0128 0023     		movs	r3, #0
 921 012a 84F84530 		strb	r3, [r4, #69]
 922              	.L73:
 874:./freertos/queue.c **** 
 923              		.loc 1 874 0 discriminator 6
 924 012e FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 58


 925              	.LVL104:
 877:./freertos/queue.c **** 		{
 926              		.loc 1 877 0 is_stmt 1 discriminator 6
 927 0132 01A9     		add	r1, sp, #4
 928              	.LVL105:
 929 0134 02A8     		add	r0, sp, #8
 930 0136 FFF7FEFF 		bl	xTaskCheckForTimeOut
 931              	.LVL106:
 932 013a F0B9     		cbnz	r0, .L74
 879:./freertos/queue.c **** 			{
 933              		.loc 1 879 0
 934 013c 2046     		mov	r0, r4
 935 013e FFF7FEFF 		bl	prvIsQueueFull
 936              	.LVL107:
 937 0142 A0B1     		cbz	r0, .L75
 882:./freertos/queue.c **** 
 938              		.loc 1 882 0
 939 0144 0199     		ldr	r1, [sp, #4]
 940 0146 04F11000 		add	r0, r4, #16
 941 014a FFF7FEFF 		bl	vTaskPlaceOnEventList
 942              	.LVL108:
 889:./freertos/queue.c **** 
 943              		.loc 1 889 0
 944 014e 2046     		mov	r0, r4
 945 0150 FFF7FEFF 		bl	prvUnlockQueue
 946              	.LVL109:
 896:./freertos/queue.c **** 				{
 947              		.loc 1 896 0
 948 0154 FFF7FEFF 		bl	xTaskResumeAll
 949              	.LVL110:
 950 0158 0028     		cmp	r0, #0
 951 015a 9BD1     		bne	.L63
 898:./freertos/queue.c **** 				}
 952              		.loc 1 898 0
 953 015c 4FF08052 		mov	r2, #268435456
 954 0160 0A4B     		ldr	r3, .L85
 955 0162 1A60     		str	r2, [r3]
 956              		.syntax unified
 957              	@ 898 "./freertos/queue.c" 1
 958 0164 BFF34F8F 		dsb
 959              	@ 0 "" 2
 960              	@ 898 "./freertos/queue.c" 1
 961 0168 BFF36F8F 		isb
 962              	@ 0 "" 2
 963              		.thumb
 964              		.syntax unified
 965 016c 92E7     		b	.L63
 966              	.L75:
 904:./freertos/queue.c **** 				( void ) xTaskResumeAll();
 967              		.loc 1 904 0
 968 016e 2046     		mov	r0, r4
 969 0170 FFF7FEFF 		bl	prvUnlockQueue
 970              	.LVL111:
 905:./freertos/queue.c **** 			}
 971              		.loc 1 905 0
 972 0174 FFF7FEFF 		bl	xTaskResumeAll
 973              	.LVL112:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 59


 974 0178 8CE7     		b	.L63
 975              	.L74:
 911:./freertos/queue.c **** 			( void ) xTaskResumeAll();
 976              		.loc 1 911 0
 977 017a 2046     		mov	r0, r4
 978 017c FFF7FEFF 		bl	prvUnlockQueue
 979              	.LVL113:
 912:./freertos/queue.c **** 
 980              		.loc 1 912 0
 981 0180 FFF7FEFF 		bl	xTaskResumeAll
 982              	.LVL114:
 915:./freertos/queue.c **** 		}
 983              		.loc 1 915 0
 984 0184 0020     		movs	r0, #0
 985              	.L69:
 918:./freertos/queue.c **** /*-----------------------------------------------------------*/
 986              		.loc 1 918 0
 987 0186 05B0     		add	sp, sp, #20
 988              	.LCFI13:
 989              		.cfi_def_cfa_offset 20
 990              		@ sp needed
 991 0188 F0BD     		pop	{r4, r5, r6, r7, pc}
 992              	.LVL115:
 993              	.L86:
 994 018a 00BF     		.align	2
 995              	.L85:
 996 018c 04ED00E0 		.word	-536810236
 997              		.cfi_endproc
 998              	.LFE121:
 1000              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1001              		.align	2
 1002              		.thumb
 1003              		.thumb_func
 1005              	prvInitialiseMutex:
 1006              	.LFB119:
 477:./freertos/queue.c **** 		if( pxNewQueue != NULL )
 1007              		.loc 1 477 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011              	.LVL116:
 478:./freertos/queue.c **** 		{
 1012              		.loc 1 478 0
 1013 0000 48B1     		cbz	r0, .L90
 477:./freertos/queue.c **** 		if( pxNewQueue != NULL )
 1014              		.loc 1 477 0
 1015 0002 08B5     		push	{r3, lr}
 1016              	.LCFI14:
 1017              		.cfi_def_cfa_offset 8
 1018              		.cfi_offset 3, -8
 1019              		.cfi_offset 14, -4
 484:./freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1020              		.loc 1 484 0
 1021 0004 0021     		movs	r1, #0
 1022 0006 4160     		str	r1, [r0, #4]
 485:./freertos/queue.c **** 
 1023              		.loc 1 485 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 60


 1024 0008 0160     		str	r1, [r0]
 488:./freertos/queue.c **** 
 1025              		.loc 1 488 0
 1026 000a C160     		str	r1, [r0, #12]
 493:./freertos/queue.c **** 		}
 1027              		.loc 1 493 0
 1028 000c 0B46     		mov	r3, r1
 1029 000e 0A46     		mov	r2, r1
 1030 0010 FFF7FEFF 		bl	xQueueGenericSend
 1031              	.LVL117:
 1032 0014 08BD     		pop	{r3, pc}
 1033              	.LVL118:
 1034              	.L90:
 1035              	.LCFI15:
 1036              		.cfi_def_cfa_offset 0
 1037              		.cfi_restore 3
 1038              		.cfi_restore 14
 1039 0016 7047     		bx	lr
 1040              		.cfi_endproc
 1041              	.LFE119:
 1043              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1044              		.align	2
 1045              		.global	xQueueCreateMutex
 1046              		.thumb
 1047              		.thumb_func
 1049              	xQueueCreateMutex:
 1050              	.LFB120:
 507:./freertos/queue.c **** 	Queue_t *pxNewQueue;
 1051              		.loc 1 507 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              	.LVL119:
 1056 0000 10B5     		push	{r4, lr}
 1057              	.LCFI16:
 1058              		.cfi_def_cfa_offset 8
 1059              		.cfi_offset 4, -8
 1060              		.cfi_offset 14, -4
 1061              	.LVL120:
 511:./freertos/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1062              		.loc 1 511 0
 1063 0002 0246     		mov	r2, r0
 1064 0004 0021     		movs	r1, #0
 1065 0006 0120     		movs	r0, #1
 1066              	.LVL121:
 1067 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1068              	.LVL122:
 1069 000c 0446     		mov	r4, r0
 1070              	.LVL123:
 512:./freertos/queue.c **** 
 1071              		.loc 1 512 0
 1072 000e FFF7FEFF 		bl	prvInitialiseMutex
 1073              	.LVL124:
 515:./freertos/queue.c **** 
 1074              		.loc 1 515 0
 1075 0012 2046     		mov	r0, r4
 1076 0014 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 61


 1077              		.cfi_endproc
 1078              	.LFE120:
 1080 0016 00BF     		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1081              		.align	2
 1082              		.global	xQueueGenericSendFromISR
 1083              		.thumb
 1084              		.thumb_func
 1086              	xQueueGenericSendFromISR:
 1087              	.LFB122:
 922:./freertos/queue.c **** BaseType_t xReturn;
 1088              		.loc 1 922 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              	.LVL125:
 1093 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1094              	.LCFI17:
 1095              		.cfi_def_cfa_offset 32
 1096              		.cfi_offset 3, -32
 1097              		.cfi_offset 4, -28
 1098              		.cfi_offset 5, -24
 1099              		.cfi_offset 6, -20
 1100              		.cfi_offset 7, -16
 1101              		.cfi_offset 8, -12
 1102              		.cfi_offset 9, -8
 1103              		.cfi_offset 14, -4
 1104              	.LVL126:
 927:./freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1105              		.loc 1 927 0
 1106 0004 40B9     		cbnz	r0, .L94
 1107              	.LBB90:
 1108              	.LBB91:
 1109              		.loc 2 242 0
 1110              		.syntax unified
 1111              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1112 0006 4FF05003 			mov r3, #80												
 1113 000a 83F31188 		msr basepri, r3											
 1114 000e BFF36F8F 		isb														
 1115 0012 BFF34F8F 		dsb														
 1116              	
 1117              	@ 0 "" 2
 1118              	.LVL127:
 1119              		.thumb
 1120              		.syntax unified
 1121              	.L95:
 1122 0016 FEE7     		b	.L95
 1123              	.LVL128:
 1124              	.L94:
 1125 0018 0446     		mov	r4, r0
 1126              	.LBE91:
 1127              	.LBE90:
 928:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1128              		.loc 1 928 0
 1129 001a 19B9     		cbnz	r1, .L105
 928:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1130              		.loc 1 928 0 is_stmt 0 discriminator 2
 1131 001c 006C     		ldr	r0, [r0, #64]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 62


 1132              	.LVL129:
 1133 001e 18B9     		cbnz	r0, .L106
 928:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1134              		.loc 1 928 0
 1135 0020 0120     		movs	r0, #1
 1136 0022 02E0     		b	.L96
 1137              	.LVL130:
 1138              	.L105:
 1139 0024 0120     		movs	r0, #1
 1140              	.LVL131:
 1141 0026 00E0     		b	.L96
 1142              	.L106:
 1143 0028 0020     		movs	r0, #0
 1144              	.L96:
 928:./freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1145              		.loc 1 928 0 discriminator 6
 1146 002a 40B9     		cbnz	r0, .L97
 1147              	.LBB92:
 1148              	.LBB93:
 1149              		.loc 2 242 0 is_stmt 1
 1150              		.syntax unified
 1151              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1152 002c 4FF05003 			mov r3, #80												
 1153 0030 83F31188 		msr basepri, r3											
 1154 0034 BFF36F8F 		isb														
 1155 0038 BFF34F8F 		dsb														
 1156              	
 1157              	@ 0 "" 2
 1158              	.LVL132:
 1159              		.thumb
 1160              		.syntax unified
 1161              	.L98:
 1162 003c FEE7     		b	.L98
 1163              	.LVL133:
 1164              	.L97:
 1165              	.LBE93:
 1166              	.LBE92:
 929:./freertos/queue.c **** 
 1167              		.loc 1 929 0
 1168 003e 022B     		cmp	r3, #2
 1169 0040 03D1     		bne	.L107
 929:./freertos/queue.c **** 
 1170              		.loc 1 929 0 is_stmt 0 discriminator 2
 1171 0042 E06B     		ldr	r0, [r4, #60]
 1172 0044 0128     		cmp	r0, #1
 1173 0046 02D1     		bne	.L108
 1174 0048 02E0     		b	.L99
 1175              	.L107:
 929:./freertos/queue.c **** 
 1176              		.loc 1 929 0
 1177 004a 0120     		movs	r0, #1
 1178 004c 00E0     		b	.L99
 1179              	.L108:
 1180 004e 0020     		movs	r0, #0
 1181              	.L99:
 929:./freertos/queue.c **** 
 1182              		.loc 1 929 0 discriminator 6
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 63


 1183 0050 40B9     		cbnz	r0, .L100
 1184              	.LBB94:
 1185              	.LBB95:
 1186              		.loc 2 242 0 is_stmt 1
 1187              		.syntax unified
 1188              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1189 0052 4FF05003 			mov r3, #80												
 1190 0056 83F31188 		msr basepri, r3											
 1191 005a BFF36F8F 		isb														
 1192 005e BFF34F8F 		dsb														
 1193              	
 1194              	@ 0 "" 2
 1195              	.LVL134:
 1196              		.thumb
 1197              		.syntax unified
 1198              	.L101:
 1199 0062 FEE7     		b	.L101
 1200              	.LVL135:
 1201              	.L100:
 1202 0064 1F46     		mov	r7, r3
 1203 0066 9046     		mov	r8, r2
 1204 0068 8946     		mov	r9, r1
 1205              	.LBE95:
 1206              	.LBE94:
 945:./freertos/queue.c **** 
 1207              		.loc 1 945 0
 1208 006a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1209              	.LVL136:
 1210              	.LBB96:
 1211              	.LBB97:
 243:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 244:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	msr basepri, %0											\n"
 245:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	isb														\n"
 246:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	dsb														\n"
 247:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "=r"(ulNewBASEPRI)
 248:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
 249:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 250:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 251:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 252:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 253:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void)
 254:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 255:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 256:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 257:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
 1212              		.loc 2 257 0
 1213              		.syntax unified
 1214              	@ 257 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1215 006e EFF31186 			mrs r6, basepri											
 1216 0072 4FF05003 		mov r3, #80												
 1217 0076 83F31188 		msr basepri, r3											
 1218 007a BFF36F8F 		isb														
 1219 007e BFF34F8F 		dsb														
 1220              	
 1221              	@ 0 "" 2
 1222              		.thumb
 1223              		.syntax unified
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 64


 1224              	.LBE97:
 1225              	.LBE96:
 954:./freertos/queue.c **** 		{
 1226              		.loc 1 954 0
 1227 0082 A26B     		ldr	r2, [r4, #56]
 1228 0084 E36B     		ldr	r3, [r4, #60]
 1229 0086 9A42     		cmp	r2, r3
 1230 0088 01D3     		bcc	.L102
 954:./freertos/queue.c **** 		{
 1231              		.loc 1 954 0 is_stmt 0 discriminator 1
 1232 008a 022F     		cmp	r7, #2
 1233 008c 1ED1     		bne	.L109
 1234              	.L102:
 1235              	.LBB98:
 956:./freertos/queue.c **** 
 1236              		.loc 1 956 0 is_stmt 1
 1237 008e 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1238 0092 6DB2     		sxtb	r5, r5
 1239              	.LVL137:
 965:./freertos/queue.c **** 
 1240              		.loc 1 965 0
 1241 0094 3A46     		mov	r2, r7
 1242 0096 4946     		mov	r1, r9
 1243 0098 2046     		mov	r0, r4
 1244 009a FFF7FEFF 		bl	prvCopyDataToQueue
 1245              	.LVL138:
 969:./freertos/queue.c **** 			{
 1246              		.loc 1 969 0
 1247 009e B5F1FF3F 		cmp	r5, #-1
 1248 00a2 0DD1     		bne	.L104
1024:./freertos/queue.c **** 					{
 1249              		.loc 1 1024 0
 1250 00a4 636A     		ldr	r3, [r4, #36]
 1251 00a6 9BB1     		cbz	r3, .L110
1026:./freertos/queue.c **** 						{
 1252              		.loc 1 1026 0
 1253 00a8 04F12400 		add	r0, r4, #36
 1254 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1255              	.LVL139:
 1256 00b0 80B1     		cbz	r0, .L111
1030:./freertos/queue.c **** 							{
 1257              		.loc 1 1030 0
 1258 00b2 B8F1000F 		cmp	r8, #0
 1259 00b6 0FD0     		beq	.L112
1032:./freertos/queue.c **** 							}
 1260              		.loc 1 1032 0
 1261 00b8 0120     		movs	r0, #1
 1262 00ba C8F80000 		str	r0, [r8]
 1263 00be 0CE0     		b	.L103
 1264              	.L104:
1055:./freertos/queue.c **** 			}
 1265              		.loc 1 1055 0
 1266 00c0 6B1C     		adds	r3, r5, #1
 1267 00c2 5BB2     		sxtb	r3, r3
 1268 00c4 84F84530 		strb	r3, [r4, #69]
1058:./freertos/queue.c **** 		}
 1269              		.loc 1 1058 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 65


 1270 00c8 0120     		movs	r0, #1
 1271 00ca 06E0     		b	.L103
 1272              	.LVL140:
 1273              	.L109:
 1274              	.LBE98:
1063:./freertos/queue.c **** 		}
 1275              		.loc 1 1063 0
 1276 00cc 0020     		movs	r0, #0
 1277 00ce 04E0     		b	.L103
 1278              	.LVL141:
 1279              	.L110:
 1280              	.LBB99:
1058:./freertos/queue.c **** 		}
 1281              		.loc 1 1058 0
 1282 00d0 0120     		movs	r0, #1
 1283 00d2 02E0     		b	.L103
 1284              	.L111:
 1285 00d4 0120     		movs	r0, #1
 1286 00d6 00E0     		b	.L103
 1287              	.L112:
 1288 00d8 0120     		movs	r0, #1
 1289              	.LVL142:
 1290              	.L103:
 1291              	.LBE99:
 1292              	.LBB100:
 1293              	.LBB101:
 258:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mrs %0, basepri											\n"
 259:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %1, %2												\n"
 260:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	msr basepri, %1											\n"
 261:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	isb														\n"
 262:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	dsb														\n"
 263:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "=r"(ulOriginalBASEPRI), "=r"(ulNewBASEPRI)
 264:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
 265:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 266:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 267:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 	warnings. */
 268:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         return ulOriginalBASEPRI;
 269:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     }
 270:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     /*-----------------------------------------------------------*/
 271:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h **** 
 272:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
 273:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****     {
 274:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****         __asm volatile(
 1294              		.loc 2 274 0
 1295              		.syntax unified
 1296              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1297 00da 86F31188 			msr basepri, r6	
 1298              	@ 0 "" 2
 1299              	.LVL143:
 1300              		.thumb
 1301              		.syntax unified
 1302              	.LBE101:
 1303              	.LBE100:
1069:./freertos/queue.c **** /*-----------------------------------------------------------*/
 1304              		.loc 1 1069 0
 1305 00de BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1306              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 66


 1307              	.LFE122:
 1309 00e2 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1310              		.align	2
 1311              		.global	xQueueGiveFromISR
 1312              		.thumb
 1313              		.thumb_func
 1315              	xQueueGiveFromISR:
 1316              	.LFB123:
1073:./freertos/queue.c **** BaseType_t xReturn;
 1317              		.loc 1 1073 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              	.LVL144:
1084:./freertos/queue.c **** 
 1322              		.loc 1 1084 0
 1323 0000 40B9     		cbnz	r0, .L115
 1324              	.LBB102:
 1325              	.LBB103:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1326              		.loc 2 242 0
 1327              		.syntax unified
 1328              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1329 0002 4FF05003 			mov r3, #80												
 1330 0006 83F31188 		msr basepri, r3											
 1331 000a BFF36F8F 		isb														
 1332 000e BFF34F8F 		dsb														
 1333              	
 1334              	@ 0 "" 2
 1335              	.LVL145:
 1336              		.thumb
 1337              		.syntax unified
 1338              	.L116:
 1339 0012 FEE7     		b	.L116
 1340              	.L115:
 1341              	.LBE103:
 1342              	.LBE102:
1073:./freertos/queue.c **** BaseType_t xReturn;
 1343              		.loc 1 1073 0
 1344 0014 70B5     		push	{r4, r5, r6, lr}
 1345              	.LCFI18:
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 4, -16
 1348              		.cfi_offset 5, -12
 1349              		.cfi_offset 6, -8
 1350              		.cfi_offset 14, -4
 1351 0016 0446     		mov	r4, r0
1088:./freertos/queue.c **** 
 1352              		.loc 1 1088 0
 1353 0018 036C     		ldr	r3, [r0, #64]
 1354 001a 43B1     		cbz	r3, .L117
 1355              	.LBB104:
 1356              	.LBB105:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1357              		.loc 2 242 0
 1358              		.syntax unified
 1359              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 67


 1360 001c 4FF05003 			mov r3, #80												
 1361 0020 83F31188 		msr basepri, r3											
 1362 0024 BFF36F8F 		isb														
 1363 0028 BFF34F8F 		dsb														
 1364              	
 1365              	@ 0 "" 2
 1366              	.LVL146:
 1367              		.thumb
 1368              		.syntax unified
 1369              	.L118:
 1370 002c FEE7     		b	.L118
 1371              	.L117:
 1372              	.LBE105:
 1373              	.LBE104:
1093:./freertos/queue.c **** 
 1374              		.loc 1 1093 0
 1375 002e 0368     		ldr	r3, [r0]
 1376 0030 1BB9     		cbnz	r3, .L124
1093:./freertos/queue.c **** 
 1377              		.loc 1 1093 0 is_stmt 0 discriminator 2
 1378 0032 4368     		ldr	r3, [r0, #4]
 1379 0034 1BB9     		cbnz	r3, .L125
1093:./freertos/queue.c **** 
 1380              		.loc 1 1093 0
 1381 0036 0123     		movs	r3, #1
 1382 0038 02E0     		b	.L119
 1383              	.L124:
 1384 003a 0123     		movs	r3, #1
 1385 003c 00E0     		b	.L119
 1386              	.L125:
 1387 003e 0023     		movs	r3, #0
 1388              	.L119:
1093:./freertos/queue.c **** 
 1389              		.loc 1 1093 0 discriminator 6
 1390 0040 43B9     		cbnz	r3, .L120
 1391              	.LBB106:
 1392              	.LBB107:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1393              		.loc 2 242 0 is_stmt 1
 1394              		.syntax unified
 1395              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1396 0042 4FF05003 			mov r3, #80												
 1397 0046 83F31188 		msr basepri, r3											
 1398 004a BFF36F8F 		isb														
 1399 004e BFF34F8F 		dsb														
 1400              	
 1401              	@ 0 "" 2
 1402              	.LVL147:
 1403              		.thumb
 1404              		.syntax unified
 1405              	.L121:
 1406 0052 FEE7     		b	.L121
 1407              	.L120:
 1408 0054 0E46     		mov	r6, r1
 1409              	.LBE107:
 1410              	.LBE106:
1109:./freertos/queue.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 68


 1411              		.loc 1 1109 0
 1412 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1413              	.LVL148:
 1414              	.LBB108:
 1415              	.LBB109:
 257:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mrs %0, basepri											\n"
 1416              		.loc 2 257 0
 1417              		.syntax unified
 1418              	@ 257 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1419 005a EFF31185 			mrs r5, basepri											
 1420 005e 4FF05003 		mov r3, #80												
 1421 0062 83F31188 		msr basepri, r3											
 1422 0066 BFF36F8F 		isb														
 1423 006a BFF34F8F 		dsb														
 1424              	
 1425              	@ 0 "" 2
 1426              		.thumb
 1427              		.syntax unified
 1428              	.LBE109:
 1429              	.LBE108:
 1430              	.LBB110:
1113:./freertos/queue.c **** 
 1431              		.loc 1 1113 0
 1432 006e A26B     		ldr	r2, [r4, #56]
 1433              	.LVL149:
1118:./freertos/queue.c **** 		{
 1434              		.loc 1 1118 0
 1435 0070 E36B     		ldr	r3, [r4, #60]
 1436 0072 9A42     		cmp	r2, r3
 1437 0074 18D2     		bcs	.L126
 1438              	.LBB111:
1120:./freertos/queue.c **** 
 1439              		.loc 1 1120 0
 1440 0076 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1441 007a 5BB2     		sxtb	r3, r3
 1442              	.LVL150:
1130:./freertos/queue.c **** 
 1443              		.loc 1 1130 0
 1444 007c 0132     		adds	r2, r2, #1
 1445              	.LVL151:
 1446 007e A263     		str	r2, [r4, #56]
1134:./freertos/queue.c **** 			{
 1447              		.loc 1 1134 0
 1448 0080 B3F1FF3F 		cmp	r3, #-1
 1449 0084 0AD1     		bne	.L123
1189:./freertos/queue.c **** 					{
 1450              		.loc 1 1189 0
 1451 0086 636A     		ldr	r3, [r4, #36]
 1452              	.LVL152:
 1453 0088 83B1     		cbz	r3, .L127
1191:./freertos/queue.c **** 						{
 1454              		.loc 1 1191 0
 1455 008a 04F12400 		add	r0, r4, #36
 1456 008e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1457              	.LVL153:
 1458 0092 68B1     		cbz	r0, .L128
1195:./freertos/queue.c **** 							{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 69


 1459              		.loc 1 1195 0
 1460 0094 76B1     		cbz	r6, .L129
1197:./freertos/queue.c **** 							}
 1461              		.loc 1 1197 0
 1462 0096 0120     		movs	r0, #1
 1463 0098 3060     		str	r0, [r6]
 1464 009a 0CE0     		b	.L122
 1465              	.LVL154:
 1466              	.L123:
1220:./freertos/queue.c **** 			}
 1467              		.loc 1 1220 0
 1468 009c 0133     		adds	r3, r3, #1
 1469              	.LVL155:
 1470 009e 5BB2     		sxtb	r3, r3
 1471              	.LVL156:
 1472 00a0 84F84530 		strb	r3, [r4, #69]
1223:./freertos/queue.c **** 		}
 1473              		.loc 1 1223 0
 1474 00a4 0120     		movs	r0, #1
 1475 00a6 06E0     		b	.L122
 1476              	.LVL157:
 1477              	.L126:
 1478              	.LBE111:
1228:./freertos/queue.c **** 		}
 1479              		.loc 1 1228 0
 1480 00a8 0020     		movs	r0, #0
 1481 00aa 04E0     		b	.L122
 1482              	.LVL158:
 1483              	.L127:
 1484              	.LBB112:
1223:./freertos/queue.c **** 		}
 1485              		.loc 1 1223 0
 1486 00ac 0120     		movs	r0, #1
 1487 00ae 02E0     		b	.L122
 1488              	.LVL159:
 1489              	.L128:
 1490 00b0 0120     		movs	r0, #1
 1491 00b2 00E0     		b	.L122
 1492              	.L129:
 1493 00b4 0120     		movs	r0, #1
 1494              	.L122:
 1495              	.LVL160:
 1496              	.LBE112:
 1497              	.LBE110:
 1498              	.LBB113:
 1499              	.LBB114:
 1500              		.loc 2 274 0
 1501              		.syntax unified
 1502              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1503 00b6 85F31188 			msr basepri, r5	
 1504              	@ 0 "" 2
 1505              	.LVL161:
 1506              		.thumb
 1507              		.syntax unified
 1508              	.LBE114:
 1509              	.LBE113:
1234:./freertos/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 70


 1510              		.loc 1 1234 0
 1511 00ba 70BD     		pop	{r4, r5, r6, pc}
 1512              		.cfi_endproc
 1513              	.LFE123:
 1515              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1516              		.align	2
 1517              		.global	xQueueGenericReceive
 1518              		.thumb
 1519              		.thumb_func
 1521              	xQueueGenericReceive:
 1522              	.LFB124:
1238:./freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1523              		.loc 1 1238 0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 16
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              	.LVL162:
 1528 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1529              	.LCFI19:
 1530              		.cfi_def_cfa_offset 24
 1531              		.cfi_offset 4, -24
 1532              		.cfi_offset 5, -20
 1533              		.cfi_offset 6, -16
 1534              		.cfi_offset 7, -12
 1535              		.cfi_offset 8, -8
 1536              		.cfi_offset 14, -4
 1537 0004 84B0     		sub	sp, sp, #16
 1538              	.LCFI20:
 1539              		.cfi_def_cfa_offset 40
 1540 0006 0192     		str	r2, [sp, #4]
 1541              	.LVL163:
1244:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1542              		.loc 1 1244 0
 1543 0008 40B9     		cbnz	r0, .L132
 1544              	.LBB115:
 1545              	.LBB116:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1546              		.loc 2 242 0
 1547              		.syntax unified
 1548              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1549 000a 4FF05003 			mov r3, #80												
 1550 000e 83F31188 		msr basepri, r3											
 1551 0012 BFF36F8F 		isb														
 1552 0016 BFF34F8F 		dsb														
 1553              	
 1554              	@ 0 "" 2
 1555              	.LVL164:
 1556              		.thumb
 1557              		.syntax unified
 1558              	.L133:
 1559 001a FEE7     		b	.L133
 1560              	.LVL165:
 1561              	.L132:
 1562 001c 0446     		mov	r4, r0
 1563              	.LBE116:
 1564              	.LBE115:
1245:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 71


 1565              		.loc 1 1245 0
 1566 001e 19B9     		cbnz	r1, .L153
1245:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1567              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1568 0020 026C     		ldr	r2, [r0, #64]
 1569              	.LVL166:
 1570 0022 1AB9     		cbnz	r2, .L154
1245:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1571              		.loc 1 1245 0
 1572 0024 0122     		movs	r2, #1
 1573 0026 02E0     		b	.L134
 1574              	.LVL167:
 1575              	.L153:
 1576 0028 0122     		movs	r2, #1
 1577              	.LVL168:
 1578 002a 00E0     		b	.L134
 1579              	.L154:
 1580 002c 0022     		movs	r2, #0
 1581              	.L134:
1245:./freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1582              		.loc 1 1245 0 discriminator 6
 1583 002e 42B9     		cbnz	r2, .L135
 1584              	.LBB117:
 1585              	.LBB118:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1586              		.loc 2 242 0 is_stmt 1
 1587              		.syntax unified
 1588              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1589 0030 4FF05003 			mov r3, #80												
 1590 0034 83F31188 		msr basepri, r3											
 1591 0038 BFF36F8F 		isb														
 1592 003c BFF34F8F 		dsb														
 1593              	
 1594              	@ 0 "" 2
 1595              	.LVL169:
 1596              		.thumb
 1597              		.syntax unified
 1598              	.L136:
 1599 0040 FEE7     		b	.L136
 1600              	.LVL170:
 1601              	.L135:
 1602 0042 1F46     		mov	r7, r3
 1603 0044 8846     		mov	r8, r1
 1604              	.LBE118:
 1605              	.LBE117:
1248:./freertos/queue.c **** 	}
 1606              		.loc 1 1248 0
 1607 0046 FFF7FEFF 		bl	xTaskGetSchedulerState
 1608              	.LVL171:
 1609 004a 18B9     		cbnz	r0, .L155
1248:./freertos/queue.c **** 	}
 1610              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1611 004c 019B     		ldr	r3, [sp, #4]
 1612 004e 1BB9     		cbnz	r3, .L156
1248:./freertos/queue.c **** 	}
 1613              		.loc 1 1248 0
 1614 0050 0123     		movs	r3, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 72


 1615 0052 02E0     		b	.L137
 1616              	.L155:
 1617 0054 0123     		movs	r3, #1
 1618 0056 00E0     		b	.L137
 1619              	.L156:
 1620 0058 0023     		movs	r3, #0
 1621              	.L137:
1248:./freertos/queue.c **** 	}
 1622              		.loc 1 1248 0 discriminator 6
 1623 005a 43B9     		cbnz	r3, .L157
 1624              	.LBB119:
 1625              	.LBB120:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1626              		.loc 2 242 0 is_stmt 1
 1627              		.syntax unified
 1628              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1629 005c 4FF05003 			mov r3, #80												
 1630 0060 83F31188 		msr basepri, r3											
 1631 0064 BFF36F8F 		isb														
 1632 0068 BFF34F8F 		dsb														
 1633              	
 1634              	@ 0 "" 2
 1635              	.LVL172:
 1636              		.thumb
 1637              		.syntax unified
 1638              	.L139:
 1639 006c FEE7     		b	.L139
 1640              	.L157:
 1641              	.LBE120:
 1642              	.LBE119:
 1643 006e 0026     		movs	r6, #0
 1644              	.LVL173:
 1645              	.L138:
1258:./freertos/queue.c **** 		{
 1646              		.loc 1 1258 0
 1647 0070 FFF7FEFF 		bl	vPortEnterCritical
 1648              	.LVL174:
 1649              	.LBB121:
1260:./freertos/queue.c **** 
 1650              		.loc 1 1260 0
 1651 0074 A56B     		ldr	r5, [r4, #56]
 1652              	.LVL175:
1264:./freertos/queue.c **** 			{
 1653              		.loc 1 1264 0
 1654 0076 85B3     		cbz	r5, .L140
1268:./freertos/queue.c **** 
 1655              		.loc 1 1268 0
 1656 0078 E668     		ldr	r6, [r4, #12]
 1657              	.LVL176:
1270:./freertos/queue.c **** 
 1658              		.loc 1 1270 0
 1659 007a 4146     		mov	r1, r8
 1660 007c 2046     		mov	r0, r4
 1661 007e FFF7FEFF 		bl	prvCopyDataFromQueue
 1662              	.LVL177:
1272:./freertos/queue.c **** 				{
 1663              		.loc 1 1272 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 73


 1664 0082 B7B9     		cbnz	r7, .L141
1277:./freertos/queue.c **** 
 1665              		.loc 1 1277 0
 1666 0084 013D     		subs	r5, r5, #1
 1667              	.LVL178:
 1668 0086 A563     		str	r5, [r4, #56]
1281:./freertos/queue.c **** 						{
 1669              		.loc 1 1281 0
 1670 0088 2368     		ldr	r3, [r4]
 1671 008a 13B9     		cbnz	r3, .L142
1285:./freertos/queue.c **** 						}
 1672              		.loc 1 1285 0
 1673 008c FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1674              	.LVL179:
 1675 0090 6060     		str	r0, [r4, #4]
 1676              	.L142:
1294:./freertos/queue.c **** 					{
 1677              		.loc 1 1294 0
 1678 0092 2369     		ldr	r3, [r4, #16]
 1679 0094 EBB1     		cbz	r3, .L143
1296:./freertos/queue.c **** 						{
 1680              		.loc 1 1296 0
 1681 0096 04F11000 		add	r0, r4, #16
 1682 009a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1683              	.LVL180:
 1684 009e C0B1     		cbz	r0, .L143
1298:./freertos/queue.c **** 						}
 1685              		.loc 1 1298 0
 1686 00a0 4FF08052 		mov	r2, #268435456
 1687 00a4 3D4B     		ldr	r3, .L159
 1688 00a6 1A60     		str	r2, [r3]
 1689              		.syntax unified
 1690              	@ 1298 "./freertos/queue.c" 1
 1691 00a8 BFF34F8F 		dsb
 1692              	@ 0 "" 2
 1693              	@ 1298 "./freertos/queue.c" 1
 1694 00ac BFF36F8F 		isb
 1695              	@ 0 "" 2
 1696              		.thumb
 1697              		.syntax unified
 1698 00b0 0FE0     		b	.L143
 1699              	.LVL181:
 1700              	.L141:
1316:./freertos/queue.c **** 
 1701              		.loc 1 1316 0
 1702 00b2 E660     		str	r6, [r4, #12]
1320:./freertos/queue.c **** 					{
 1703              		.loc 1 1320 0
 1704 00b4 636A     		ldr	r3, [r4, #36]
 1705 00b6 63B1     		cbz	r3, .L143
1322:./freertos/queue.c **** 						{
 1706              		.loc 1 1322 0
 1707 00b8 04F12400 		add	r0, r4, #36
 1708 00bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 1709              	.LVL182:
 1710 00c0 38B1     		cbz	r0, .L143
1325:./freertos/queue.c **** 						}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 74


 1711              		.loc 1 1325 0
 1712 00c2 4FF08052 		mov	r2, #268435456
 1713 00c6 354B     		ldr	r3, .L159
 1714 00c8 1A60     		str	r2, [r3]
 1715              		.syntax unified
 1716              	@ 1325 "./freertos/queue.c" 1
 1717 00ca BFF34F8F 		dsb
 1718              	@ 0 "" 2
 1719              	@ 1325 "./freertos/queue.c" 1
 1720 00ce BFF36F8F 		isb
 1721              	@ 0 "" 2
 1722              	.LVL183:
 1723              		.thumb
 1724              		.syntax unified
 1725              	.L143:
1338:./freertos/queue.c **** 				return pdPASS;
 1726              		.loc 1 1338 0
 1727 00d2 FFF7FEFF 		bl	vPortExitCritical
 1728              	.LVL184:
1339:./freertos/queue.c **** 			}
 1729              		.loc 1 1339 0
 1730 00d6 0120     		movs	r0, #1
 1731 00d8 5DE0     		b	.L144
 1732              	.LVL185:
 1733              	.L140:
1343:./freertos/queue.c **** 				{
 1734              		.loc 1 1343 0
 1735 00da 019B     		ldr	r3, [sp, #4]
 1736 00dc 1BB9     		cbnz	r3, .L145
1347:./freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1737              		.loc 1 1347 0
 1738 00de FFF7FEFF 		bl	vPortExitCritical
 1739              	.LVL186:
1349:./freertos/queue.c **** 				}
 1740              		.loc 1 1349 0
 1741 00e2 0020     		movs	r0, #0
 1742 00e4 57E0     		b	.L144
 1743              	.L145:
1351:./freertos/queue.c **** 				{
 1744              		.loc 1 1351 0
 1745 00e6 1EB9     		cbnz	r6, .L146
1355:./freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 1746              		.loc 1 1355 0
 1747 00e8 02A8     		add	r0, sp, #8
 1748 00ea FFF7FEFF 		bl	vTaskSetTimeOutState
 1749              	.LVL187:
1356:./freertos/queue.c **** 				}
 1750              		.loc 1 1356 0
 1751 00ee 0126     		movs	r6, #1
 1752              	.LVL188:
 1753              	.L146:
 1754              	.LBE121:
1365:./freertos/queue.c **** 
 1755              		.loc 1 1365 0
 1756 00f0 FFF7FEFF 		bl	vPortExitCritical
 1757              	.LVL189:
1370:./freertos/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 75


 1758              		.loc 1 1370 0
 1759 00f4 FFF7FEFF 		bl	vTaskSuspendAll
 1760              	.LVL190:
1371:./freertos/queue.c **** 
 1761              		.loc 1 1371 0
 1762 00f8 FFF7FEFF 		bl	vPortEnterCritical
 1763              	.LVL191:
 1764 00fc 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1765 0100 5BB2     		sxtb	r3, r3
 1766 0102 B3F1FF3F 		cmp	r3, #-1
 1767 0106 02D1     		bne	.L147
1371:./freertos/queue.c **** 
 1768              		.loc 1 1371 0 is_stmt 0 discriminator 1
 1769 0108 0023     		movs	r3, #0
 1770 010a 84F84430 		strb	r3, [r4, #68]
 1771              	.L147:
1371:./freertos/queue.c **** 
 1772              		.loc 1 1371 0 discriminator 3
 1773 010e 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1774 0112 5BB2     		sxtb	r3, r3
 1775 0114 B3F1FF3F 		cmp	r3, #-1
 1776 0118 02D1     		bne	.L148
1371:./freertos/queue.c **** 
 1777              		.loc 1 1371 0 discriminator 4
 1778 011a 0023     		movs	r3, #0
 1779 011c 84F84530 		strb	r3, [r4, #69]
 1780              	.L148:
1371:./freertos/queue.c **** 
 1781              		.loc 1 1371 0 discriminator 6
 1782 0120 FFF7FEFF 		bl	vPortExitCritical
 1783              	.LVL192:
1374:./freertos/queue.c **** 		{
 1784              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1785 0124 01A9     		add	r1, sp, #4
 1786              	.LVL193:
 1787 0126 02A8     		add	r0, sp, #8
 1788 0128 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1789              	.LVL194:
 1790 012c 38BB     		cbnz	r0, .L149
1376:./freertos/queue.c **** 			{
 1791              		.loc 1 1376 0
 1792 012e 2046     		mov	r0, r4
 1793 0130 FFF7FEFF 		bl	prvIsQueueEmpty
 1794              	.LVL195:
 1795 0134 E8B1     		cbz	r0, .L150
1382:./freertos/queue.c **** 					{
 1796              		.loc 1 1382 0
 1797 0136 2368     		ldr	r3, [r4]
 1798 0138 33B9     		cbnz	r3, .L151
1384:./freertos/queue.c **** 						{
 1799              		.loc 1 1384 0
 1800 013a FFF7FEFF 		bl	vPortEnterCritical
 1801              	.LVL196:
1386:./freertos/queue.c **** 						}
 1802              		.loc 1 1386 0
 1803 013e 6068     		ldr	r0, [r4, #4]
 1804 0140 FFF7FEFF 		bl	vTaskPriorityInherit
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 76


 1805              	.LVL197:
1388:./freertos/queue.c **** 					}
 1806              		.loc 1 1388 0
 1807 0144 FFF7FEFF 		bl	vPortExitCritical
 1808              	.LVL198:
 1809              	.L151:
1397:./freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 1810              		.loc 1 1397 0
 1811 0148 0199     		ldr	r1, [sp, #4]
 1812 014a 04F12400 		add	r0, r4, #36
 1813 014e FFF7FEFF 		bl	vTaskPlaceOnEventList
 1814              	.LVL199:
1398:./freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1815              		.loc 1 1398 0
 1816 0152 2046     		mov	r0, r4
 1817 0154 FFF7FEFF 		bl	prvUnlockQueue
 1818              	.LVL200:
1399:./freertos/queue.c **** 				{
 1819              		.loc 1 1399 0
 1820 0158 FFF7FEFF 		bl	xTaskResumeAll
 1821              	.LVL201:
 1822 015c 0028     		cmp	r0, #0
 1823 015e 87D1     		bne	.L138
1401:./freertos/queue.c **** 				}
 1824              		.loc 1 1401 0
 1825 0160 4FF08052 		mov	r2, #268435456
 1826 0164 0D4B     		ldr	r3, .L159
 1827 0166 1A60     		str	r2, [r3]
 1828              		.syntax unified
 1829              	@ 1401 "./freertos/queue.c" 1
 1830 0168 BFF34F8F 		dsb
 1831              	@ 0 "" 2
 1832              	@ 1401 "./freertos/queue.c" 1
 1833 016c BFF36F8F 		isb
 1834              	@ 0 "" 2
 1835              		.thumb
 1836              		.syntax unified
 1837 0170 7EE7     		b	.L138
 1838              	.L150:
1411:./freertos/queue.c **** 				( void ) xTaskResumeAll();
 1839              		.loc 1 1411 0
 1840 0172 2046     		mov	r0, r4
 1841 0174 FFF7FEFF 		bl	prvUnlockQueue
 1842              	.LVL202:
1412:./freertos/queue.c **** 			}
 1843              		.loc 1 1412 0
 1844 0178 FFF7FEFF 		bl	xTaskResumeAll
 1845              	.LVL203:
 1846 017c 78E7     		b	.L138
 1847              	.L149:
1417:./freertos/queue.c **** 			( void ) xTaskResumeAll();
 1848              		.loc 1 1417 0
 1849 017e 2046     		mov	r0, r4
 1850 0180 FFF7FEFF 		bl	prvUnlockQueue
 1851              	.LVL204:
1418:./freertos/queue.c **** 
 1852              		.loc 1 1418 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 77


 1853 0184 FFF7FEFF 		bl	xTaskResumeAll
 1854              	.LVL205:
1420:./freertos/queue.c **** 			{
 1855              		.loc 1 1420 0
 1856 0188 2046     		mov	r0, r4
 1857 018a FFF7FEFF 		bl	prvIsQueueEmpty
 1858              	.LVL206:
 1859 018e 0028     		cmp	r0, #0
 1860 0190 3FF46EAF 		beq	.L138
1423:./freertos/queue.c **** 			}
 1861              		.loc 1 1423 0
 1862 0194 0020     		movs	r0, #0
 1863              	.LVL207:
 1864              	.L144:
1431:./freertos/queue.c **** /*-----------------------------------------------------------*/
 1865              		.loc 1 1431 0
 1866 0196 04B0     		add	sp, sp, #16
 1867              	.LCFI21:
 1868              		.cfi_def_cfa_offset 24
 1869              		@ sp needed
 1870 0198 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1871              	.LVL208:
 1872              	.L160:
 1873              		.align	2
 1874              	.L159:
 1875 019c 04ED00E0 		.word	-536810236
 1876              		.cfi_endproc
 1877              	.LFE124:
 1879              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1880              		.align	2
 1881              		.global	xQueueReceiveFromISR
 1882              		.thumb
 1883              		.thumb_func
 1885              	xQueueReceiveFromISR:
 1886              	.LFB125:
1435:./freertos/queue.c **** BaseType_t xReturn;
 1887              		.loc 1 1435 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              	.LVL209:
 1892 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1893              	.LCFI22:
 1894              		.cfi_def_cfa_offset 32
 1895              		.cfi_offset 3, -32
 1896              		.cfi_offset 4, -28
 1897              		.cfi_offset 5, -24
 1898              		.cfi_offset 6, -20
 1899              		.cfi_offset 7, -16
 1900              		.cfi_offset 8, -12
 1901              		.cfi_offset 9, -8
 1902              		.cfi_offset 14, -4
 1903              	.LVL210:
1440:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1904              		.loc 1 1440 0
 1905 0004 40B9     		cbnz	r0, .L162
 1906              	.LBB122:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 78


 1907              	.LBB123:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1908              		.loc 2 242 0
 1909              		.syntax unified
 1910              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1911 0006 4FF05003 			mov r3, #80												
 1912 000a 83F31188 		msr basepri, r3											
 1913 000e BFF36F8F 		isb														
 1914 0012 BFF34F8F 		dsb														
 1915              	
 1916              	@ 0 "" 2
 1917              	.LVL211:
 1918              		.thumb
 1919              		.syntax unified
 1920              	.L163:
 1921 0016 FEE7     		b	.L163
 1922              	.L162:
 1923 0018 0446     		mov	r4, r0
 1924              	.LBE123:
 1925              	.LBE122:
1441:./freertos/queue.c **** 
 1926              		.loc 1 1441 0
 1927 001a 19B9     		cbnz	r1, .L169
1441:./freertos/queue.c **** 
 1928              		.loc 1 1441 0 is_stmt 0 discriminator 2
 1929 001c 036C     		ldr	r3, [r0, #64]
 1930 001e 1BB9     		cbnz	r3, .L170
1441:./freertos/queue.c **** 
 1931              		.loc 1 1441 0
 1932 0020 0123     		movs	r3, #1
 1933 0022 02E0     		b	.L164
 1934              	.L169:
 1935 0024 0123     		movs	r3, #1
 1936 0026 00E0     		b	.L164
 1937              	.L170:
 1938 0028 0023     		movs	r3, #0
 1939              	.L164:
1441:./freertos/queue.c **** 
 1940              		.loc 1 1441 0 discriminator 6
 1941 002a 43B9     		cbnz	r3, .L165
 1942              	.LBB124:
 1943              	.LBB125:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 1944              		.loc 2 242 0 is_stmt 1
 1945              		.syntax unified
 1946              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1947 002c 4FF05003 			mov r3, #80												
 1948 0030 83F31188 		msr basepri, r3											
 1949 0034 BFF36F8F 		isb														
 1950 0038 BFF34F8F 		dsb														
 1951              	
 1952              	@ 0 "" 2
 1953              	.LVL212:
 1954              		.thumb
 1955              		.syntax unified
 1956              	.L166:
 1957 003c FEE7     		b	.L166
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 79


 1958              	.L165:
 1959 003e 1746     		mov	r7, r2
 1960 0040 8946     		mov	r9, r1
 1961              	.LBE125:
 1962              	.LBE124:
1457:./freertos/queue.c **** 
 1963              		.loc 1 1457 0
 1964 0042 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1965              	.LVL213:
 1966              	.LBB126:
 1967              	.LBB127:
 257:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mrs %0, basepri											\n"
 1968              		.loc 2 257 0
 1969              		.syntax unified
 1970              	@ 257 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 1971 0046 EFF31186 			mrs r6, basepri											
 1972 004a 4FF05003 		mov r3, #80												
 1973 004e 83F31188 		msr basepri, r3											
 1974 0052 BFF36F8F 		isb														
 1975 0056 BFF34F8F 		dsb														
 1976              	
 1977              	@ 0 "" 2
 1978              		.thumb
 1979              		.syntax unified
 1980              	.LBE127:
 1981              	.LBE126:
 1982              	.LBB128:
1461:./freertos/queue.c **** 
 1983              		.loc 1 1461 0
 1984 005a D4F83880 		ldr	r8, [r4, #56]
 1985              	.LVL214:
1464:./freertos/queue.c **** 		{
 1986              		.loc 1 1464 0
 1987 005e B8F1000F 		cmp	r8, #0
 1988 0062 1DD0     		beq	.L171
 1989              	.LBB129:
1466:./freertos/queue.c **** 
 1990              		.loc 1 1466 0
 1991 0064 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 1992 0068 6DB2     		sxtb	r5, r5
 1993              	.LVL215:
1470:./freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1994              		.loc 1 1470 0
 1995 006a 4946     		mov	r1, r9
 1996 006c 2046     		mov	r0, r4
 1997 006e FFF7FEFF 		bl	prvCopyDataFromQueue
 1998              	.LVL216:
1471:./freertos/queue.c **** 
 1999              		.loc 1 1471 0
 2000 0072 08F1FF33 		add	r3, r8, #-1
 2001 0076 A363     		str	r3, [r4, #56]
1477:./freertos/queue.c **** 			{
 2002              		.loc 1 1477 0
 2003 0078 B5F1FF3F 		cmp	r5, #-1
 2004 007c 0AD1     		bne	.L168
1479:./freertos/queue.c **** 				{
 2005              		.loc 1 1479 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 80


 2006 007e 2369     		ldr	r3, [r4, #16]
 2007 0080 83B1     		cbz	r3, .L172
1481:./freertos/queue.c **** 					{
 2008              		.loc 1 1481 0
 2009 0082 04F11000 		add	r0, r4, #16
 2010 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2011              	.LVL217:
 2012 008a 68B1     		cbz	r0, .L173
1485:./freertos/queue.c **** 						{
 2013              		.loc 1 1485 0
 2014 008c 77B1     		cbz	r7, .L174
1487:./freertos/queue.c **** 						}
 2015              		.loc 1 1487 0
 2016 008e 0120     		movs	r0, #1
 2017 0090 3860     		str	r0, [r7]
 2018 0092 0CE0     		b	.L167
 2019              	.L168:
1508:./freertos/queue.c **** 			}
 2020              		.loc 1 1508 0
 2021 0094 6B1C     		adds	r3, r5, #1
 2022 0096 5BB2     		sxtb	r3, r3
 2023 0098 84F84430 		strb	r3, [r4, #68]
1511:./freertos/queue.c **** 		}
 2024              		.loc 1 1511 0
 2025 009c 0120     		movs	r0, #1
 2026 009e 06E0     		b	.L167
 2027              	.LVL218:
 2028              	.L171:
 2029              	.LBE129:
1515:./freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2030              		.loc 1 1515 0
 2031 00a0 0020     		movs	r0, #0
 2032 00a2 04E0     		b	.L167
 2033              	.LVL219:
 2034              	.L172:
 2035              	.LBB130:
1511:./freertos/queue.c **** 		}
 2036              		.loc 1 1511 0
 2037 00a4 0120     		movs	r0, #1
 2038 00a6 02E0     		b	.L167
 2039              	.L173:
 2040 00a8 0120     		movs	r0, #1
 2041 00aa 00E0     		b	.L167
 2042              	.L174:
 2043 00ac 0120     		movs	r0, #1
 2044              	.LVL220:
 2045              	.L167:
 2046              	.LBE130:
 2047              	.LBE128:
 2048              	.LBB131:
 2049              	.LBB132:
 2050              		.loc 2 274 0
 2051              		.syntax unified
 2052              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2053 00ae 86F31188 			msr basepri, r6	
 2054              	@ 0 "" 2
 2055              	.LVL221:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 81


 2056              		.thumb
 2057              		.syntax unified
 2058              	.LBE132:
 2059              	.LBE131:
1522:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2060              		.loc 1 1522 0
 2061 00b2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2062              		.cfi_endproc
 2063              	.LFE125:
 2065 00b6 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2066              		.align	2
 2067              		.global	xQueuePeekFromISR
 2068              		.thumb
 2069              		.thumb_func
 2071              	xQueuePeekFromISR:
 2072              	.LFB126:
1526:./freertos/queue.c **** BaseType_t xReturn;
 2073              		.loc 1 1526 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              	.LVL222:
 2078 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2079              	.LCFI23:
 2080              		.cfi_def_cfa_offset 24
 2081              		.cfi_offset 3, -24
 2082              		.cfi_offset 4, -20
 2083              		.cfi_offset 5, -16
 2084              		.cfi_offset 6, -12
 2085              		.cfi_offset 7, -8
 2086              		.cfi_offset 14, -4
 2087              	.LVL223:
1532:./freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2088              		.loc 1 1532 0
 2089 0002 40B9     		cbnz	r0, .L177
 2090              	.LBB133:
 2091              	.LBB134:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2092              		.loc 2 242 0
 2093              		.syntax unified
 2094              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2095 0004 4FF05003 			mov r3, #80												
 2096 0008 83F31188 		msr basepri, r3											
 2097 000c BFF36F8F 		isb														
 2098 0010 BFF34F8F 		dsb														
 2099              	
 2100              	@ 0 "" 2
 2101              	.LVL224:
 2102              		.thumb
 2103              		.syntax unified
 2104              	.L178:
 2105 0014 FEE7     		b	.L178
 2106              	.L177:
 2107 0016 0446     		mov	r4, r0
 2108              	.LBE134:
 2109              	.LBE133:
1533:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 82


 2110              		.loc 1 1533 0
 2111 0018 19B9     		cbnz	r1, .L185
1533:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2112              		.loc 1 1533 0 is_stmt 0 discriminator 2
 2113 001a 036C     		ldr	r3, [r0, #64]
 2114 001c 1BB9     		cbnz	r3, .L186
1533:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2115              		.loc 1 1533 0
 2116 001e 0123     		movs	r3, #1
 2117 0020 02E0     		b	.L179
 2118              	.L185:
 2119 0022 0123     		movs	r3, #1
 2120 0024 00E0     		b	.L179
 2121              	.L186:
 2122 0026 0023     		movs	r3, #0
 2123              	.L179:
1533:./freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2124              		.loc 1 1533 0 discriminator 6
 2125 0028 43B9     		cbnz	r3, .L180
 2126              	.LBB135:
 2127              	.LBB136:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2128              		.loc 2 242 0 is_stmt 1
 2129              		.syntax unified
 2130              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2131 002a 4FF05003 			mov r3, #80												
 2132 002e 83F31188 		msr basepri, r3											
 2133 0032 BFF36F8F 		isb														
 2134 0036 BFF34F8F 		dsb														
 2135              	
 2136              	@ 0 "" 2
 2137              	.LVL225:
 2138              		.thumb
 2139              		.syntax unified
 2140              	.L181:
 2141 003a FEE7     		b	.L181
 2142              	.L180:
 2143              	.LBE136:
 2144              	.LBE135:
1534:./freertos/queue.c **** 
 2145              		.loc 1 1534 0
 2146 003c 236C     		ldr	r3, [r4, #64]
 2147 003e 43B9     		cbnz	r3, .L182
 2148              	.LBB137:
 2149              	.LBB138:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2150              		.loc 2 242 0
 2151              		.syntax unified
 2152              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2153 0040 4FF05003 			mov r3, #80												
 2154 0044 83F31188 		msr basepri, r3											
 2155 0048 BFF36F8F 		isb														
 2156 004c BFF34F8F 		dsb														
 2157              	
 2158              	@ 0 "" 2
 2159              	.LVL226:
 2160              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 83


 2161              		.syntax unified
 2162              	.L183:
 2163 0050 FEE7     		b	.L183
 2164              	.L182:
 2165 0052 0D46     		mov	r5, r1
 2166              	.LBE138:
 2167              	.LBE137:
1550:./freertos/queue.c **** 
 2168              		.loc 1 1550 0
 2169 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2170              	.LVL227:
 2171              	.LBB139:
 2172              	.LBB140:
 257:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mrs %0, basepri											\n"
 2173              		.loc 2 257 0
 2174              		.syntax unified
 2175              	@ 257 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2176 0058 EFF31186 			mrs r6, basepri											
 2177 005c 4FF05003 		mov r3, #80												
 2178 0060 83F31188 		msr basepri, r3											
 2179 0064 BFF36F8F 		isb														
 2180 0068 BFF34F8F 		dsb														
 2181              	
 2182              	@ 0 "" 2
 2183              		.thumb
 2184              		.syntax unified
 2185              	.LBE140:
 2186              	.LBE139:
1555:./freertos/queue.c **** 		{
 2187              		.loc 1 1555 0
 2188 006c A36B     		ldr	r3, [r4, #56]
 2189 006e 3BB1     		cbz	r3, .L187
1561:./freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2190              		.loc 1 1561 0
 2191 0070 E768     		ldr	r7, [r4, #12]
 2192              	.LVL228:
1562:./freertos/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2193              		.loc 1 1562 0
 2194 0072 2946     		mov	r1, r5
 2195 0074 2046     		mov	r0, r4
 2196 0076 FFF7FEFF 		bl	prvCopyDataFromQueue
 2197              	.LVL229:
1563:./freertos/queue.c **** 
 2198              		.loc 1 1563 0
 2199 007a E760     		str	r7, [r4, #12]
 2200              	.LVL230:
1565:./freertos/queue.c **** 		}
 2201              		.loc 1 1565 0
 2202 007c 0120     		movs	r0, #1
 2203 007e 00E0     		b	.L184
 2204              	.LVL231:
 2205              	.L187:
1569:./freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2206              		.loc 1 1569 0
 2207 0080 0020     		movs	r0, #0
 2208              	.L184:
 2209              	.LVL232:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 84


 2210              	.LBB141:
 2211              	.LBB142:
 2212              		.loc 2 274 0
 2213              		.syntax unified
 2214              	@ 274 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2215 0082 86F31188 			msr basepri, r6	
 2216              	@ 0 "" 2
 2217              	.LVL233:
 2218              		.thumb
 2219              		.syntax unified
 2220              	.LBE142:
 2221              	.LBE141:
1576:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2222              		.loc 1 1576 0
 2223 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2224              		.cfi_endproc
 2225              	.LFE126:
 2227              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2228              		.align	2
 2229              		.global	uxQueueMessagesWaiting
 2230              		.thumb
 2231              		.thumb_func
 2233              	uxQueueMessagesWaiting:
 2234              	.LFB127:
1580:./freertos/queue.c **** UBaseType_t uxReturn;
 2235              		.loc 1 1580 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 0
 2238              		@ frame_needed = 0, uses_anonymous_args = 0
 2239              	.LVL234:
1583:./freertos/queue.c **** 
 2240              		.loc 1 1583 0
 2241 0000 40B9     		cbnz	r0, .L190
 2242              	.LBB143:
 2243              	.LBB144:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2244              		.loc 2 242 0
 2245              		.syntax unified
 2246              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2247 0002 4FF05003 			mov r3, #80												
 2248 0006 83F31188 		msr basepri, r3											
 2249 000a BFF36F8F 		isb														
 2250 000e BFF34F8F 		dsb														
 2251              	
 2252              	@ 0 "" 2
 2253              	.LVL235:
 2254              		.thumb
 2255              		.syntax unified
 2256              	.L191:
 2257 0012 FEE7     		b	.L191
 2258              	.L190:
 2259              	.LBE144:
 2260              	.LBE143:
1580:./freertos/queue.c **** UBaseType_t uxReturn;
 2261              		.loc 1 1580 0
 2262 0014 10B5     		push	{r4, lr}
 2263              	.LCFI24:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 85


 2264              		.cfi_def_cfa_offset 8
 2265              		.cfi_offset 4, -8
 2266              		.cfi_offset 14, -4
 2267 0016 0446     		mov	r4, r0
1585:./freertos/queue.c **** 	{
 2268              		.loc 1 1585 0
 2269 0018 FFF7FEFF 		bl	vPortEnterCritical
 2270              	.LVL236:
1587:./freertos/queue.c **** 	}
 2271              		.loc 1 1587 0
 2272 001c A46B     		ldr	r4, [r4, #56]
 2273              	.LVL237:
1589:./freertos/queue.c **** 
 2274              		.loc 1 1589 0
 2275 001e FFF7FEFF 		bl	vPortExitCritical
 2276              	.LVL238:
1592:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2277              		.loc 1 1592 0
 2278 0022 2046     		mov	r0, r4
 2279 0024 10BD     		pop	{r4, pc}
 2280              		.cfi_endproc
 2281              	.LFE127:
 2283 0026 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2284              		.align	2
 2285              		.global	uxQueueSpacesAvailable
 2286              		.thumb
 2287              		.thumb_func
 2289              	uxQueueSpacesAvailable:
 2290              	.LFB128:
1596:./freertos/queue.c **** UBaseType_t uxReturn;
 2291              		.loc 1 1596 0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 0
 2294              		@ frame_needed = 0, uses_anonymous_args = 0
 2295              	.LVL239:
1601:./freertos/queue.c **** 
 2296              		.loc 1 1601 0
 2297 0000 40B9     		cbnz	r0, .L194
 2298              	.LBB145:
 2299              	.LBB146:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2300              		.loc 2 242 0
 2301              		.syntax unified
 2302              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2303 0002 4FF05003 			mov r3, #80												
 2304 0006 83F31188 		msr basepri, r3											
 2305 000a BFF36F8F 		isb														
 2306 000e BFF34F8F 		dsb														
 2307              	
 2308              	@ 0 "" 2
 2309              	.LVL240:
 2310              		.thumb
 2311              		.syntax unified
 2312              	.L195:
 2313 0012 FEE7     		b	.L195
 2314              	.L194:
 2315              	.LBE146:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 86


 2316              	.LBE145:
1596:./freertos/queue.c **** UBaseType_t uxReturn;
 2317              		.loc 1 1596 0
 2318 0014 10B5     		push	{r4, lr}
 2319              	.LCFI25:
 2320              		.cfi_def_cfa_offset 8
 2321              		.cfi_offset 4, -8
 2322              		.cfi_offset 14, -4
 2323 0016 0446     		mov	r4, r0
1603:./freertos/queue.c **** 	{
 2324              		.loc 1 1603 0
 2325 0018 FFF7FEFF 		bl	vPortEnterCritical
 2326              	.LVL241:
1605:./freertos/queue.c **** 	}
 2327              		.loc 1 1605 0
 2328 001c E36B     		ldr	r3, [r4, #60]
 2329 001e A46B     		ldr	r4, [r4, #56]
 2330              	.LVL242:
 2331 0020 1C1B     		subs	r4, r3, r4
 2332              	.LVL243:
1607:./freertos/queue.c **** 
 2333              		.loc 1 1607 0
 2334 0022 FFF7FEFF 		bl	vPortExitCritical
 2335              	.LVL244:
1610:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2336              		.loc 1 1610 0
 2337 0026 2046     		mov	r0, r4
 2338 0028 10BD     		pop	{r4, pc}
 2339              		.cfi_endproc
 2340              	.LFE128:
 2342 002a 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2343              		.align	2
 2344              		.global	uxQueueMessagesWaitingFromISR
 2345              		.thumb
 2346              		.thumb_func
 2348              	uxQueueMessagesWaitingFromISR:
 2349              	.LFB129:
1614:./freertos/queue.c **** UBaseType_t uxReturn;
 2350              		.loc 1 1614 0
 2351              		.cfi_startproc
 2352              		@ args = 0, pretend = 0, frame = 0
 2353              		@ frame_needed = 0, uses_anonymous_args = 0
 2354              		@ link register save eliminated.
 2355              	.LVL245:
1617:./freertos/queue.c **** 
 2356              		.loc 1 1617 0
 2357 0000 40B9     		cbnz	r0, .L198
 2358              	.LBB147:
 2359              	.LBB148:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2360              		.loc 2 242 0
 2361              		.syntax unified
 2362              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2363 0002 4FF05003 			mov r3, #80												
 2364 0006 83F31188 		msr basepri, r3											
 2365 000a BFF36F8F 		isb														
 2366 000e BFF34F8F 		dsb														
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 87


 2367              	
 2368              	@ 0 "" 2
 2369              	.LVL246:
 2370              		.thumb
 2371              		.syntax unified
 2372              	.L199:
 2373 0012 FEE7     		b	.L199
 2374              	.L198:
 2375              	.LBE148:
 2376              	.LBE147:
1619:./freertos/queue.c **** 
 2377              		.loc 1 1619 0
 2378 0014 806B     		ldr	r0, [r0, #56]
 2379              	.LVL247:
1622:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2380              		.loc 1 1622 0
 2381 0016 7047     		bx	lr
 2382              		.cfi_endproc
 2383              	.LFE129:
 2385              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2386              		.align	2
 2387              		.global	xQueueIsQueueEmptyFromISR
 2388              		.thumb
 2389              		.thumb_func
 2391              	xQueueIsQueueEmptyFromISR:
 2392              	.LFB135:
1936:./freertos/queue.c **** BaseType_t xReturn;
 2393              		.loc 1 1936 0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 2397              		@ link register save eliminated.
 2398              	.LVL248:
1939:./freertos/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2399              		.loc 1 1939 0
 2400 0000 40B9     		cbnz	r0, .L201
 2401              	.LBB149:
 2402              	.LBB150:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2403              		.loc 2 242 0
 2404              		.syntax unified
 2405              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2406 0002 4FF05003 			mov r3, #80												
 2407 0006 83F31188 		msr basepri, r3											
 2408 000a BFF36F8F 		isb														
 2409 000e BFF34F8F 		dsb														
 2410              	
 2411              	@ 0 "" 2
 2412              	.LVL249:
 2413              		.thumb
 2414              		.syntax unified
 2415              	.L202:
 2416 0012 FEE7     		b	.L202
 2417              	.L201:
 2418              	.LBE150:
 2419              	.LBE149:
1940:./freertos/queue.c **** 	{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 88


 2420              		.loc 1 1940 0
 2421 0014 836B     		ldr	r3, [r0, #56]
 2422 0016 0BB9     		cbnz	r3, .L204
1942:./freertos/queue.c **** 	}
 2423              		.loc 1 1942 0
 2424 0018 0120     		movs	r0, #1
 2425              	.LVL250:
 2426 001a 7047     		bx	lr
 2427              	.LVL251:
 2428              	.L204:
1946:./freertos/queue.c **** 	}
 2429              		.loc 1 1946 0
 2430 001c 0020     		movs	r0, #0
 2431              	.LVL252:
1950:./freertos/queue.c **** /*-----------------------------------------------------------*/
 2432              		.loc 1 1950 0
 2433 001e 7047     		bx	lr
 2434              		.cfi_endproc
 2435              	.LFE135:
 2437              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2438              		.align	2
 2439              		.global	xQueueIsQueueFullFromISR
 2440              		.thumb
 2441              		.thumb_func
 2443              	xQueueIsQueueFullFromISR:
 2444              	.LFB137:
1972:./freertos/queue.c **** /*-----------------------------------------------------------*/
1973:./freertos/queue.c **** 
1974:./freertos/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:./freertos/queue.c **** {
 2445              		.loc 1 1975 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 0
 2448              		@ frame_needed = 0, uses_anonymous_args = 0
 2449              		@ link register save eliminated.
 2450              	.LVL253:
1976:./freertos/queue.c **** BaseType_t xReturn;
1977:./freertos/queue.c **** 
1978:./freertos/queue.c **** 	configASSERT( xQueue );
 2451              		.loc 1 1978 0
 2452 0000 40B9     		cbnz	r0, .L206
 2453              	.LBB151:
 2454              	.LBB152:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2455              		.loc 2 242 0
 2456              		.syntax unified
 2457              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2458 0002 4FF05003 			mov r3, #80												
 2459 0006 83F31188 		msr basepri, r3											
 2460 000a BFF36F8F 		isb														
 2461 000e BFF34F8F 		dsb														
 2462              	
 2463              	@ 0 "" 2
 2464              	.LVL254:
 2465              		.thumb
 2466              		.syntax unified
 2467              	.L207:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 89


 2468 0012 FEE7     		b	.L207
 2469              	.L206:
 2470              	.LBE152:
 2471              	.LBE151:
1979:./freertos/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2472              		.loc 1 1979 0
 2473 0014 826B     		ldr	r2, [r0, #56]
 2474 0016 C36B     		ldr	r3, [r0, #60]
 2475 0018 9A42     		cmp	r2, r3
 2476 001a 01D1     		bne	.L209
1980:./freertos/queue.c **** 	{
1981:./freertos/queue.c **** 		xReturn = pdTRUE;
 2477              		.loc 1 1981 0
 2478 001c 0120     		movs	r0, #1
 2479              	.LVL255:
 2480 001e 7047     		bx	lr
 2481              	.LVL256:
 2482              	.L209:
1982:./freertos/queue.c **** 	}
1983:./freertos/queue.c **** 	else
1984:./freertos/queue.c **** 	{
1985:./freertos/queue.c **** 		xReturn = pdFALSE;
 2483              		.loc 1 1985 0
 2484 0020 0020     		movs	r0, #0
 2485              	.LVL257:
1986:./freertos/queue.c **** 	}
1987:./freertos/queue.c **** 
1988:./freertos/queue.c **** 	return xReturn;
1989:./freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2486              		.loc 1 1989 0
 2487 0022 7047     		bx	lr
 2488              		.cfi_endproc
 2489              	.LFE137:
 2491              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2492              		.align	2
 2493              		.global	vQueueAddToRegistry
 2494              		.thumb
 2495              		.thumb_func
 2497              	vQueueAddToRegistry:
 2498              	.LFB138:
1990:./freertos/queue.c **** /*-----------------------------------------------------------*/
1991:./freertos/queue.c **** 
1992:./freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:./freertos/queue.c **** 
1994:./freertos/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:./freertos/queue.c **** 	{
1996:./freertos/queue.c **** 	BaseType_t xReturn;
1997:./freertos/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:./freertos/queue.c **** 
1999:./freertos/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:./freertos/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:./freertos/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:./freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2003:./freertos/queue.c **** 		{
2004:./freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:./freertos/queue.c **** 			{
2006:./freertos/queue.c **** 				/* The queue is full - do we want to block or just leave without
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 90


2007:./freertos/queue.c **** 				posting? */
2008:./freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:./freertos/queue.c **** 				{
2010:./freertos/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:./freertos/queue.c **** 					return indicating that we need to block. */
2012:./freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:./freertos/queue.c **** 					portENABLE_INTERRUPTS();
2014:./freertos/queue.c **** 					return errQUEUE_BLOCKED;
2015:./freertos/queue.c **** 				}
2016:./freertos/queue.c **** 				else
2017:./freertos/queue.c **** 				{
2018:./freertos/queue.c **** 					portENABLE_INTERRUPTS();
2019:./freertos/queue.c **** 					return errQUEUE_FULL;
2020:./freertos/queue.c **** 				}
2021:./freertos/queue.c **** 			}
2022:./freertos/queue.c **** 		}
2023:./freertos/queue.c **** 		portENABLE_INTERRUPTS();
2024:./freertos/queue.c **** 
2025:./freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2026:./freertos/queue.c **** 		{
2027:./freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:./freertos/queue.c **** 			{
2029:./freertos/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:./freertos/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:./freertos/queue.c **** 				xReturn = pdPASS;
2032:./freertos/queue.c **** 
2033:./freertos/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:./freertos/queue.c **** 				{
2036:./freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:./freertos/queue.c **** 					into the ready list as we are within a critical section.
2038:./freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:./freertos/queue.c **** 					the event were caused from within an interrupt. */
2040:./freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:./freertos/queue.c **** 					{
2042:./freertos/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:./freertos/queue.c **** 						that a yield might be appropriate. */
2044:./freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:./freertos/queue.c **** 					}
2046:./freertos/queue.c **** 					else
2047:./freertos/queue.c **** 					{
2048:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:./freertos/queue.c **** 					}
2050:./freertos/queue.c **** 				}
2051:./freertos/queue.c **** 				else
2052:./freertos/queue.c **** 				{
2053:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:./freertos/queue.c **** 				}
2055:./freertos/queue.c **** 			}
2056:./freertos/queue.c **** 			else
2057:./freertos/queue.c **** 			{
2058:./freertos/queue.c **** 				xReturn = errQUEUE_FULL;
2059:./freertos/queue.c **** 			}
2060:./freertos/queue.c **** 		}
2061:./freertos/queue.c **** 		portENABLE_INTERRUPTS();
2062:./freertos/queue.c **** 
2063:./freertos/queue.c **** 		return xReturn;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 91


2064:./freertos/queue.c **** 	}
2065:./freertos/queue.c **** 
2066:./freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:./freertos/queue.c **** /*-----------------------------------------------------------*/
2068:./freertos/queue.c **** 
2069:./freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:./freertos/queue.c **** 
2071:./freertos/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:./freertos/queue.c **** 	{
2073:./freertos/queue.c **** 	BaseType_t xReturn;
2074:./freertos/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:./freertos/queue.c **** 
2076:./freertos/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:./freertos/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:./freertos/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:./freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2080:./freertos/queue.c **** 		{
2081:./freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:./freertos/queue.c **** 			{
2083:./freertos/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:./freertos/queue.c **** 				leave with nothing? */
2085:./freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:./freertos/queue.c **** 				{
2087:./freertos/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:./freertos/queue.c **** 					indicating that we need to block. */
2089:./freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:./freertos/queue.c **** 					portENABLE_INTERRUPTS();
2091:./freertos/queue.c **** 					return errQUEUE_BLOCKED;
2092:./freertos/queue.c **** 				}
2093:./freertos/queue.c **** 				else
2094:./freertos/queue.c **** 				{
2095:./freertos/queue.c **** 					portENABLE_INTERRUPTS();
2096:./freertos/queue.c **** 					return errQUEUE_FULL;
2097:./freertos/queue.c **** 				}
2098:./freertos/queue.c **** 			}
2099:./freertos/queue.c **** 			else
2100:./freertos/queue.c **** 			{
2101:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:./freertos/queue.c **** 			}
2103:./freertos/queue.c **** 		}
2104:./freertos/queue.c **** 		portENABLE_INTERRUPTS();
2105:./freertos/queue.c **** 
2106:./freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2107:./freertos/queue.c **** 		{
2108:./freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:./freertos/queue.c **** 			{
2110:./freertos/queue.c **** 				/* Data is available from the queue. */
2111:./freertos/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:./freertos/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:./freertos/queue.c **** 				{
2114:./freertos/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:./freertos/queue.c **** 				}
2116:./freertos/queue.c **** 				else
2117:./freertos/queue.c **** 				{
2118:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:./freertos/queue.c **** 				}
2120:./freertos/queue.c **** 				--( pxQueue->uxMessagesWaiting );
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 92


2121:./freertos/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:./freertos/queue.c **** 
2123:./freertos/queue.c **** 				xReturn = pdPASS;
2124:./freertos/queue.c **** 
2125:./freertos/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:./freertos/queue.c **** 				{
2128:./freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:./freertos/queue.c **** 					into the ready list as we are within a critical section.
2130:./freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:./freertos/queue.c **** 					the event were caused from within an interrupt. */
2132:./freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:./freertos/queue.c **** 					{
2134:./freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:./freertos/queue.c **** 					}
2136:./freertos/queue.c **** 					else
2137:./freertos/queue.c **** 					{
2138:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:./freertos/queue.c **** 					}
2140:./freertos/queue.c **** 				}
2141:./freertos/queue.c **** 				else
2142:./freertos/queue.c **** 				{
2143:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:./freertos/queue.c **** 				}
2145:./freertos/queue.c **** 			}
2146:./freertos/queue.c **** 			else
2147:./freertos/queue.c **** 			{
2148:./freertos/queue.c **** 				xReturn = pdFAIL;
2149:./freertos/queue.c **** 			}
2150:./freertos/queue.c **** 		}
2151:./freertos/queue.c **** 		portENABLE_INTERRUPTS();
2152:./freertos/queue.c **** 
2153:./freertos/queue.c **** 		return xReturn;
2154:./freertos/queue.c **** 	}
2155:./freertos/queue.c **** 
2156:./freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:./freertos/queue.c **** /*-----------------------------------------------------------*/
2158:./freertos/queue.c **** 
2159:./freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:./freertos/queue.c **** 
2161:./freertos/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:./freertos/queue.c **** 	{
2163:./freertos/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:./freertos/queue.c **** 
2165:./freertos/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:./freertos/queue.c **** 		exit without doing anything. */
2167:./freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:./freertos/queue.c **** 		{
2169:./freertos/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:./freertos/queue.c **** 
2171:./freertos/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:./freertos/queue.c **** 			co-routine has not already been woken. */
2173:./freertos/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:./freertos/queue.c **** 			{
2175:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:./freertos/queue.c **** 				{
2177:./freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 93


2178:./freertos/queue.c **** 					{
2179:./freertos/queue.c **** 						return pdTRUE;
2180:./freertos/queue.c **** 					}
2181:./freertos/queue.c **** 					else
2182:./freertos/queue.c **** 					{
2183:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:./freertos/queue.c **** 					}
2185:./freertos/queue.c **** 				}
2186:./freertos/queue.c **** 				else
2187:./freertos/queue.c **** 				{
2188:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:./freertos/queue.c **** 				}
2190:./freertos/queue.c **** 			}
2191:./freertos/queue.c **** 			else
2192:./freertos/queue.c **** 			{
2193:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:./freertos/queue.c **** 			}
2195:./freertos/queue.c **** 		}
2196:./freertos/queue.c **** 		else
2197:./freertos/queue.c **** 		{
2198:./freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:./freertos/queue.c **** 		}
2200:./freertos/queue.c **** 
2201:./freertos/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:./freertos/queue.c **** 	}
2203:./freertos/queue.c **** 
2204:./freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:./freertos/queue.c **** /*-----------------------------------------------------------*/
2206:./freertos/queue.c **** 
2207:./freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:./freertos/queue.c **** 
2209:./freertos/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:./freertos/queue.c **** 	{
2211:./freertos/queue.c **** 	BaseType_t xReturn;
2212:./freertos/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:./freertos/queue.c **** 
2214:./freertos/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:./freertos/queue.c **** 		not then just leave without doing anything. */
2216:./freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:./freertos/queue.c **** 		{
2218:./freertos/queue.c **** 			/* Copy the data from the queue. */
2219:./freertos/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:./freertos/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:./freertos/queue.c **** 			{
2222:./freertos/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:./freertos/queue.c **** 			}
2224:./freertos/queue.c **** 			else
2225:./freertos/queue.c **** 			{
2226:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:./freertos/queue.c **** 			}
2228:./freertos/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:./freertos/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:./freertos/queue.c **** 
2231:./freertos/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:./freertos/queue.c **** 			{
2233:./freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:./freertos/queue.c **** 				{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 94


2235:./freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:./freertos/queue.c **** 					{
2237:./freertos/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:./freertos/queue.c **** 					}
2239:./freertos/queue.c **** 					else
2240:./freertos/queue.c **** 					{
2241:./freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:./freertos/queue.c **** 					}
2243:./freertos/queue.c **** 				}
2244:./freertos/queue.c **** 				else
2245:./freertos/queue.c **** 				{
2246:./freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:./freertos/queue.c **** 				}
2248:./freertos/queue.c **** 			}
2249:./freertos/queue.c **** 			else
2250:./freertos/queue.c **** 			{
2251:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:./freertos/queue.c **** 			}
2253:./freertos/queue.c **** 
2254:./freertos/queue.c **** 			xReturn = pdPASS;
2255:./freertos/queue.c **** 		}
2256:./freertos/queue.c **** 		else
2257:./freertos/queue.c **** 		{
2258:./freertos/queue.c **** 			xReturn = pdFAIL;
2259:./freertos/queue.c **** 		}
2260:./freertos/queue.c **** 
2261:./freertos/queue.c **** 		return xReturn;
2262:./freertos/queue.c **** 	}
2263:./freertos/queue.c **** 
2264:./freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:./freertos/queue.c **** /*-----------------------------------------------------------*/
2266:./freertos/queue.c **** 
2267:./freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:./freertos/queue.c **** 
2269:./freertos/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:./freertos/queue.c **** 	{
 2499              		.loc 1 2270 0
 2500              		.cfi_startproc
 2501              		@ args = 0, pretend = 0, frame = 0
 2502              		@ frame_needed = 0, uses_anonymous_args = 0
 2503              		@ link register save eliminated.
 2504              	.LVL258:
2271:./freertos/queue.c **** 	UBaseType_t ux;
2272:./freertos/queue.c **** 
2273:./freertos/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:./freertos/queue.c **** 		a free slot. */
2275:./freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2505              		.loc 1 2275 0
 2506 0000 0023     		movs	r3, #0
 2507 0002 0BE0     		b	.L211
 2508              	.LVL259:
 2509              	.L214:
2276:./freertos/queue.c **** 		{
2277:./freertos/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2510              		.loc 1 2277 0
 2511 0004 074A     		ldr	r2, .L215
 2512 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 95


 2513 000a 32B9     		cbnz	r2, .L212
2278:./freertos/queue.c **** 			{
2279:./freertos/queue.c **** 				/* Store the information on this queue. */
2280:./freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2514              		.loc 1 2280 0
 2515 000c 054A     		ldr	r2, .L215
 2516 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2281:./freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2517              		.loc 1 2281 0
 2518 0012 02EBC303 		add	r3, r2, r3, lsl #3
 2519              	.LVL260:
 2520 0016 5860     		str	r0, [r3, #4]
2282:./freertos/queue.c **** 
2283:./freertos/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:./freertos/queue.c **** 				break;
 2521              		.loc 1 2284 0
 2522 0018 7047     		bx	lr
 2523              	.LVL261:
 2524              	.L212:
2275:./freertos/queue.c **** 		{
 2525              		.loc 1 2275 0 discriminator 2
 2526 001a 0133     		adds	r3, r3, #1
 2527              	.LVL262:
 2528              	.L211:
2275:./freertos/queue.c **** 		{
 2529              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2530 001c 072B     		cmp	r3, #7
 2531 001e F1D9     		bls	.L214
 2532 0020 7047     		bx	lr
 2533              	.L216:
 2534 0022 00BF     		.align	2
 2535              	.L215:
 2536 0024 00000000 		.word	xQueueRegistry
 2537              		.cfi_endproc
 2538              	.LFE138:
 2540              		.section	.text.pcQueueGetName,"ax",%progbits
 2541              		.align	2
 2542              		.global	pcQueueGetName
 2543              		.thumb
 2544              		.thumb_func
 2546              	pcQueueGetName:
 2547              	.LFB139:
2285:./freertos/queue.c **** 			}
2286:./freertos/queue.c **** 			else
2287:./freertos/queue.c **** 			{
2288:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:./freertos/queue.c **** 			}
2290:./freertos/queue.c **** 		}
2291:./freertos/queue.c **** 	}
2292:./freertos/queue.c **** 
2293:./freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:./freertos/queue.c **** /*-----------------------------------------------------------*/
2295:./freertos/queue.c **** 
2296:./freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:./freertos/queue.c **** 
2298:./freertos/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:./freertos/queue.c **** 	{
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 96


 2548              		.loc 1 2299 0 is_stmt 1
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              		@ link register save eliminated.
 2553              	.LVL263:
2300:./freertos/queue.c **** 	UBaseType_t ux;
2301:./freertos/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:./freertos/queue.c **** 
2303:./freertos/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:./freertos/queue.c **** 		removing entries from the registry while it is being searched. */
2305:./freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2554              		.loc 1 2305 0
 2555 0000 0023     		movs	r3, #0
 2556 0002 0AE0     		b	.L218
 2557              	.LVL264:
 2558              	.L221:
2306:./freertos/queue.c **** 		{
2307:./freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2559              		.loc 1 2307 0
 2560 0004 074A     		ldr	r2, .L222
 2561 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2562 000a 5268     		ldr	r2, [r2, #4]
 2563 000c 8242     		cmp	r2, r0
 2564 000e 03D1     		bne	.L219
2308:./freertos/queue.c **** 			{
2309:./freertos/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2565              		.loc 1 2309 0
 2566 0010 044A     		ldr	r2, .L222
 2567 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2568              	.LVL265:
2310:./freertos/queue.c **** 				break;
 2569              		.loc 1 2310 0
 2570 0016 7047     		bx	lr
 2571              	.LVL266:
 2572              	.L219:
2305:./freertos/queue.c **** 		{
 2573              		.loc 1 2305 0 discriminator 2
 2574 0018 0133     		adds	r3, r3, #1
 2575              	.LVL267:
 2576              	.L218:
2305:./freertos/queue.c **** 		{
 2577              		.loc 1 2305 0 is_stmt 0 discriminator 1
 2578 001a 072B     		cmp	r3, #7
 2579 001c F2D9     		bls	.L221
2301:./freertos/queue.c **** 
 2580              		.loc 1 2301 0 is_stmt 1
 2581 001e 0020     		movs	r0, #0
 2582              	.LVL268:
2311:./freertos/queue.c **** 			}
2312:./freertos/queue.c **** 			else
2313:./freertos/queue.c **** 			{
2314:./freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:./freertos/queue.c **** 			}
2316:./freertos/queue.c **** 		}
2317:./freertos/queue.c **** 
2318:./freertos/queue.c **** 		return pcReturn;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 97


2319:./freertos/queue.c **** 	}
 2583              		.loc 1 2319 0
 2584 0020 7047     		bx	lr
 2585              	.L223:
 2586 0022 00BF     		.align	2
 2587              	.L222:
 2588 0024 00000000 		.word	xQueueRegistry
 2589              		.cfi_endproc
 2590              	.LFE139:
 2592              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2593              		.align	2
 2594              		.global	vQueueUnregisterQueue
 2595              		.thumb
 2596              		.thumb_func
 2598              	vQueueUnregisterQueue:
 2599              	.LFB140:
2320:./freertos/queue.c **** 
2321:./freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:./freertos/queue.c **** /*-----------------------------------------------------------*/
2323:./freertos/queue.c **** 
2324:./freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:./freertos/queue.c **** 
2326:./freertos/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:./freertos/queue.c **** 	{
 2600              		.loc 1 2327 0
 2601              		.cfi_startproc
 2602              		@ args = 0, pretend = 0, frame = 0
 2603              		@ frame_needed = 0, uses_anonymous_args = 0
 2604              		@ link register save eliminated.
 2605              	.LVL269:
2328:./freertos/queue.c **** 	UBaseType_t ux;
2329:./freertos/queue.c **** 
2330:./freertos/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:./freertos/queue.c **** 		registry. */
2332:./freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2606              		.loc 1 2332 0
 2607 0000 0023     		movs	r3, #0
 2608 0002 0EE0     		b	.L225
 2609              	.LVL270:
 2610              	.L228:
2333:./freertos/queue.c **** 		{
2334:./freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2611              		.loc 1 2334 0
 2612 0004 084A     		ldr	r2, .L229
 2613 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2614 000a 5268     		ldr	r2, [r2, #4]
 2615 000c 8242     		cmp	r2, r0
 2616 000e 07D1     		bne	.L226
2335:./freertos/queue.c **** 			{
2336:./freertos/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:./freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2617              		.loc 1 2337 0
 2618 0010 054A     		ldr	r2, .L229
 2619 0012 0021     		movs	r1, #0
 2620 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2338:./freertos/queue.c **** 
2339:./freertos/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 98


2340:./freertos/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:./freertos/queue.c **** 				added again. */
2342:./freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2621              		.loc 1 2342 0
 2622 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2623              	.LVL271:
 2624 001c 5960     		str	r1, [r3, #4]
2343:./freertos/queue.c **** 				break;
 2625              		.loc 1 2343 0
 2626 001e 7047     		bx	lr
 2627              	.LVL272:
 2628              	.L226:
2332:./freertos/queue.c **** 		{
 2629              		.loc 1 2332 0 discriminator 2
 2630 0020 0133     		adds	r3, r3, #1
 2631              	.LVL273:
 2632              	.L225:
2332:./freertos/queue.c **** 		{
 2633              		.loc 1 2332 0 is_stmt 0 discriminator 1
 2634 0022 072B     		cmp	r3, #7
 2635 0024 EED9     		bls	.L228
 2636 0026 7047     		bx	lr
 2637              	.L230:
 2638              		.align	2
 2639              	.L229:
 2640 0028 00000000 		.word	xQueueRegistry
 2641              		.cfi_endproc
 2642              	.LFE140:
 2644              		.section	.text.vQueueDelete,"ax",%progbits
 2645              		.align	2
 2646              		.global	vQueueDelete
 2647              		.thumb
 2648              		.thumb_func
 2650              	vQueueDelete:
 2651              	.LFB130:
1626:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2652              		.loc 1 1626 0 is_stmt 1
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 0
 2655              		@ frame_needed = 0, uses_anonymous_args = 0
 2656              	.LVL274:
1629:./freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2657              		.loc 1 1629 0
 2658 0000 40B9     		cbnz	r0, .L232
 2659              	.LBB153:
 2660              	.LBB154:
 242:freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h ****             "	mov %0, %1												\n"
 2661              		.loc 2 242 0
 2662              		.syntax unified
 2663              	@ 242 "freertos/Source/portable/GCC/ARM_CM4_MPU/portmacro.h" 1
 2664 0002 4FF05003 			mov r3, #80												
 2665 0006 83F31188 		msr basepri, r3											
 2666 000a BFF36F8F 		isb														
 2667 000e BFF34F8F 		dsb														
 2668              	
 2669              	@ 0 "" 2
 2670              	.LVL275:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 99


 2671              		.thumb
 2672              		.syntax unified
 2673              	.L233:
 2674 0012 FEE7     		b	.L233
 2675              	.L232:
 2676              	.LBE154:
 2677              	.LBE153:
1626:./freertos/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2678              		.loc 1 1626 0
 2679 0014 10B5     		push	{r4, lr}
 2680              	.LCFI26:
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 4, -8
 2683              		.cfi_offset 14, -4
 2684 0016 0446     		mov	r4, r0
1634:./freertos/queue.c **** 	}
 2685              		.loc 1 1634 0
 2686 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 2687              	.LVL276:
1642:./freertos/queue.c **** 	}
 2688              		.loc 1 1642 0
 2689 001c 2046     		mov	r0, r4
 2690 001e FFF7FEFF 		bl	vPortFree
 2691              	.LVL277:
 2692 0022 10BD     		pop	{r4, pc}
 2693              		.cfi_endproc
 2694              	.LFE130:
 2696              		.comm	xQueueRegistry,64,4
 2697              		.text
 2698              	.Letext0:
 2699              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\
 2700              		.file 4 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 2701              		.file 5 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 2702              		.file 6 "freertos/include/list.h"
 2703              		.file 7 "freertos/include/task.h"
 2704              		.file 8 "freertos/include/queue.h"
 2705              		.file 9 "cmsis/include/core_cm4.h"
 2706              		.file 10 "freertos/include/portable.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 100


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:22     .text.prvIsQueueFull:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:26     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:68     .text.prvIsQueueEmpty:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:72     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:111    .text.prvCopyDataToQueue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:115    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:234    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:238    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:286    .text.prvUnlockQueue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:290    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:391    .text.xQueueGenericReset:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:396    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:502    .text.xQueueGenericReset:0000007c $d
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:507    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:511    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:551    .text.xQueueGenericCreate:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:556    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:644    .text.xQueueGenericSend:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:649    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:996    .text.xQueueGenericSend:0000018c $d
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1001   .text.prvInitialiseMutex:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1005   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1044   .text.xQueueCreateMutex:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1049   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1081   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1086   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1310   .text.xQueueGiveFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1315   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1516   .text.xQueueGenericReceive:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1521   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1875   .text.xQueueGenericReceive:0000019c $d
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1880   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:1885   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2066   .text.xQueuePeekFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2071   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2228   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2233   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2284   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2289   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2343   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2348   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2386   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2391   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2438   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2443   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2492   .text.vQueueAddToRegistry:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2497   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2536   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2541   .text.pcQueueGetName:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2546   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2588   .text.pcQueueGetName:00000024 $d
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2593   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2598   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2640   .text.vQueueUnregisterQueue:00000028 $d
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccqmusQR.s 			page 101


C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2645   .text.vQueueDelete:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccqmusQR.s:2650   .text.vQueueDelete:00000000 vQueueDelete
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
