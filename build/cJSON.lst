ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"cJSON.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.pow2gt,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	pow2gt:
  27              	.LFB8:
  28              		.file 1 "./mqtt/source/cJSON.c"
   1:./mqtt/source/cJSON.c **** /*
   2:./mqtt/source/cJSON.c ****   Copyright (c) 2009 Dave Gamble
   3:./mqtt/source/cJSON.c **** 
   4:./mqtt/source/cJSON.c ****   Permission is hereby granted, free of charge, to any person obtaining a copy
   5:./mqtt/source/cJSON.c ****   of this software and associated documentation files (the "Software"), to deal
   6:./mqtt/source/cJSON.c ****   in the Software without restriction, including without limitation the rights
   7:./mqtt/source/cJSON.c ****   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8:./mqtt/source/cJSON.c ****   copies of the Software, and to permit persons to whom the Software is
   9:./mqtt/source/cJSON.c ****   furnished to do so, subject to the following conditions:
  10:./mqtt/source/cJSON.c **** 
  11:./mqtt/source/cJSON.c ****   The above copyright notice and this permission notice shall be included in
  12:./mqtt/source/cJSON.c ****   all copies or substantial portions of the Software.
  13:./mqtt/source/cJSON.c **** 
  14:./mqtt/source/cJSON.c ****   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15:./mqtt/source/cJSON.c ****   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16:./mqtt/source/cJSON.c ****   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17:./mqtt/source/cJSON.c ****   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18:./mqtt/source/cJSON.c ****   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19:./mqtt/source/cJSON.c ****   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  20:./mqtt/source/cJSON.c ****   THE SOFTWARE.
  21:./mqtt/source/cJSON.c **** */
  22:./mqtt/source/cJSON.c **** 
  23:./mqtt/source/cJSON.c **** /* cJSON */
  24:./mqtt/source/cJSON.c **** /* JSON parser in C. */
  25:./mqtt/source/cJSON.c **** 
  26:./mqtt/source/cJSON.c **** #include <string.h>
  27:./mqtt/source/cJSON.c **** #include <stdio.h>
  28:./mqtt/source/cJSON.c **** #include <math.h>
  29:./mqtt/source/cJSON.c **** #include <stdlib.h>
  30:./mqtt/source/cJSON.c **** #include <float.h>
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 2


  31:./mqtt/source/cJSON.c **** #include <limits.h>
  32:./mqtt/source/cJSON.c **** #include <ctype.h>
  33:./mqtt/source/cJSON.c **** #include "cJSON.h"
  34:./mqtt/source/cJSON.c **** 
  35:./mqtt/source/cJSON.c **** static const char *ep;
  36:./mqtt/source/cJSON.c **** 
  37:./mqtt/source/cJSON.c **** const char *cJSON_GetErrorPtr(void) {return ep;}
  38:./mqtt/source/cJSON.c **** 
  39:./mqtt/source/cJSON.c **** static int cJSON_strcasecmp(const char *s1,const char *s2)
  40:./mqtt/source/cJSON.c **** {
  41:./mqtt/source/cJSON.c **** 	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
  42:./mqtt/source/cJSON.c **** 	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
  43:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
  44:./mqtt/source/cJSON.c **** }
  45:./mqtt/source/cJSON.c **** 
  46:./mqtt/source/cJSON.c **** static void *(*cJSON_malloc)(size_t sz) = malloc;
  47:./mqtt/source/cJSON.c **** static void (*cJSON_free)(void *ptr) = free;
  48:./mqtt/source/cJSON.c **** 
  49:./mqtt/source/cJSON.c **** static char* cJSON_strdup(const char* str)
  50:./mqtt/source/cJSON.c **** {
  51:./mqtt/source/cJSON.c ****       size_t len;
  52:./mqtt/source/cJSON.c ****       char* copy;
  53:./mqtt/source/cJSON.c **** 
  54:./mqtt/source/cJSON.c ****       len = strlen(str) + 1;
  55:./mqtt/source/cJSON.c ****       if (!(copy = (char*)cJSON_malloc(len))) return 0;
  56:./mqtt/source/cJSON.c ****       memcpy(copy,str,len);
  57:./mqtt/source/cJSON.c ****       return copy;
  58:./mqtt/source/cJSON.c **** }
  59:./mqtt/source/cJSON.c **** 
  60:./mqtt/source/cJSON.c **** void cJSON_InitHooks(cJSON_Hooks* hooks)
  61:./mqtt/source/cJSON.c **** {
  62:./mqtt/source/cJSON.c ****     if (!hooks) { /* Reset hooks */
  63:./mqtt/source/cJSON.c ****         cJSON_malloc = malloc;
  64:./mqtt/source/cJSON.c ****         cJSON_free = free;
  65:./mqtt/source/cJSON.c ****         return;
  66:./mqtt/source/cJSON.c ****     }
  67:./mqtt/source/cJSON.c **** 
  68:./mqtt/source/cJSON.c **** 	cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:malloc;
  69:./mqtt/source/cJSON.c **** 	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
  70:./mqtt/source/cJSON.c **** }
  71:./mqtt/source/cJSON.c **** 
  72:./mqtt/source/cJSON.c **** /* Internal constructor. */
  73:./mqtt/source/cJSON.c **** static cJSON *cJSON_New_Item(void)
  74:./mqtt/source/cJSON.c **** {
  75:./mqtt/source/cJSON.c **** 	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
  76:./mqtt/source/cJSON.c **** 	if (node) memset(node,0,sizeof(cJSON));
  77:./mqtt/source/cJSON.c **** 	return node;
  78:./mqtt/source/cJSON.c **** }
  79:./mqtt/source/cJSON.c **** 
  80:./mqtt/source/cJSON.c **** /* Delete a cJSON structure. */
  81:./mqtt/source/cJSON.c **** void cJSON_Delete(cJSON *c)
  82:./mqtt/source/cJSON.c **** {
  83:./mqtt/source/cJSON.c **** 	cJSON *next;
  84:./mqtt/source/cJSON.c **** 	while (c)
  85:./mqtt/source/cJSON.c **** 	{
  86:./mqtt/source/cJSON.c **** 		next=c->next;
  87:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 3


  88:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
  89:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
  90:./mqtt/source/cJSON.c **** 		cJSON_free(c);
  91:./mqtt/source/cJSON.c **** 		c=next;
  92:./mqtt/source/cJSON.c **** 	}
  93:./mqtt/source/cJSON.c **** }
  94:./mqtt/source/cJSON.c **** 
  95:./mqtt/source/cJSON.c **** /* Parse the input text to generate a number, and populate the result into item. */
  96:./mqtt/source/cJSON.c **** static const char *parse_number(cJSON *item,const char *num)
  97:./mqtt/source/cJSON.c **** {
  98:./mqtt/source/cJSON.c **** 	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
  99:./mqtt/source/cJSON.c **** 
 100:./mqtt/source/cJSON.c **** 	if (*num=='-') sign=-1,num++;	/* Has sign? */
 101:./mqtt/source/cJSON.c **** 	if (*num=='0') num++;			/* is zero */
 102:./mqtt/source/cJSON.c **** 	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number
 103:./mqtt/source/cJSON.c **** 	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (
 104:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 105:./mqtt/source/cJSON.c **** 	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 106:./mqtt/source/cJSON.c **** 		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 107:./mqtt/source/cJSON.c **** 	}
 108:./mqtt/source/cJSON.c **** 
 109:./mqtt/source/cJSON.c **** 	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponen
 110:./mqtt/source/cJSON.c **** 	
 111:./mqtt/source/cJSON.c **** 	item->valuedouble=n;
 112:./mqtt/source/cJSON.c **** 	item->valueint=(int)n;
 113:./mqtt/source/cJSON.c **** 	item->type=cJSON_Number;
 114:./mqtt/source/cJSON.c **** 	return num;
 115:./mqtt/source/cJSON.c **** }
 116:./mqtt/source/cJSON.c **** 
 117:./mqtt/source/cJSON.c **** static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
  29              		.loc 1 117 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 117 0
  36 0000 0138     		subs	r0, r0, #1
  37              	.LVL1:
  38 0002 40EA6000 		orr	r0, r0, r0, asr #1
  39              	.LVL2:
  40 0006 40EAA000 		orr	r0, r0, r0, asr #2
  41              	.LVL3:
  42 000a 40EA2010 		orr	r0, r0, r0, asr #4
  43              	.LVL4:
  44 000e 40EA2020 		orr	r0, r0, r0, asr #8
  45              	.LVL5:
  46 0012 40EA2040 		orr	r0, r0, r0, asr #16
  47              	.LVL6:
  48 0016 0130     		adds	r0, r0, #1
  49              	.LVL7:
  50 0018 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE8:
  54 001a 00BF     		.section	.text.parse_hex4,"ax",%progbits
  55              		.align	2
  56              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 4


  57              		.thumb_func
  59              	parse_hex4:
  60              	.LFB12:
 118:./mqtt/source/cJSON.c **** 
 119:./mqtt/source/cJSON.c **** typedef struct {char *buffer; int length; int offset; } printbuffer;
 120:./mqtt/source/cJSON.c **** 
 121:./mqtt/source/cJSON.c **** static char* ensure(printbuffer *p,int needed)
 122:./mqtt/source/cJSON.c **** {
 123:./mqtt/source/cJSON.c **** 	char *newbuffer;int newsize;
 124:./mqtt/source/cJSON.c **** 	if (!p || !p->buffer) return 0;
 125:./mqtt/source/cJSON.c **** 	needed+=p->offset;
 126:./mqtt/source/cJSON.c **** 	if (needed<=p->length) return p->buffer+p->offset;
 127:./mqtt/source/cJSON.c **** 
 128:./mqtt/source/cJSON.c **** 	newsize=pow2gt(needed);
 129:./mqtt/source/cJSON.c **** 	newbuffer=(char*)cJSON_malloc(newsize);
 130:./mqtt/source/cJSON.c **** 	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
 131:./mqtt/source/cJSON.c **** 	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
 132:./mqtt/source/cJSON.c **** 	cJSON_free(p->buffer);
 133:./mqtt/source/cJSON.c **** 	p->length=newsize;
 134:./mqtt/source/cJSON.c **** 	p->buffer=newbuffer;
 135:./mqtt/source/cJSON.c **** 	return newbuffer+p->offset;
 136:./mqtt/source/cJSON.c **** }
 137:./mqtt/source/cJSON.c **** 
 138:./mqtt/source/cJSON.c **** static int update(printbuffer *p)
 139:./mqtt/source/cJSON.c **** {
 140:./mqtt/source/cJSON.c **** 	char *str;
 141:./mqtt/source/cJSON.c **** 	if (!p || !p->buffer) return 0;
 142:./mqtt/source/cJSON.c **** 	str=p->buffer+p->offset;
 143:./mqtt/source/cJSON.c **** 	return p->offset+strlen(str);
 144:./mqtt/source/cJSON.c **** }
 145:./mqtt/source/cJSON.c **** 
 146:./mqtt/source/cJSON.c **** /* Render the number nicely from the given item into a string. */
 147:./mqtt/source/cJSON.c **** static char *print_number(cJSON *item,printbuffer *p)
 148:./mqtt/source/cJSON.c **** {
 149:./mqtt/source/cJSON.c **** 	char *str=0;
 150:./mqtt/source/cJSON.c **** 	double d=item->valuedouble;
 151:./mqtt/source/cJSON.c **** 	if (d==0)
 152:./mqtt/source/cJSON.c **** 	{
 153:./mqtt/source/cJSON.c **** 		if (p)	str=ensure(p,2);
 154:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
 155:./mqtt/source/cJSON.c **** 		if (str) strcpy(str,"0");
 156:./mqtt/source/cJSON.c **** 	}
 157:./mqtt/source/cJSON.c **** 	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
 158:./mqtt/source/cJSON.c **** 	{
 159:./mqtt/source/cJSON.c **** 		if (p)	str=ensure(p,21);
 160:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
 161:./mqtt/source/cJSON.c **** 		if (str)	sprintf(str,"%d",item->valueint);
 162:./mqtt/source/cJSON.c **** 	}
 163:./mqtt/source/cJSON.c **** 	else
 164:./mqtt/source/cJSON.c **** 	{
 165:./mqtt/source/cJSON.c **** 		if (p)	str=ensure(p,64);
 166:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
 167:./mqtt/source/cJSON.c **** 		if (str)
 168:./mqtt/source/cJSON.c **** 		{
 169:./mqtt/source/cJSON.c **** 			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
 170:./mqtt/source/cJSON.c **** 			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 171:./mqtt/source/cJSON.c **** 			else												sprintf(str,"%f",d);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 5


 172:./mqtt/source/cJSON.c **** 		}
 173:./mqtt/source/cJSON.c **** 	}
 174:./mqtt/source/cJSON.c **** 	return str;
 175:./mqtt/source/cJSON.c **** }
 176:./mqtt/source/cJSON.c **** 
 177:./mqtt/source/cJSON.c **** static unsigned parse_hex4(const char *str)
 178:./mqtt/source/cJSON.c **** {
  61              		.loc 1 178 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL8:
 179:./mqtt/source/cJSON.c **** 	unsigned h=0;
 180:./mqtt/source/cJSON.c **** 	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else
  67              		.loc 1 180 0
  68 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  69 0002 A3F13002 		sub	r2, r3, #48
  70 0006 D2B2     		uxtb	r2, r2
  71 0008 092A     		cmp	r2, #9
  72 000a 01D8     		bhi	.L3
  73              		.loc 1 180 0 is_stmt 0 discriminator 1
  74 000c 303B     		subs	r3, r3, #48
  75              	.LVL9:
  76 000e 0CE0     		b	.L4
  77              	.LVL10:
  78              	.L3:
  79              		.loc 1 180 0 discriminator 2
  80 0010 A3F14102 		sub	r2, r3, #65
  81 0014 D2B2     		uxtb	r2, r2
  82 0016 052A     		cmp	r2, #5
  83 0018 01D8     		bhi	.L5
  84              		.loc 1 180 0 discriminator 3
  85 001a 373B     		subs	r3, r3, #55
  86              	.LVL11:
  87 001c 05E0     		b	.L4
  88              	.LVL12:
  89              	.L5:
  90              		.loc 1 180 0 discriminator 4
  91 001e A3F16102 		sub	r2, r3, #97
  92 0022 D2B2     		uxtb	r2, r2
  93 0024 052A     		cmp	r2, #5
  94 0026 4FD8     		bhi	.L15
  95              		.loc 1 180 0 discriminator 5
  96 0028 573B     		subs	r3, r3, #87
  97              	.LVL13:
  98              	.L4:
 181:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
  99              		.loc 1 181 0 is_stmt 1
 100 002a 1B01     		lsls	r3, r3, #4
 101              	.LVL14:
 182:./mqtt/source/cJSON.c **** 	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else
 102              		.loc 1 182 0
 103 002c 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 104 002e A1F13002 		sub	r2, r1, #48
 105 0032 D2B2     		uxtb	r2, r2
 106 0034 092A     		cmp	r2, #9
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 6


 107 0036 02D8     		bhi	.L7
 108              		.loc 1 182 0 is_stmt 0 discriminator 1
 109 0038 0B44     		add	r3, r3, r1
 110              	.LVL15:
 111 003a 303B     		subs	r3, r3, #48
 112              	.LVL16:
 113 003c 0EE0     		b	.L8
 114              	.L7:
 115              		.loc 1 182 0 discriminator 2
 116 003e A1F14102 		sub	r2, r1, #65
 117 0042 D2B2     		uxtb	r2, r2
 118 0044 052A     		cmp	r2, #5
 119 0046 02D8     		bhi	.L9
 120              		.loc 1 182 0 discriminator 3
 121 0048 0B44     		add	r3, r3, r1
 122              	.LVL17:
 123 004a 373B     		subs	r3, r3, #55
 124              	.LVL18:
 125 004c 06E0     		b	.L8
 126              	.L9:
 127              		.loc 1 182 0 discriminator 4
 128 004e A1F16102 		sub	r2, r1, #97
 129 0052 D2B2     		uxtb	r2, r2
 130 0054 052A     		cmp	r2, #5
 131 0056 39D8     		bhi	.L16
 132              		.loc 1 182 0 discriminator 5
 133 0058 0B44     		add	r3, r3, r1
 134              	.LVL19:
 135 005a 573B     		subs	r3, r3, #87
 136              	.LVL20:
 137              	.L8:
 183:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
 138              		.loc 1 183 0 is_stmt 1
 139 005c 1B01     		lsls	r3, r3, #4
 140              	.LVL21:
 184:./mqtt/source/cJSON.c **** 	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else
 141              		.loc 1 184 0
 142 005e 8178     		ldrb	r1, [r0, #2]	@ zero_extendqisi2
 143 0060 A1F13002 		sub	r2, r1, #48
 144 0064 D2B2     		uxtb	r2, r2
 145 0066 092A     		cmp	r2, #9
 146 0068 02D8     		bhi	.L10
 147              		.loc 1 184 0 is_stmt 0 discriminator 1
 148 006a 0B44     		add	r3, r3, r1
 149              	.LVL22:
 150 006c 303B     		subs	r3, r3, #48
 151              	.LVL23:
 152 006e 0EE0     		b	.L11
 153              	.L10:
 154              		.loc 1 184 0 discriminator 2
 155 0070 A1F14102 		sub	r2, r1, #65
 156 0074 D2B2     		uxtb	r2, r2
 157 0076 052A     		cmp	r2, #5
 158 0078 02D8     		bhi	.L12
 159              		.loc 1 184 0 discriminator 3
 160 007a 0B44     		add	r3, r3, r1
 161              	.LVL24:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 7


 162 007c 373B     		subs	r3, r3, #55
 163              	.LVL25:
 164 007e 06E0     		b	.L11
 165              	.L12:
 166              		.loc 1 184 0 discriminator 4
 167 0080 A1F16102 		sub	r2, r1, #97
 168 0084 D2B2     		uxtb	r2, r2
 169 0086 052A     		cmp	r2, #5
 170 0088 22D8     		bhi	.L17
 171              		.loc 1 184 0 discriminator 5
 172 008a 0B44     		add	r3, r3, r1
 173              	.LVL26:
 174 008c 573B     		subs	r3, r3, #87
 175              	.LVL27:
 176              	.L11:
 185:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
 177              		.loc 1 185 0 is_stmt 1
 178 008e 1B01     		lsls	r3, r3, #4
 179              	.LVL28:
 186:./mqtt/source/cJSON.c **** 	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else
 180              		.loc 1 186 0
 181 0090 C078     		ldrb	r0, [r0, #3]	@ zero_extendqisi2
 182              	.LVL29:
 183 0092 A0F13002 		sub	r2, r0, #48
 184 0096 D2B2     		uxtb	r2, r2
 185 0098 092A     		cmp	r2, #9
 186 009a 03D8     		bhi	.L13
 187              		.loc 1 186 0 is_stmt 0 discriminator 1
 188 009c 0344     		add	r3, r3, r0
 189              	.LVL30:
 190 009e A3F13000 		sub	r0, r3, #48
 191 00a2 7047     		bx	lr
 192              	.LVL31:
 193              	.L13:
 194              		.loc 1 186 0 discriminator 2
 195 00a4 A0F14102 		sub	r2, r0, #65
 196 00a8 D2B2     		uxtb	r2, r2
 197 00aa 052A     		cmp	r2, #5
 198 00ac 03D8     		bhi	.L14
 199              		.loc 1 186 0 discriminator 3
 200 00ae 0344     		add	r3, r3, r0
 201              	.LVL32:
 202 00b0 A3F13700 		sub	r0, r3, #55
 203 00b4 7047     		bx	lr
 204              	.LVL33:
 205              	.L14:
 206              		.loc 1 186 0 discriminator 4
 207 00b6 A0F16102 		sub	r2, r0, #97
 208 00ba D2B2     		uxtb	r2, r2
 209 00bc 052A     		cmp	r2, #5
 210 00be 09D8     		bhi	.L18
 211              		.loc 1 186 0 discriminator 5
 212 00c0 0344     		add	r3, r3, r0
 213              	.LVL34:
 214 00c2 A3F15700 		sub	r0, r3, #87
 215 00c6 7047     		bx	lr
 216              	.LVL35:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 8


 217              	.L15:
 180:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
 218              		.loc 1 180 0 is_stmt 1
 219 00c8 0020     		movs	r0, #0
 220              	.LVL36:
 221 00ca 7047     		bx	lr
 222              	.LVL37:
 223              	.L16:
 182:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
 224              		.loc 1 182 0
 225 00cc 0020     		movs	r0, #0
 226              	.LVL38:
 227 00ce 7047     		bx	lr
 228              	.LVL39:
 229              	.L17:
 184:./mqtt/source/cJSON.c **** 	h=h<<4;str++;
 230              		.loc 1 184 0
 231 00d0 0020     		movs	r0, #0
 232              	.LVL40:
 233 00d2 7047     		bx	lr
 234              	.LVL41:
 235              	.L18:
 236              		.loc 1 186 0
 237 00d4 0020     		movs	r0, #0
 187:./mqtt/source/cJSON.c **** 	return h;
 188:./mqtt/source/cJSON.c **** }
 238              		.loc 1 188 0
 239 00d6 7047     		bx	lr
 240              		.cfi_endproc
 241              	.LFE12:
 243              		.section	.text.parse_string,"ax",%progbits
 244              		.align	2
 245              		.thumb
 246              		.thumb_func
 248              	parse_string:
 249              	.LFB13:
 189:./mqtt/source/cJSON.c **** 
 190:./mqtt/source/cJSON.c **** /* Parse the input text into an unescaped cstring, and populate item. */
 191:./mqtt/source/cJSON.c **** static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
 192:./mqtt/source/cJSON.c **** static const char *parse_string(cJSON *item,const char *str)
 193:./mqtt/source/cJSON.c **** {
 250              		.loc 1 193 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              	.LVL42:
 194:./mqtt/source/cJSON.c **** 	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 195:./mqtt/source/cJSON.c **** 	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 255              		.loc 1 195 0
 256 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 257 0002 222B     		cmp	r3, #34
 258 0004 09D0     		beq	.L48
 259              		.loc 1 195 0 is_stmt 0 discriminator 1
 260 0006 674B     		ldr	r3, .L55
 261 0008 1960     		str	r1, [r3]
 262 000a 0020     		movs	r0, #0
 263              	.LVL43:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 9


 196:./mqtt/source/cJSON.c **** 	
 197:./mqtt/source/cJSON.c **** 	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 198:./mqtt/source/cJSON.c **** 	
 199:./mqtt/source/cJSON.c **** 	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 200:./mqtt/source/cJSON.c **** 	if (!out) return 0;
 201:./mqtt/source/cJSON.c **** 	
 202:./mqtt/source/cJSON.c **** 	ptr=str+1;ptr2=out;
 203:./mqtt/source/cJSON.c **** 	while (*ptr!='\"' && *ptr)
 204:./mqtt/source/cJSON.c **** 	{
 205:./mqtt/source/cJSON.c **** 		if (*ptr!='\\') *ptr2++=*ptr++;
 206:./mqtt/source/cJSON.c **** 		else
 207:./mqtt/source/cJSON.c **** 		{
 208:./mqtt/source/cJSON.c **** 			ptr++;
 209:./mqtt/source/cJSON.c **** 			switch (*ptr)
 210:./mqtt/source/cJSON.c **** 			{
 211:./mqtt/source/cJSON.c **** 				case 'b': *ptr2++='\b';	break;
 212:./mqtt/source/cJSON.c **** 				case 'f': *ptr2++='\f';	break;
 213:./mqtt/source/cJSON.c **** 				case 'n': *ptr2++='\n';	break;
 214:./mqtt/source/cJSON.c **** 				case 'r': *ptr2++='\r';	break;
 215:./mqtt/source/cJSON.c **** 				case 't': *ptr2++='\t';	break;
 216:./mqtt/source/cJSON.c **** 				case 'u':	 /* transcode utf16 to utf8. */
 217:./mqtt/source/cJSON.c **** 					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 218:./mqtt/source/cJSON.c **** 
 219:./mqtt/source/cJSON.c **** 					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 220:./mqtt/source/cJSON.c **** 
 221:./mqtt/source/cJSON.c **** 					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 222:./mqtt/source/cJSON.c **** 					{
 223:./mqtt/source/cJSON.c **** 						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 224:./mqtt/source/cJSON.c **** 						uc2=parse_hex4(ptr+3);ptr+=6;
 225:./mqtt/source/cJSON.c **** 						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 226:./mqtt/source/cJSON.c **** 						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 227:./mqtt/source/cJSON.c **** 					}
 228:./mqtt/source/cJSON.c **** 
 229:./mqtt/source/cJSON.c **** 					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 230:./mqtt/source/cJSON.c **** 					
 231:./mqtt/source/cJSON.c **** 					switch (len) {
 232:./mqtt/source/cJSON.c **** 						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 233:./mqtt/source/cJSON.c **** 						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 234:./mqtt/source/cJSON.c **** 						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 235:./mqtt/source/cJSON.c **** 						case 1: *--ptr2 =(uc | firstByteMark[len]);
 236:./mqtt/source/cJSON.c **** 					}
 237:./mqtt/source/cJSON.c **** 					ptr2+=len;
 238:./mqtt/source/cJSON.c **** 					break;
 239:./mqtt/source/cJSON.c **** 				default:  *ptr2++=*ptr; break;
 240:./mqtt/source/cJSON.c **** 			}
 241:./mqtt/source/cJSON.c **** 			ptr++;
 242:./mqtt/source/cJSON.c **** 		}
 243:./mqtt/source/cJSON.c **** 	}
 244:./mqtt/source/cJSON.c **** 	*ptr2=0;
 245:./mqtt/source/cJSON.c **** 	if (*ptr=='\"') ptr++;
 246:./mqtt/source/cJSON.c **** 	item->valuestring=out;
 247:./mqtt/source/cJSON.c **** 	item->type=cJSON_String;
 248:./mqtt/source/cJSON.c **** 	return ptr;
 249:./mqtt/source/cJSON.c **** }
 264              		.loc 1 249 0 is_stmt 1 discriminator 1
 265 000c 7047     		bx	lr
 266              	.LVL44:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 10


 267              	.L24:
 268              	.LCFI0:
 269              		.cfi_def_cfa_offset 24
 270              		.cfi_offset 4, -24
 271              		.cfi_offset 5, -20
 272              		.cfi_offset 6, -16
 273              		.cfi_offset 7, -12
 274              		.cfi_offset 8, -8
 275              		.cfi_offset 14, -4
 197:./mqtt/source/cJSON.c **** 	
 276              		.loc 1 197 0 discriminator 6
 277 000e 551C     		adds	r5, r2, #1
 278              	.LVL45:
 279 0010 5C2B     		cmp	r3, #92
 280 0012 00D1     		bne	.L22
 197:./mqtt/source/cJSON.c **** 	
 281              		.loc 1 197 0 is_stmt 0 discriminator 1
 282 0014 951C     		adds	r5, r2, #2
 283              	.LVL46:
 284              	.L22:
 285 0016 2A46     		mov	r2, r5
 286 0018 04E0     		b	.L20
 287              	.LVL47:
 288              	.L48:
 289              	.LCFI1:
 290              		.cfi_def_cfa_offset 0
 291              		.cfi_restore 4
 292              		.cfi_restore 5
 293              		.cfi_restore 6
 294              		.cfi_restore 7
 295              		.cfi_restore 8
 296              		.cfi_restore 14
 193:./mqtt/source/cJSON.c **** 	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 297              		.loc 1 193 0 is_stmt 1
 298 001a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 299              	.LCFI2:
 300              		.cfi_def_cfa_offset 24
 301              		.cfi_offset 4, -24
 302              		.cfi_offset 5, -20
 303              		.cfi_offset 6, -16
 304              		.cfi_offset 7, -12
 305              		.cfi_offset 8, -8
 306              		.cfi_offset 14, -4
 307 001e 4C1C     		adds	r4, r1, #1
 308 0020 2246     		mov	r2, r4
 309 0022 0021     		movs	r1, #0
 310              	.LVL48:
 311              	.L20:
 197:./mqtt/source/cJSON.c **** 	
 312              		.loc 1 197 0 discriminator 3
 313 0024 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 314 0026 222B     		cmp	r3, #34
 315 0028 02D0     		beq	.L23
 197:./mqtt/source/cJSON.c **** 	
 316              		.loc 1 197 0 is_stmt 0 discriminator 4
 317 002a 0BB1     		cbz	r3, .L23
 318              	.LVL49:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 11


 197:./mqtt/source/cJSON.c **** 	
 319              		.loc 1 197 0 discriminator 5
 320 002c 0131     		adds	r1, r1, #1
 321              	.LVL50:
 322 002e EED1     		bne	.L24
 323              	.L23:
 324 0030 0646     		mov	r6, r0
 199:./mqtt/source/cJSON.c **** 	if (!out) return 0;
 325              		.loc 1 199 0 is_stmt 1
 326 0032 5D4B     		ldr	r3, .L55+4
 327 0034 1B68     		ldr	r3, [r3]
 328 0036 481C     		adds	r0, r1, #1
 329              	.LVL51:
 330 0038 9847     		blx	r3
 331              	.LVL52:
 200:./mqtt/source/cJSON.c **** 	
 332              		.loc 1 200 0
 333 003a 0746     		mov	r7, r0
 334 003c 0028     		cmp	r0, #0
 335 003e 00F0AE80 		beq	.L49
 336 0042 0546     		mov	r5, r0
 337 0044 99E0     		b	.L25
 338              	.LVL53:
 339              	.L46:
 205:./mqtt/source/cJSON.c **** 		else
 340              		.loc 1 205 0
 341 0046 5C2B     		cmp	r3, #92
 342 0048 03D0     		beq	.L26
 343              	.LVL54:
 205:./mqtt/source/cJSON.c **** 		else
 344              		.loc 1 205 0 is_stmt 0 discriminator 1
 345 004a 0134     		adds	r4, r4, #1
 346              	.LVL55:
 347 004c 2B70     		strb	r3, [r5]
 348 004e 0135     		adds	r5, r5, #1
 349              	.LVL56:
 350 0050 93E0     		b	.L25
 351              	.L26:
 208:./mqtt/source/cJSON.c **** 			switch (*ptr)
 352              		.loc 1 208 0 is_stmt 1
 353 0052 621C     		adds	r2, r4, #1
 354              	.LVL57:
 209:./mqtt/source/cJSON.c **** 			{
 355              		.loc 1 209 0
 356 0054 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 357 0056 A1F16203 		sub	r3, r1, #98
 358 005a 132B     		cmp	r3, #19
 359 005c 00F28A80 		bhi	.L28
 360 0060 DFE803F0 		tbb	[pc, r3]
 361              	.L30:
 362 0064 0A       		.byte	(.L29-.L30)/2
 363 0065 88       		.byte	(.L28-.L30)/2
 364 0066 88       		.byte	(.L28-.L30)/2
 365 0067 88       		.byte	(.L28-.L30)/2
 366 0068 0E       		.byte	(.L31-.L30)/2
 367 0069 88       		.byte	(.L28-.L30)/2
 368 006a 88       		.byte	(.L28-.L30)/2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 12


 369 006b 88       		.byte	(.L28-.L30)/2
 370 006c 88       		.byte	(.L28-.L30)/2
 371 006d 88       		.byte	(.L28-.L30)/2
 372 006e 88       		.byte	(.L28-.L30)/2
 373 006f 88       		.byte	(.L28-.L30)/2
 374 0070 12       		.byte	(.L32-.L30)/2
 375 0071 88       		.byte	(.L28-.L30)/2
 376 0072 88       		.byte	(.L28-.L30)/2
 377 0073 88       		.byte	(.L28-.L30)/2
 378 0074 16       		.byte	(.L33-.L30)/2
 379 0075 88       		.byte	(.L28-.L30)/2
 380 0076 1A       		.byte	(.L34-.L30)/2
 381 0077 1E       		.byte	(.L35-.L30)/2
 382              		.p2align 1
 383              	.L29:
 384              	.LVL58:
 211:./mqtt/source/cJSON.c **** 				case 'f': *ptr2++='\f';	break;
 385              		.loc 1 211 0
 386 0078 0823     		movs	r3, #8
 387 007a 2B70     		strb	r3, [r5]
 388 007c 0135     		adds	r5, r5, #1
 389              	.LVL59:
 390 007e 7BE0     		b	.L36
 391              	.L31:
 392              	.LVL60:
 212:./mqtt/source/cJSON.c **** 				case 'n': *ptr2++='\n';	break;
 393              		.loc 1 212 0
 394 0080 0C23     		movs	r3, #12
 395 0082 2B70     		strb	r3, [r5]
 396 0084 0135     		adds	r5, r5, #1
 397              	.LVL61:
 398 0086 77E0     		b	.L36
 399              	.L32:
 400              	.LVL62:
 213:./mqtt/source/cJSON.c **** 				case 'r': *ptr2++='\r';	break;
 401              		.loc 1 213 0
 402 0088 0A23     		movs	r3, #10
 403 008a 2B70     		strb	r3, [r5]
 404 008c 0135     		adds	r5, r5, #1
 405              	.LVL63:
 406 008e 73E0     		b	.L36
 407              	.L33:
 408              	.LVL64:
 214:./mqtt/source/cJSON.c **** 				case 't': *ptr2++='\t';	break;
 409              		.loc 1 214 0
 410 0090 0D23     		movs	r3, #13
 411 0092 2B70     		strb	r3, [r5]
 412 0094 0135     		adds	r5, r5, #1
 413              	.LVL65:
 414 0096 6FE0     		b	.L36
 415              	.L34:
 416              	.LVL66:
 215:./mqtt/source/cJSON.c **** 				case 'u':	 /* transcode utf16 to utf8. */
 417              		.loc 1 215 0
 418 0098 0923     		movs	r3, #9
 419 009a 2B70     		strb	r3, [r5]
 420 009c 0135     		adds	r5, r5, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 13


 421              	.LVL67:
 422 009e 6BE0     		b	.L36
 423              	.L35:
 217:./mqtt/source/cJSON.c **** 
 424              		.loc 1 217 0
 425 00a0 A01C     		adds	r0, r4, #2
 426 00a2 FFF7FEFF 		bl	parse_hex4
 427              	.LVL68:
 428 00a6 8046     		mov	r8, r0
 429              	.LVL69:
 430 00a8 621D     		adds	r2, r4, #5
 431              	.LVL70:
 219:./mqtt/source/cJSON.c **** 
 432              		.loc 1 219 0
 433 00aa A0F55C43 		sub	r3, r0, #56320
 434 00ae B3F5806F 		cmp	r3, #1024
 435 00b2 61D3     		bcc	.L36
 219:./mqtt/source/cJSON.c **** 
 436              		.loc 1 219 0 is_stmt 0 discriminator 1
 437 00b4 0028     		cmp	r0, #0
 438 00b6 5FD0     		beq	.L36
 221:./mqtt/source/cJSON.c **** 					{
 439              		.loc 1 221 0 is_stmt 1
 440 00b8 A0F55843 		sub	r3, r0, #55296
 441 00bc B3F5806F 		cmp	r3, #1024
 442 00c0 19D2     		bcs	.L37
 223:./mqtt/source/cJSON.c **** 						uc2=parse_hex4(ptr+3);ptr+=6;
 443              		.loc 1 223 0
 444 00c2 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 445 00c4 5C2B     		cmp	r3, #92
 446 00c6 57D1     		bne	.L36
 223:./mqtt/source/cJSON.c **** 						uc2=parse_hex4(ptr+3);ptr+=6;
 447              		.loc 1 223 0 is_stmt 0 discriminator 1
 448 00c8 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 449 00ca 752B     		cmp	r3, #117
 450 00cc 54D1     		bne	.L36
 224:./mqtt/source/cJSON.c **** 						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 451              		.loc 1 224 0 is_stmt 1
 452 00ce 04F10800 		add	r0, r4, #8
 453              	.LVL71:
 454 00d2 FFF7FEFF 		bl	parse_hex4
 455              	.LVL72:
 456 00d6 04F10B02 		add	r2, r4, #11
 457              	.LVL73:
 225:./mqtt/source/cJSON.c **** 						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 458              		.loc 1 225 0
 459 00da A0F55C43 		sub	r3, r0, #56320
 460 00de B3F5806F 		cmp	r3, #1024
 461 00e2 49D2     		bcs	.L36
 226:./mqtt/source/cJSON.c **** 					}
 462              		.loc 1 226 0
 463 00e4 314B     		ldr	r3, .L55+8
 464 00e6 03EA8828 		and	r8, r3, r8, lsl #10
 465              	.LVL74:
 466 00ea C0F30900 		ubfx	r0, r0, #0, #10
 467              	.LVL75:
 468 00ee 48EA0008 		orr	r8, r8, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 14


 469 00f2 08F58038 		add	r8, r8, #65536
 470              	.LVL76:
 471              	.L37:
 229:./mqtt/source/cJSON.c **** 					
 472              		.loc 1 229 0
 473 00f6 B8F17F0F 		cmp	r8, #127
 474 00fa 07D9     		bls	.L50
 229:./mqtt/source/cJSON.c **** 					
 475              		.loc 1 229 0 is_stmt 0 discriminator 2
 476 00fc B8F5006F 		cmp	r8, #2048
 477 0100 06D3     		bcc	.L51
 229:./mqtt/source/cJSON.c **** 					
 478              		.loc 1 229 0 discriminator 5
 479 0102 B8F5803F 		cmp	r8, #65536
 480 0106 05D3     		bcc	.L52
 229:./mqtt/source/cJSON.c **** 					
 481              		.loc 1 229 0
 482 0108 0423     		movs	r3, #4
 483 010a 04E0     		b	.L38
 484              	.L50:
 485 010c 0123     		movs	r3, #1
 486 010e 02E0     		b	.L38
 487              	.L51:
 488 0110 0223     		movs	r3, #2
 489 0112 00E0     		b	.L38
 490              	.L52:
 491 0114 0323     		movs	r3, #3
 492              	.L38:
 493              	.LVL77:
 229:./mqtt/source/cJSON.c **** 					
 494              		.loc 1 229 0 discriminator 9
 495 0116 1C46     		mov	r4, r3
 496 0118 1D44     		add	r5, r5, r3
 497              	.LVL78:
 231:./mqtt/source/cJSON.c **** 						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 498              		.loc 1 231 0 is_stmt 1 discriminator 9
 499 011a 591E     		subs	r1, r3, #1
 500 011c 0329     		cmp	r1, #3
 501 011e 27D8     		bhi	.L39
 502 0120 DFE801F0 		tbb	[pc, r1]
 503              	.L41:
 504 0124 1E       		.byte	(.L53-.L41)/2
 505 0125 14       		.byte	(.L42-.L41)/2
 506 0126 0B       		.byte	(.L43-.L41)/2
 507 0127 02       		.byte	(.L44-.L41)/2
 508              		.p2align 1
 509              	.L44:
 510              	.LVL79:
 232:./mqtt/source/cJSON.c **** 						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 511              		.loc 1 232 0
 512 0128 08F03F01 		and	r1, r8, #63
 513 012c 61F07F01 		orn	r1, r1, #127
 514 0130 05F8011C 		strb	r1, [r5, #-1]
 515 0134 4FEA9818 		lsr	r8, r8, #6
 516              	.LVL80:
 517 0138 013D     		subs	r5, r5, #1
 518              	.LVL81:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 15


 519              	.L43:
 233:./mqtt/source/cJSON.c **** 						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 520              		.loc 1 233 0
 521 013a 08F03F01 		and	r1, r8, #63
 522 013e 61F07F01 		orn	r1, r1, #127
 523 0142 05F8011C 		strb	r1, [r5, #-1]
 524 0146 4FEA9818 		lsr	r8, r8, #6
 525              	.LVL82:
 526 014a 013D     		subs	r5, r5, #1
 527              	.LVL83:
 528              	.L42:
 234:./mqtt/source/cJSON.c **** 						case 1: *--ptr2 =(uc | firstByteMark[len]);
 529              		.loc 1 234 0
 530 014c 681E     		subs	r0, r5, #1
 531              	.LVL84:
 532 014e 08F03F01 		and	r1, r8, #63
 533 0152 61F07F01 		orn	r1, r1, #127
 534 0156 05F8011C 		strb	r1, [r5, #-1]
 535 015a 4FEA9818 		lsr	r8, r8, #6
 536              	.LVL85:
 537 015e 00E0     		b	.L40
 538              	.LVL86:
 539              	.L53:
 229:./mqtt/source/cJSON.c **** 					
 540              		.loc 1 229 0
 541 0160 2846     		mov	r0, r5
 542              	.LVL87:
 543              	.L40:
 235:./mqtt/source/cJSON.c **** 					}
 544              		.loc 1 235 0
 545 0162 451E     		subs	r5, r0, #1
 546              	.LVL88:
 547 0164 1249     		ldr	r1, .L55+12
 548 0166 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 549              	.LVL89:
 550 0168 43EA0808 		orr	r8, r3, r8
 551              	.LVL90:
 552 016c 00F8018C 		strb	r8, [r0, #-1]
 553              	.L39:
 237:./mqtt/source/cJSON.c **** 					break;
 554              		.loc 1 237 0
 555 0170 2544     		add	r5, r5, r4
 556              	.LVL91:
 238:./mqtt/source/cJSON.c **** 				default:  *ptr2++=*ptr; break;
 557              		.loc 1 238 0
 558 0172 01E0     		b	.L36
 559              	.LVL92:
 560              	.L28:
 239:./mqtt/source/cJSON.c **** 			}
 561              		.loc 1 239 0
 562 0174 2970     		strb	r1, [r5]
 563 0176 0135     		adds	r5, r5, #1
 564              	.LVL93:
 565              	.L36:
 241:./mqtt/source/cJSON.c **** 		}
 566              		.loc 1 241 0
 567 0178 541C     		adds	r4, r2, #1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 16


 568              	.LVL94:
 569              	.L25:
 203:./mqtt/source/cJSON.c **** 	{
 570              		.loc 1 203 0
 571 017a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 572 017c 222B     		cmp	r3, #34
 573 017e 02D0     		beq	.L45
 203:./mqtt/source/cJSON.c **** 	{
 574              		.loc 1 203 0 is_stmt 0 discriminator 1
 575 0180 002B     		cmp	r3, #0
 576 0182 7FF460AF 		bne	.L46
 577              	.L45:
 244:./mqtt/source/cJSON.c **** 	if (*ptr=='\"') ptr++;
 578              		.loc 1 244 0 is_stmt 1
 579 0186 0023     		movs	r3, #0
 580 0188 2B70     		strb	r3, [r5]
 245:./mqtt/source/cJSON.c **** 	item->valuestring=out;
 581              		.loc 1 245 0
 582 018a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 583 018c 222B     		cmp	r3, #34
 584 018e 00D1     		bne	.L47
 245:./mqtt/source/cJSON.c **** 	item->valuestring=out;
 585              		.loc 1 245 0 is_stmt 0 discriminator 1
 586 0190 0134     		adds	r4, r4, #1
 587              	.LVL95:
 588              	.L47:
 246:./mqtt/source/cJSON.c **** 	item->type=cJSON_String;
 589              		.loc 1 246 0 is_stmt 1
 590 0192 3761     		str	r7, [r6, #16]
 247:./mqtt/source/cJSON.c **** 	return ptr;
 591              		.loc 1 247 0
 592 0194 0423     		movs	r3, #4
 593 0196 F360     		str	r3, [r6, #12]
 248:./mqtt/source/cJSON.c **** }
 594              		.loc 1 248 0
 595 0198 2046     		mov	r0, r4
 596 019a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 597              	.LVL96:
 598              	.L49:
 200:./mqtt/source/cJSON.c **** 	
 599              		.loc 1 200 0
 600 019e 0020     		movs	r0, #0
 601              	.LVL97:
 602              		.loc 1 249 0
 603 01a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 604              	.LVL98:
 605              	.L56:
 606              		.align	2
 607              	.L55:
 608 01a4 00000000 		.word	.LANCHOR0
 609 01a8 00000000 		.word	.LANCHOR1
 610 01ac 00FC0F00 		.word	1047552
 611 01b0 00000000 		.word	.LANCHOR2
 612              		.cfi_endproc
 613              	.LFE13:
 615              		.section	.text.skip,"ax",%progbits
 616              		.align	2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 17


 617              		.thumb
 618              		.thumb_func
 620              	skip:
 621              	.LFB16:
 250:./mqtt/source/cJSON.c **** 
 251:./mqtt/source/cJSON.c **** /* Render the cstring provided to an escaped version that can be printed. */
 252:./mqtt/source/cJSON.c **** static char *print_string_ptr(const char *str,printbuffer *p)
 253:./mqtt/source/cJSON.c **** {
 254:./mqtt/source/cJSON.c **** 	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
 255:./mqtt/source/cJSON.c **** 	
 256:./mqtt/source/cJSON.c **** 	for (ptr=str;*ptr;ptr++) flag|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;
 257:./mqtt/source/cJSON.c **** 	if (!flag)
 258:./mqtt/source/cJSON.c **** 	{
 259:./mqtt/source/cJSON.c **** 		len=ptr-str;
 260:./mqtt/source/cJSON.c **** 		if (p) out=ensure(p,len+3);
 261:./mqtt/source/cJSON.c **** 		else		out=(char*)cJSON_malloc(len+3);
 262:./mqtt/source/cJSON.c **** 		if (!out) return 0;
 263:./mqtt/source/cJSON.c **** 		ptr2=out;*ptr2++='\"';
 264:./mqtt/source/cJSON.c **** 		strcpy(ptr2,str);
 265:./mqtt/source/cJSON.c **** 		ptr2[len]='\"';
 266:./mqtt/source/cJSON.c **** 		ptr2[len+1]=0;
 267:./mqtt/source/cJSON.c **** 		return out;
 268:./mqtt/source/cJSON.c **** 	}
 269:./mqtt/source/cJSON.c **** 	
 270:./mqtt/source/cJSON.c **** 	if (!str)
 271:./mqtt/source/cJSON.c **** 	{
 272:./mqtt/source/cJSON.c **** 		if (p)	out=ensure(p,3);
 273:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 274:./mqtt/source/cJSON.c **** 		if (!out) return 0;
 275:./mqtt/source/cJSON.c **** 		strcpy(out,"\"\"");
 276:./mqtt/source/cJSON.c **** 		return out;
 277:./mqtt/source/cJSON.c **** 	}
 278:./mqtt/source/cJSON.c **** 	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<3
 279:./mqtt/source/cJSON.c **** 	
 280:./mqtt/source/cJSON.c **** 	if (p)	out=ensure(p,len+3);
 281:./mqtt/source/cJSON.c **** 	else	out=(char*)cJSON_malloc(len+3);
 282:./mqtt/source/cJSON.c **** 	if (!out) return 0;
 283:./mqtt/source/cJSON.c **** 
 284:./mqtt/source/cJSON.c **** 	ptr2=out;ptr=str;
 285:./mqtt/source/cJSON.c **** 	*ptr2++='\"';
 286:./mqtt/source/cJSON.c **** 	while (*ptr)
 287:./mqtt/source/cJSON.c **** 	{
 288:./mqtt/source/cJSON.c **** 		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
 289:./mqtt/source/cJSON.c **** 		else
 290:./mqtt/source/cJSON.c **** 		{
 291:./mqtt/source/cJSON.c **** 			*ptr2++='\\';
 292:./mqtt/source/cJSON.c **** 			switch (token=*ptr++)
 293:./mqtt/source/cJSON.c **** 			{
 294:./mqtt/source/cJSON.c **** 				case '\\':	*ptr2++='\\';	break;
 295:./mqtt/source/cJSON.c **** 				case '\"':	*ptr2++='\"';	break;
 296:./mqtt/source/cJSON.c **** 				case '\b':	*ptr2++='b';	break;
 297:./mqtt/source/cJSON.c **** 				case '\f':	*ptr2++='f';	break;
 298:./mqtt/source/cJSON.c **** 				case '\n':	*ptr2++='n';	break;
 299:./mqtt/source/cJSON.c **** 				case '\r':	*ptr2++='r';	break;
 300:./mqtt/source/cJSON.c **** 				case '\t':	*ptr2++='t';	break;
 301:./mqtt/source/cJSON.c **** 				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
 302:./mqtt/source/cJSON.c **** 			}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 18


 303:./mqtt/source/cJSON.c **** 		}
 304:./mqtt/source/cJSON.c **** 	}
 305:./mqtt/source/cJSON.c **** 	*ptr2++='\"';*ptr2++=0;
 306:./mqtt/source/cJSON.c **** 	return out;
 307:./mqtt/source/cJSON.c **** }
 308:./mqtt/source/cJSON.c **** /* Invote print_string_ptr (which is useful) on an item. */
 309:./mqtt/source/cJSON.c **** static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p)
 310:./mqtt/source/cJSON.c **** 
 311:./mqtt/source/cJSON.c **** /* Predeclare these prototypes. */
 312:./mqtt/source/cJSON.c **** static const char *parse_value(cJSON *item,const char *value);
 313:./mqtt/source/cJSON.c **** static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);
 314:./mqtt/source/cJSON.c **** static const char *parse_array(cJSON *item,const char *value);
 315:./mqtt/source/cJSON.c **** static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
 316:./mqtt/source/cJSON.c **** static const char *parse_object(cJSON *item,const char *value);
 317:./mqtt/source/cJSON.c **** static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);
 318:./mqtt/source/cJSON.c **** 
 319:./mqtt/source/cJSON.c **** /* Utility to jump whitespace and cr/lf */
 320:./mqtt/source/cJSON.c **** static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return i
 622              		.loc 1 320 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627              	.LVL99:
 628              		.loc 1 320 0
 629 0000 00E0     		b	.L58
 630              	.L60:
 631              		.loc 1 320 0 is_stmt 0 discriminator 6
 632 0002 0130     		adds	r0, r0, #1
 633              	.LVL100:
 634              	.L58:
 635              		.loc 1 320 0 discriminator 1
 636 0004 18B1     		cbz	r0, .L59
 637              		.loc 1 320 0 discriminator 2
 638 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 639 0008 0BB1     		cbz	r3, .L59
 640              		.loc 1 320 0 discriminator 4
 641 000a 202B     		cmp	r3, #32
 642 000c F9D9     		bls	.L60
 643              	.L59:
 644              		.loc 1 320 0 discriminator 7
 645 000e 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE16:
 649              		.section	.text.suffix_object,"ax",%progbits
 650              		.align	2
 651              		.thumb
 652              		.thumb_func
 654              	suffix_object:
 655              	.LFB31:
 321:./mqtt/source/cJSON.c **** 
 322:./mqtt/source/cJSON.c **** /* Parse an object - create a new root, and populate. */
 323:./mqtt/source/cJSON.c **** cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_termina
 324:./mqtt/source/cJSON.c **** {
 325:./mqtt/source/cJSON.c **** 	const char *end=0;
 326:./mqtt/source/cJSON.c **** 	cJSON *c=cJSON_New_Item();
 327:./mqtt/source/cJSON.c **** 	ep=0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 19


 328:./mqtt/source/cJSON.c **** 	if (!c) return 0;       /* memory fail */
 329:./mqtt/source/cJSON.c **** 
 330:./mqtt/source/cJSON.c **** 	end=parse_value(c,skip(value));
 331:./mqtt/source/cJSON.c **** 	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 332:./mqtt/source/cJSON.c **** 
 333:./mqtt/source/cJSON.c **** 	/* if we require null-terminated JSON without appended garbage, skip and then check for a null ter
 334:./mqtt/source/cJSON.c **** 	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 335:./mqtt/source/cJSON.c **** 	if (return_parse_end) *return_parse_end=end;
 336:./mqtt/source/cJSON.c **** 	return c;
 337:./mqtt/source/cJSON.c **** }
 338:./mqtt/source/cJSON.c **** /* Default options for cJSON_Parse */
 339:./mqtt/source/cJSON.c **** cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 340:./mqtt/source/cJSON.c **** 
 341:./mqtt/source/cJSON.c **** /* Render a cJSON item/entity/structure to text. */
 342:./mqtt/source/cJSON.c **** char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
 343:./mqtt/source/cJSON.c **** char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}
 344:./mqtt/source/cJSON.c **** 
 345:./mqtt/source/cJSON.c **** char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)
 346:./mqtt/source/cJSON.c **** {
 347:./mqtt/source/cJSON.c **** 	printbuffer p;
 348:./mqtt/source/cJSON.c **** 	p.buffer=(char*)cJSON_malloc(prebuffer);
 349:./mqtt/source/cJSON.c **** 	p.length=prebuffer;
 350:./mqtt/source/cJSON.c **** 	p.offset=0;
 351:./mqtt/source/cJSON.c **** 	return print_value(item,0,fmt,&p);
 352:./mqtt/source/cJSON.c **** 	return p.buffer;
 353:./mqtt/source/cJSON.c **** }
 354:./mqtt/source/cJSON.c **** 
 355:./mqtt/source/cJSON.c **** 
 356:./mqtt/source/cJSON.c **** /* Parser core - when encountering text, process appropriately. */
 357:./mqtt/source/cJSON.c **** static const char *parse_value(cJSON *item,const char *value)
 358:./mqtt/source/cJSON.c **** {
 359:./mqtt/source/cJSON.c **** 	if (!value)						return 0;	/* Fail on null. */
 360:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 361:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 362:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 363:./mqtt/source/cJSON.c **** 	if (*value=='\"')				{ return parse_string(item,value); }
 364:./mqtt/source/cJSON.c **** 	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 365:./mqtt/source/cJSON.c **** 	if (*value=='[')				{ return parse_array(item,value); }
 366:./mqtt/source/cJSON.c **** 	if (*value=='{')				{ return parse_object(item,value); }
 367:./mqtt/source/cJSON.c **** 
 368:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* failure. */
 369:./mqtt/source/cJSON.c **** }
 370:./mqtt/source/cJSON.c **** 
 371:./mqtt/source/cJSON.c **** /* Render a value to text. */
 372:./mqtt/source/cJSON.c **** static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
 373:./mqtt/source/cJSON.c **** {
 374:./mqtt/source/cJSON.c **** 	char *out=0;
 375:./mqtt/source/cJSON.c **** 	if (!item) return 0;
 376:./mqtt/source/cJSON.c **** 	if (p)
 377:./mqtt/source/cJSON.c **** 	{
 378:./mqtt/source/cJSON.c **** 		switch ((item->type)&255)
 379:./mqtt/source/cJSON.c **** 		{
 380:./mqtt/source/cJSON.c **** 			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
 381:./mqtt/source/cJSON.c **** 			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 382:./mqtt/source/cJSON.c **** 			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 383:./mqtt/source/cJSON.c **** 			case cJSON_Number:	out=print_number(item,p);break;
 384:./mqtt/source/cJSON.c **** 			case cJSON_String:	out=print_string(item,p);break;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 20


 385:./mqtt/source/cJSON.c **** 			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
 386:./mqtt/source/cJSON.c **** 			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
 387:./mqtt/source/cJSON.c **** 		}
 388:./mqtt/source/cJSON.c **** 	}
 389:./mqtt/source/cJSON.c **** 	else
 390:./mqtt/source/cJSON.c **** 	{
 391:./mqtt/source/cJSON.c **** 		switch ((item->type)&255)
 392:./mqtt/source/cJSON.c **** 		{
 393:./mqtt/source/cJSON.c **** 			case cJSON_NULL:	out=cJSON_strdup("null");	break;
 394:./mqtt/source/cJSON.c **** 			case cJSON_False:	out=cJSON_strdup("false");break;
 395:./mqtt/source/cJSON.c **** 			case cJSON_True:	out=cJSON_strdup("true"); break;
 396:./mqtt/source/cJSON.c **** 			case cJSON_Number:	out=print_number(item,0);break;
 397:./mqtt/source/cJSON.c **** 			case cJSON_String:	out=print_string(item,0);break;
 398:./mqtt/source/cJSON.c **** 			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
 399:./mqtt/source/cJSON.c **** 			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
 400:./mqtt/source/cJSON.c **** 		}
 401:./mqtt/source/cJSON.c **** 	}
 402:./mqtt/source/cJSON.c **** 	return out;
 403:./mqtt/source/cJSON.c **** }
 404:./mqtt/source/cJSON.c **** 
 405:./mqtt/source/cJSON.c **** /* Build an array from input text. */
 406:./mqtt/source/cJSON.c **** static const char *parse_array(cJSON *item,const char *value)
 407:./mqtt/source/cJSON.c **** {
 408:./mqtt/source/cJSON.c **** 	cJSON *child;
 409:./mqtt/source/cJSON.c **** 	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 410:./mqtt/source/cJSON.c **** 
 411:./mqtt/source/cJSON.c **** 	item->type=cJSON_Array;
 412:./mqtt/source/cJSON.c **** 	value=skip(value+1);
 413:./mqtt/source/cJSON.c **** 	if (*value==']') return value+1;	/* empty array. */
 414:./mqtt/source/cJSON.c **** 
 415:./mqtt/source/cJSON.c **** 	item->child=child=cJSON_New_Item();
 416:./mqtt/source/cJSON.c **** 	if (!item->child) return 0;		 /* memory fail */
 417:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 418:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 419:./mqtt/source/cJSON.c **** 
 420:./mqtt/source/cJSON.c **** 	while (*value==',')
 421:./mqtt/source/cJSON.c **** 	{
 422:./mqtt/source/cJSON.c **** 		cJSON *new_item;
 423:./mqtt/source/cJSON.c **** 		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 424:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 425:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));
 426:./mqtt/source/cJSON.c **** 		if (!value) return 0;	/* memory fail */
 427:./mqtt/source/cJSON.c **** 	}
 428:./mqtt/source/cJSON.c **** 
 429:./mqtt/source/cJSON.c **** 	if (*value==']') return value+1;	/* end of array */
 430:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 431:./mqtt/source/cJSON.c **** }
 432:./mqtt/source/cJSON.c **** 
 433:./mqtt/source/cJSON.c **** /* Render an array to text */
 434:./mqtt/source/cJSON.c **** static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
 435:./mqtt/source/cJSON.c **** {
 436:./mqtt/source/cJSON.c **** 	char **entries;
 437:./mqtt/source/cJSON.c **** 	char *out=0,*ptr,*ret;int len=5;
 438:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
 439:./mqtt/source/cJSON.c **** 	int numentries=0,i=0,fail=0;
 440:./mqtt/source/cJSON.c **** 	size_t tmplen=0;
 441:./mqtt/source/cJSON.c **** 	
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 21


 442:./mqtt/source/cJSON.c **** 	/* How many entries in the array? */
 443:./mqtt/source/cJSON.c **** 	while (child) numentries++,child=child->next;
 444:./mqtt/source/cJSON.c **** 	/* Explicitly handle numentries==0 */
 445:./mqtt/source/cJSON.c **** 	if (!numentries)
 446:./mqtt/source/cJSON.c **** 	{
 447:./mqtt/source/cJSON.c **** 		if (p)	out=ensure(p,3);
 448:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 449:./mqtt/source/cJSON.c **** 		if (out) strcpy(out,"[]");
 450:./mqtt/source/cJSON.c **** 		return out;
 451:./mqtt/source/cJSON.c **** 	}
 452:./mqtt/source/cJSON.c **** 
 453:./mqtt/source/cJSON.c **** 	if (p)
 454:./mqtt/source/cJSON.c **** 	{
 455:./mqtt/source/cJSON.c **** 		/* Compose the output array. */
 456:./mqtt/source/cJSON.c **** 		i=p->offset;
 457:./mqtt/source/cJSON.c **** 		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
 458:./mqtt/source/cJSON.c **** 		child=item->child;
 459:./mqtt/source/cJSON.c **** 		while (child && !fail)
 460:./mqtt/source/cJSON.c **** 		{
 461:./mqtt/source/cJSON.c **** 			print_value(child,depth+1,fmt,p);
 462:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 463:./mqtt/source/cJSON.c **** 			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' 
 464:./mqtt/source/cJSON.c **** 			child=child->next;
 465:./mqtt/source/cJSON.c **** 		}
 466:./mqtt/source/cJSON.c **** 		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
 467:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 468:./mqtt/source/cJSON.c **** 	}
 469:./mqtt/source/cJSON.c **** 	else
 470:./mqtt/source/cJSON.c **** 	{
 471:./mqtt/source/cJSON.c **** 		/* Allocate an array to hold the values for each */
 472:./mqtt/source/cJSON.c **** 		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 473:./mqtt/source/cJSON.c **** 		if (!entries) return 0;
 474:./mqtt/source/cJSON.c **** 		memset(entries,0,numentries*sizeof(char*));
 475:./mqtt/source/cJSON.c **** 		/* Retrieve all the results: */
 476:./mqtt/source/cJSON.c **** 		child=item->child;
 477:./mqtt/source/cJSON.c **** 		while (child && !fail)
 478:./mqtt/source/cJSON.c **** 		{
 479:./mqtt/source/cJSON.c **** 			ret=print_value(child,depth+1,fmt,0);
 480:./mqtt/source/cJSON.c **** 			entries[i++]=ret;
 481:./mqtt/source/cJSON.c **** 			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
 482:./mqtt/source/cJSON.c **** 			child=child->next;
 483:./mqtt/source/cJSON.c **** 		}
 484:./mqtt/source/cJSON.c **** 		
 485:./mqtt/source/cJSON.c **** 		/* If we didn't fail, try to malloc the output string */
 486:./mqtt/source/cJSON.c **** 		if (!fail)	out=(char*)cJSON_malloc(len);
 487:./mqtt/source/cJSON.c **** 		/* If that fails, we fail. */
 488:./mqtt/source/cJSON.c **** 		if (!out) fail=1;
 489:./mqtt/source/cJSON.c **** 
 490:./mqtt/source/cJSON.c **** 		/* Handle failure. */
 491:./mqtt/source/cJSON.c **** 		if (fail)
 492:./mqtt/source/cJSON.c **** 		{
 493:./mqtt/source/cJSON.c **** 			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
 494:./mqtt/source/cJSON.c **** 			cJSON_free(entries);
 495:./mqtt/source/cJSON.c **** 			return 0;
 496:./mqtt/source/cJSON.c **** 		}
 497:./mqtt/source/cJSON.c **** 		
 498:./mqtt/source/cJSON.c **** 		/* Compose the output array. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 22


 499:./mqtt/source/cJSON.c **** 		*out='[';
 500:./mqtt/source/cJSON.c **** 		ptr=out+1;*ptr=0;
 501:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 502:./mqtt/source/cJSON.c **** 		{
 503:./mqtt/source/cJSON.c **** 			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
 504:./mqtt/source/cJSON.c **** 			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
 505:./mqtt/source/cJSON.c **** 			cJSON_free(entries[i]);
 506:./mqtt/source/cJSON.c **** 		}
 507:./mqtt/source/cJSON.c **** 		cJSON_free(entries);
 508:./mqtt/source/cJSON.c **** 		*ptr++=']';*ptr++=0;
 509:./mqtt/source/cJSON.c **** 	}
 510:./mqtt/source/cJSON.c **** 	return out;	
 511:./mqtt/source/cJSON.c **** }
 512:./mqtt/source/cJSON.c **** 
 513:./mqtt/source/cJSON.c **** /* Build an object from the text. */
 514:./mqtt/source/cJSON.c **** static const char *parse_object(cJSON *item,const char *value)
 515:./mqtt/source/cJSON.c **** {
 516:./mqtt/source/cJSON.c **** 	cJSON *child;
 517:./mqtt/source/cJSON.c **** 	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 518:./mqtt/source/cJSON.c **** 	
 519:./mqtt/source/cJSON.c **** 	item->type=cJSON_Object;
 520:./mqtt/source/cJSON.c **** 	value=skip(value+1);
 521:./mqtt/source/cJSON.c **** 	if (*value=='}') return value+1;	/* empty array. */
 522:./mqtt/source/cJSON.c **** 	
 523:./mqtt/source/cJSON.c **** 	item->child=child=cJSON_New_Item();
 524:./mqtt/source/cJSON.c **** 	if (!item->child) return 0;
 525:./mqtt/source/cJSON.c **** 	value=skip(parse_string(child,skip(value)));
 526:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 527:./mqtt/source/cJSON.c **** 	child->string=child->valuestring;child->valuestring=0;
 528:./mqtt/source/cJSON.c **** 	if (*value!=':') {ep=value;return 0;}	/* fail! */
 529:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 530:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 531:./mqtt/source/cJSON.c **** 	
 532:./mqtt/source/cJSON.c **** 	while (*value==',')
 533:./mqtt/source/cJSON.c **** 	{
 534:./mqtt/source/cJSON.c **** 		cJSON *new_item;
 535:./mqtt/source/cJSON.c **** 		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 536:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 537:./mqtt/source/cJSON.c **** 		value=skip(parse_string(child,skip(value+1)));
 538:./mqtt/source/cJSON.c **** 		if (!value) return 0;
 539:./mqtt/source/cJSON.c **** 		child->string=child->valuestring;child->valuestring=0;
 540:./mqtt/source/cJSON.c **** 		if (*value!=':') {ep=value;return 0;}	/* fail! */
 541:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 542:./mqtt/source/cJSON.c **** 		if (!value) return 0;
 543:./mqtt/source/cJSON.c **** 	}
 544:./mqtt/source/cJSON.c **** 	
 545:./mqtt/source/cJSON.c **** 	if (*value=='}') return value+1;	/* end of array */
 546:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 547:./mqtt/source/cJSON.c **** }
 548:./mqtt/source/cJSON.c **** 
 549:./mqtt/source/cJSON.c **** /* Render an object to text. */
 550:./mqtt/source/cJSON.c **** static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
 551:./mqtt/source/cJSON.c **** {
 552:./mqtt/source/cJSON.c **** 	char **entries=0,**names=0;
 553:./mqtt/source/cJSON.c **** 	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
 554:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
 555:./mqtt/source/cJSON.c **** 	int numentries=0,fail=0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 23


 556:./mqtt/source/cJSON.c **** 	size_t tmplen=0;
 557:./mqtt/source/cJSON.c **** 	/* Count the number of entries. */
 558:./mqtt/source/cJSON.c **** 	while (child) numentries++,child=child->next;
 559:./mqtt/source/cJSON.c **** 	/* Explicitly handle empty object case */
 560:./mqtt/source/cJSON.c **** 	if (!numentries)
 561:./mqtt/source/cJSON.c **** 	{
 562:./mqtt/source/cJSON.c **** 		if (p) out=ensure(p,fmt?depth+4:3);
 563:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 564:./mqtt/source/cJSON.c **** 		if (!out)	return 0;
 565:./mqtt/source/cJSON.c **** 		ptr=out;*ptr++='{';
 566:./mqtt/source/cJSON.c **** 		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
 567:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 568:./mqtt/source/cJSON.c **** 		return out;
 569:./mqtt/source/cJSON.c **** 	}
 570:./mqtt/source/cJSON.c **** 	if (p)
 571:./mqtt/source/cJSON.c **** 	{
 572:./mqtt/source/cJSON.c **** 		/* Compose the output: */
 573:./mqtt/source/cJSON.c **** 		i=p->offset;
 574:./mqtt/source/cJSON.c **** 		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
 575:./mqtt/source/cJSON.c **** 		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 576:./mqtt/source/cJSON.c **** 		child=item->child;depth++;
 577:./mqtt/source/cJSON.c **** 		while (child)
 578:./mqtt/source/cJSON.c **** 		{
 579:./mqtt/source/cJSON.c **** 			if (fmt)
 580:./mqtt/source/cJSON.c **** 			{
 581:./mqtt/source/cJSON.c **** 				ptr=ensure(p,depth);	if (!ptr) return 0;
 582:./mqtt/source/cJSON.c **** 				for (j=0;j<depth;j++) *ptr++='\t';
 583:./mqtt/source/cJSON.c **** 				p->offset+=depth;
 584:./mqtt/source/cJSON.c **** 			}
 585:./mqtt/source/cJSON.c **** 			print_string_ptr(child->string,p);
 586:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 587:./mqtt/source/cJSON.c **** 			
 588:./mqtt/source/cJSON.c **** 			len=fmt?2:1;
 589:./mqtt/source/cJSON.c **** 			ptr=ensure(p,len);	if (!ptr) return 0;
 590:./mqtt/source/cJSON.c **** 			*ptr++=':';if (fmt) *ptr++='\t';
 591:./mqtt/source/cJSON.c **** 			p->offset+=len;
 592:./mqtt/source/cJSON.c **** 			
 593:./mqtt/source/cJSON.c **** 			print_value(child,depth,fmt,p);
 594:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 595:./mqtt/source/cJSON.c **** 
 596:./mqtt/source/cJSON.c **** 			len=(fmt?1:0)+(child->next?1:0);
 597:./mqtt/source/cJSON.c **** 			ptr=ensure(p,len+1); if (!ptr) return 0;
 598:./mqtt/source/cJSON.c **** 			if (child->next) *ptr++=',';
 599:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 600:./mqtt/source/cJSON.c **** 			p->offset+=len;
 601:./mqtt/source/cJSON.c **** 			child=child->next;
 602:./mqtt/source/cJSON.c **** 		}
 603:./mqtt/source/cJSON.c **** 		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
 604:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 605:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr=0;
 606:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 607:./mqtt/source/cJSON.c **** 	}
 608:./mqtt/source/cJSON.c **** 	else
 609:./mqtt/source/cJSON.c **** 	{
 610:./mqtt/source/cJSON.c **** 		/* Allocate space for the names and the objects */
 611:./mqtt/source/cJSON.c **** 		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 612:./mqtt/source/cJSON.c **** 		if (!entries) return 0;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 24


 613:./mqtt/source/cJSON.c **** 		names=(char**)cJSON_malloc(numentries*sizeof(char*));
 614:./mqtt/source/cJSON.c **** 		if (!names) {cJSON_free(entries);return 0;}
 615:./mqtt/source/cJSON.c **** 		memset(entries,0,sizeof(char*)*numentries);
 616:./mqtt/source/cJSON.c **** 		memset(names,0,sizeof(char*)*numentries);
 617:./mqtt/source/cJSON.c **** 
 618:./mqtt/source/cJSON.c **** 		/* Collect all the results into our arrays: */
 619:./mqtt/source/cJSON.c **** 		child=item->child;depth++;if (fmt) len+=depth;
 620:./mqtt/source/cJSON.c **** 		while (child)
 621:./mqtt/source/cJSON.c **** 		{
 622:./mqtt/source/cJSON.c **** 			names[i]=str=print_string_ptr(child->string,0);
 623:./mqtt/source/cJSON.c **** 			entries[i++]=ret=print_value(child,depth,fmt,0);
 624:./mqtt/source/cJSON.c **** 			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
 625:./mqtt/source/cJSON.c **** 			child=child->next;
 626:./mqtt/source/cJSON.c **** 		}
 627:./mqtt/source/cJSON.c **** 		
 628:./mqtt/source/cJSON.c **** 		/* Try to allocate the output string */
 629:./mqtt/source/cJSON.c **** 		if (!fail)	out=(char*)cJSON_malloc(len);
 630:./mqtt/source/cJSON.c **** 		if (!out) fail=1;
 631:./mqtt/source/cJSON.c **** 
 632:./mqtt/source/cJSON.c **** 		/* Handle failure */
 633:./mqtt/source/cJSON.c **** 		if (fail)
 634:./mqtt/source/cJSON.c **** 		{
 635:./mqtt/source/cJSON.c **** 			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entrie
 636:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 637:./mqtt/source/cJSON.c **** 			return 0;
 638:./mqtt/source/cJSON.c **** 		}
 639:./mqtt/source/cJSON.c **** 		
 640:./mqtt/source/cJSON.c **** 		/* Compose the output: */
 641:./mqtt/source/cJSON.c **** 		*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
 642:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 643:./mqtt/source/cJSON.c **** 		{
 644:./mqtt/source/cJSON.c **** 			if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
 645:./mqtt/source/cJSON.c **** 			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 646:./mqtt/source/cJSON.c **** 			*ptr++=':';if (fmt) *ptr++='\t';
 647:./mqtt/source/cJSON.c **** 			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
 648:./mqtt/source/cJSON.c **** 			if (i!=numentries-1) *ptr++=',';
 649:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 650:./mqtt/source/cJSON.c **** 			cJSON_free(names[i]);cJSON_free(entries[i]);
 651:./mqtt/source/cJSON.c **** 		}
 652:./mqtt/source/cJSON.c **** 		
 653:./mqtt/source/cJSON.c **** 		cJSON_free(names);cJSON_free(entries);
 654:./mqtt/source/cJSON.c **** 		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
 655:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 656:./mqtt/source/cJSON.c **** 	}
 657:./mqtt/source/cJSON.c **** 	return out;	
 658:./mqtt/source/cJSON.c **** }
 659:./mqtt/source/cJSON.c **** 
 660:./mqtt/source/cJSON.c **** /* Get Array size/item / object item. */
 661:./mqtt/source/cJSON.c **** int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 663:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 664:./mqtt/source/cJSON.c **** 
 665:./mqtt/source/cJSON.c **** /* Utility for array list handling. */
 666:./mqtt/source/cJSON.c **** static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
 656              		.loc 1 666 0 is_stmt 1
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 25


 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661              	.LVL101:
 662              		.loc 1 666 0
 663 0000 0160     		str	r1, [r0]
 664 0002 4860     		str	r0, [r1, #4]
 665 0004 7047     		bx	lr
 666              		.cfi_endproc
 667              	.LFE31:
 669 0006 00BF     		.section	.text.cJSON_New_Item,"ax",%progbits
 670              		.align	2
 671              		.thumb
 672              		.thumb_func
 674              	cJSON_New_Item:
 675              	.LFB5:
  74:./mqtt/source/cJSON.c **** 	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 676              		.loc 1 74 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680 0000 10B5     		push	{r4, lr}
 681              	.LCFI3:
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 4, -8
 684              		.cfi_offset 14, -4
  75:./mqtt/source/cJSON.c **** 	if (node) memset(node,0,sizeof(cJSON));
 685              		.loc 1 75 0
 686 0002 064B     		ldr	r3, .L65
 687 0004 1B68     		ldr	r3, [r3]
 688 0006 2820     		movs	r0, #40
 689 0008 9847     		blx	r3
 690              	.LVL102:
  76:./mqtt/source/cJSON.c **** 	return node;
 691              		.loc 1 76 0
 692 000a 0446     		mov	r4, r0
 693 000c 18B1     		cbz	r0, .L63
  76:./mqtt/source/cJSON.c **** 	return node;
 694              		.loc 1 76 0 is_stmt 0 discriminator 1
 695 000e 2822     		movs	r2, #40
 696 0010 0021     		movs	r1, #0
 697 0012 FFF7FEFF 		bl	memset
 698              	.LVL103:
 699              	.L63:
  78:./mqtt/source/cJSON.c **** 
 700              		.loc 1 78 0 is_stmt 1
 701 0016 2046     		mov	r0, r4
 702 0018 10BD     		pop	{r4, pc}
 703              	.LVL104:
 704              	.L66:
 705 001a 00BF     		.align	2
 706              	.L65:
 707 001c 00000000 		.word	.LANCHOR1
 708              		.cfi_endproc
 709              	.LFE5:
 711              		.global	__aeabi_dmul
 712              		.global	__aeabi_i2d
 713              		.global	__aeabi_dadd
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 26


 714              		.global	__aeabi_dsub
 715              		.global	__aeabi_d2iz
 716              		.section	.text.parse_number,"ax",%progbits
 717              		.align	2
 718              		.thumb
 719              		.thumb_func
 721              	parse_number:
 722              	.LFB7:
  97:./mqtt/source/cJSON.c **** 	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 723              		.loc 1 97 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              	.LVL105:
 728 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 729              	.LCFI4:
 730              		.cfi_def_cfa_offset 40
 731              		.cfi_offset 3, -40
 732              		.cfi_offset 4, -36
 733              		.cfi_offset 5, -32
 734              		.cfi_offset 6, -28
 735              		.cfi_offset 7, -24
 736              		.cfi_offset 8, -20
 737              		.cfi_offset 9, -16
 738              		.cfi_offset 10, -12
 739              		.cfi_offset 11, -8
 740              		.cfi_offset 14, -4
 741 0004 2DED028B 		vpush.64	{d8}
 742              	.LCFI5:
 743              		.cfi_def_cfa_offset 48
 744              		.cfi_offset 80, -48
 745              		.cfi_offset 81, -44
 746 0008 8046     		mov	r8, r0
 747 000a 0C46     		mov	r4, r1
 748              	.LVL106:
 100:./mqtt/source/cJSON.c **** 	if (*num=='0') num++;			/* is zero */
 749              		.loc 1 100 0
 750 000c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 751 000e 2D2B     		cmp	r3, #45
 752 0010 03D1     		bne	.L80
 753              	.LVL107:
 100:./mqtt/source/cJSON.c **** 	if (*num=='0') num++;			/* is zero */
 754              		.loc 1 100 0 is_stmt 0 discriminator 1
 755 0012 0134     		adds	r4, r4, #1
 756              	.LVL108:
 757 0014 9FED608B 		vldr.64	d8, .L88
 758 0018 01E0     		b	.L68
 759              	.LVL109:
 760              	.L80:
  98:./mqtt/source/cJSON.c **** 
 761              		.loc 1 98 0 is_stmt 1
 762 001a 9FED618B 		vldr.64	d8, .L88+8
 763              	.LVL110:
 764              	.L68:
 101:./mqtt/source/cJSON.c **** 	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number
 765              		.loc 1 101 0
 766 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 27


 767 0020 302B     		cmp	r3, #48
 768 0022 00D1     		bne	.L69
 101:./mqtt/source/cJSON.c **** 	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number
 769              		.loc 1 101 0 is_stmt 0 discriminator 1
 770 0024 0134     		adds	r4, r4, #1
 771              	.LVL111:
 772              	.L69:
 102:./mqtt/source/cJSON.c **** 	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (
 773              		.loc 1 102 0 is_stmt 1
 774 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 775 0028 313B     		subs	r3, r3, #49
 776 002a DBB2     		uxtb	r3, r3
 777 002c 082B     		cmp	r3, #8
 778 002e 1DD8     		bhi	.L81
 779 0030 0026     		movs	r6, #0
 780 0032 0027     		movs	r7, #0
 781              	.LVL112:
 782              	.L71:
 102:./mqtt/source/cJSON.c **** 	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (
 783              		.loc 1 102 0 is_stmt 0 discriminator 2
 784 0034 0022     		movs	r2, #0
 785 0036 5E4B     		ldr	r3, .L88+24
 786 0038 3046     		mov	r0, r6
 787 003a 3946     		mov	r1, r7
 788 003c FFF7FEFF 		bl	__aeabi_dmul
 789              	.LVL113:
 790 0040 0646     		mov	r6, r0
 791              	.LVL114:
 792 0042 0F46     		mov	r7, r1
 793 0044 651C     		adds	r5, r4, #1
 794              	.LVL115:
 795 0046 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 796 0048 3038     		subs	r0, r0, #48
 797 004a FFF7FEFF 		bl	__aeabi_i2d
 798              	.LVL116:
 799 004e 0246     		mov	r2, r0
 800 0050 0B46     		mov	r3, r1
 801 0052 3046     		mov	r0, r6
 802 0054 3946     		mov	r1, r7
 803 0056 FFF7FEFF 		bl	__aeabi_dadd
 804              	.LVL117:
 805 005a 0646     		mov	r6, r0
 806 005c 0F46     		mov	r7, r1
 807              	.LVL118:
 808 005e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 809 0060 303B     		subs	r3, r3, #48
 810 0062 DBB2     		uxtb	r3, r3
 811 0064 2C46     		mov	r4, r5
 812 0066 092B     		cmp	r3, #9
 813 0068 E4D9     		bls	.L71
 814 006a 01E0     		b	.L70
 815              	.LVL119:
 816              	.L81:
  98:./mqtt/source/cJSON.c **** 
 817              		.loc 1 98 0 is_stmt 1
 818 006c 0026     		movs	r6, #0
 819 006e 0027     		movs	r7, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 28


 820              	.LVL120:
 821              	.L70:
 103:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 822              		.loc 1 103 0
 823 0070 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 824 0072 2E2B     		cmp	r3, #46
 825 0074 2DD1     		bne	.L82
 103:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 826              		.loc 1 103 0 is_stmt 0 discriminator 1
 827 0076 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 828 0078 2F2B     		cmp	r3, #47
 829 007a 2FD9     		bls	.L83
 103:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 830              		.loc 1 103 0 discriminator 2
 831 007c 392B     		cmp	r3, #57
 832 007e 32D8     		bhi	.L84
 103:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 833              		.loc 1 103 0 discriminator 3
 834 0080 651C     		adds	r5, r4, #1
 835              	.LVL121:
  98:./mqtt/source/cJSON.c **** 
 836              		.loc 1 98 0 is_stmt 1 discriminator 3
 837 0082 4FF0000A 		mov	r10, #0
 838 0086 4FF0000B 		mov	fp, #0
 839              	.LVL122:
 840              	.L73:
 103:./mqtt/source/cJSON.c **** 	if (*num=='e' || *num=='E')		/* Exponent? */
 841              		.loc 1 103 0 discriminator 5
 842 008a 0022     		movs	r2, #0
 843 008c 484B     		ldr	r3, .L88+24
 844 008e 3046     		mov	r0, r6
 845 0090 3946     		mov	r1, r7
 846 0092 FFF7FEFF 		bl	__aeabi_dmul
 847              	.LVL123:
 848 0096 0646     		mov	r6, r0
 849              	.LVL124:
 850 0098 0F46     		mov	r7, r1
 851 009a 6C1C     		adds	r4, r5, #1
 852              	.LVL125:
 853 009c 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 854 009e 3038     		subs	r0, r0, #48
 855 00a0 FFF7FEFF 		bl	__aeabi_i2d
 856              	.LVL126:
 857 00a4 0246     		mov	r2, r0
 858 00a6 0B46     		mov	r3, r1
 859 00a8 3046     		mov	r0, r6
 860 00aa 3946     		mov	r1, r7
 861 00ac FFF7FEFF 		bl	__aeabi_dadd
 862              	.LVL127:
 863 00b0 0646     		mov	r6, r0
 864 00b2 0F46     		mov	r7, r1
 865              	.LVL128:
 866 00b4 0022     		movs	r2, #0
 867 00b6 3F4B     		ldr	r3, .L88+28
 868 00b8 5046     		mov	r0, r10
 869 00ba 5946     		mov	r1, fp
 870 00bc FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 29


 871              	.LVL129:
 872 00c0 8246     		mov	r10, r0
 873              	.LVL130:
 874 00c2 8B46     		mov	fp, r1
 875              	.LVL131:
 876 00c4 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 877 00c6 303B     		subs	r3, r3, #48
 878 00c8 DBB2     		uxtb	r3, r3
 879 00ca 2546     		mov	r5, r4
 880 00cc 092B     		cmp	r3, #9
 881 00ce DCD9     		bls	.L73
 882 00d0 0DE0     		b	.L72
 883              	.LVL132:
 884              	.L82:
  98:./mqtt/source/cJSON.c **** 
 885              		.loc 1 98 0
 886 00d2 4FF0000A 		mov	r10, #0
 887 00d6 4FF0000B 		mov	fp, #0
 888 00da 08E0     		b	.L72
 889              	.L83:
 890 00dc 4FF0000A 		mov	r10, #0
 891 00e0 4FF0000B 		mov	fp, #0
 892 00e4 03E0     		b	.L72
 893              	.L84:
 894 00e6 4FF0000A 		mov	r10, #0
 895 00ea 4FF0000B 		mov	fp, #0
 896              	.LVL133:
 897              	.L72:
 104:./mqtt/source/cJSON.c **** 	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 898              		.loc 1 104 0
 899 00ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 900 00f0 652B     		cmp	r3, #101
 901 00f2 01D0     		beq	.L74
 104:./mqtt/source/cJSON.c **** 	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 902              		.loc 1 104 0 is_stmt 0 discriminator 1
 903 00f4 452B     		cmp	r3, #69
 904 00f6 20D1     		bne	.L85
 905              	.L74:
 105:./mqtt/source/cJSON.c **** 		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 906              		.loc 1 105 0 is_stmt 1
 907 00f8 621C     		adds	r2, r4, #1
 908              	.LVL134:
 909 00fa 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 910 00fc 2B2B     		cmp	r3, #43
 911 00fe 03D1     		bne	.L76
 105:./mqtt/source/cJSON.c **** 		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 912              		.loc 1 105 0 is_stmt 0 discriminator 1
 913 0100 A21C     		adds	r2, r4, #2
 914              	.LVL135:
  98:./mqtt/source/cJSON.c **** 
 915              		.loc 1 98 0 is_stmt 1 discriminator 1
 916 0102 4FF00109 		mov	r9, #1
 917 0106 07E0     		b	.L77
 918              	.L76:
 105:./mqtt/source/cJSON.c **** 		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 919              		.loc 1 105 0 discriminator 2
 920 0108 2D2B     		cmp	r3, #45
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 30


 921 010a 03D1     		bne	.L86
 922              	.LVL136:
 105:./mqtt/source/cJSON.c **** 		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 923              		.loc 1 105 0 is_stmt 0 discriminator 3
 924 010c A21C     		adds	r2, r4, #2
 925              	.LVL137:
 926 010e 4FF0FF39 		mov	r9, #-1
 927 0112 01E0     		b	.L77
 928              	.LVL138:
 929              	.L86:
  98:./mqtt/source/cJSON.c **** 
 930              		.loc 1 98 0 is_stmt 1
 931 0114 4FF00109 		mov	r9, #1
 932              	.LVL139:
 933              	.L77:
  98:./mqtt/source/cJSON.c **** 
 934              		.loc 1 98 0 is_stmt 0 discriminator 1
 935 0118 1446     		mov	r4, r2
 936 011a 0025     		movs	r5, #0
 937 011c 06E0     		b	.L78
 938              	.LVL140:
 939              	.L79:
 106:./mqtt/source/cJSON.c **** 	}
 940              		.loc 1 106 0 is_stmt 1 discriminator 2
 941 011e 05EB8505 		add	r5, r5, r5, lsl #2
 942              	.LVL141:
 943 0122 6A00     		lsls	r2, r5, #1
 944 0124 0134     		adds	r4, r4, #1
 945              	.LVL142:
 946 0126 A3F13005 		sub	r5, r3, #48
 947 012a 1544     		add	r5, r5, r2
 948              	.LVL143:
 949              	.L78:
 106:./mqtt/source/cJSON.c **** 	}
 950              		.loc 1 106 0 is_stmt 0 discriminator 1
 951 012c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 952 012e A3F13002 		sub	r2, r3, #48
 953 0132 D2B2     		uxtb	r2, r2
 954 0134 092A     		cmp	r2, #9
 955 0136 F2D9     		bls	.L79
 956 0138 02E0     		b	.L75
 957              	.LVL144:
 958              	.L85:
  98:./mqtt/source/cJSON.c **** 
 959              		.loc 1 98 0 is_stmt 1
 960 013a 4FF00109 		mov	r9, #1
 961 013e 0025     		movs	r5, #0
 962              	.LVL145:
 963              	.L75:
 109:./mqtt/source/cJSON.c **** 	
 964              		.loc 1 109 0
 965 0140 53EC182B 		vmov	r2, r3, d8
 966 0144 3046     		mov	r0, r6
 967 0146 3946     		mov	r1, r7
 968 0148 FFF7FEFF 		bl	__aeabi_dmul
 969              	.LVL146:
 970 014c 0646     		mov	r6, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 31


 971              	.LVL147:
 972 014e 0F46     		mov	r7, r1
 973 0150 09FB05F0 		mul	r0, r9, r5
 974 0154 FFF7FEFF 		bl	__aeabi_i2d
 975              	.LVL148:
 976 0158 5246     		mov	r2, r10
 977 015a 5B46     		mov	r3, fp
 978 015c FFF7FEFF 		bl	__aeabi_dadd
 979              	.LVL149:
 980 0160 41EC110B 		vmov	d1, r0, r1
 981 0164 9FED100B 		vldr.64	d0, .L88+16
 982 0168 FFF7FEFF 		bl	pow
 983              	.LVL150:
 984 016c 53EC102B 		vmov	r2, r3, d0
 985 0170 3046     		mov	r0, r6
 986 0172 3946     		mov	r1, r7
 987 0174 FFF7FEFF 		bl	__aeabi_dmul
 988              	.LVL151:
 111:./mqtt/source/cJSON.c **** 	item->valueint=(int)n;
 989              		.loc 1 111 0
 990 0178 C8E90601 		strd	r0, [r8, #24]
 112:./mqtt/source/cJSON.c **** 	item->type=cJSON_Number;
 991              		.loc 1 112 0
 992 017c FFF7FEFF 		bl	__aeabi_d2iz
 993              	.LVL152:
 994 0180 C8F81400 		str	r0, [r8, #20]
 113:./mqtt/source/cJSON.c **** 	return num;
 995              		.loc 1 113 0
 996 0184 0323     		movs	r3, #3
 997 0186 C8F80C30 		str	r3, [r8, #12]
 115:./mqtt/source/cJSON.c **** 
 998              		.loc 1 115 0
 999 018a 2046     		mov	r0, r4
 1000 018c BDEC028B 		vldm	sp!, {d8}
 1001              	.LCFI6:
 1002              		.cfi_restore 80
 1003              		.cfi_restore 81
 1004              		.cfi_def_cfa_offset 40
 1005              	.LVL153:
 1006 0190 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1007              	.LVL154:
 1008              	.L89:
 1009 0194 AFF30080 		.align	3
 1010              	.L88:
 1011 0198 00000000 		.word	0
 1012 019c 0000F0BF 		.word	-1074790400
 1013 01a0 00000000 		.word	0
 1014 01a4 0000F03F 		.word	1072693248
 1015 01a8 00000000 		.word	0
 1016 01ac 00002440 		.word	1076101120
 1017 01b0 00002440 		.word	1076101120
 1018 01b4 0000F03F 		.word	1072693248
 1019              		.cfi_endproc
 1020              	.LFE7:
 1022              		.section	.text.parse_value,"ax",%progbits
 1023              		.align	2
 1024              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 32


 1025              		.thumb_func
 1027              	parse_value:
 1028              	.LFB22:
 358:./mqtt/source/cJSON.c **** 	if (!value)						return 0;	/* Fail on null. */
 1029              		.loc 1 358 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              	.LVL155:
 359:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 1034              		.loc 1 359 0
 1035 0000 0029     		cmp	r1, #0
 1036 0002 47D0     		beq	.L100
 358:./mqtt/source/cJSON.c **** 	if (!value)						return 0;	/* Fail on null. */
 1037              		.loc 1 358 0
 1038 0004 38B5     		push	{r3, r4, r5, lr}
 1039              	.LCFI7:
 1040              		.cfi_def_cfa_offset 16
 1041              		.cfi_offset 3, -16
 1042              		.cfi_offset 4, -12
 1043              		.cfi_offset 5, -8
 1044              		.cfi_offset 14, -4
 1045 0006 0C46     		mov	r4, r1
 1046 0008 0546     		mov	r5, r0
 360:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 1047              		.loc 1 360 0
 1048 000a 0422     		movs	r2, #4
 1049 000c 2249     		ldr	r1, .L103
 1050              	.LVL156:
 1051 000e 2046     		mov	r0, r4
 1052              	.LVL157:
 1053 0010 FFF7FEFF 		bl	strncmp
 1054              	.LVL158:
 1055 0014 18B9     		cbnz	r0, .L92
 360:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 1056              		.loc 1 360 0 is_stmt 0 discriminator 1
 1057 0016 0223     		movs	r3, #2
 1058 0018 EB60     		str	r3, [r5, #12]
 1059 001a 201D     		adds	r0, r4, #4
 1060 001c 38BD     		pop	{r3, r4, r5, pc}
 1061              	.LVL159:
 1062              	.L92:
 361:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 1063              		.loc 1 361 0 is_stmt 1
 1064 001e 0522     		movs	r2, #5
 1065 0020 1E49     		ldr	r1, .L103+4
 1066 0022 2046     		mov	r0, r4
 1067 0024 FFF7FEFF 		bl	strncmp
 1068              	.LVL160:
 1069 0028 18B9     		cbnz	r0, .L93
 361:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 1070              		.loc 1 361 0 is_stmt 0 discriminator 1
 1071 002a 0023     		movs	r3, #0
 1072 002c EB60     		str	r3, [r5, #12]
 1073 002e 601D     		adds	r0, r4, #5
 1074 0030 38BD     		pop	{r3, r4, r5, pc}
 1075              	.LVL161:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 33


 1076              	.L93:
 362:./mqtt/source/cJSON.c **** 	if (*value=='\"')				{ return parse_string(item,value); }
 1077              		.loc 1 362 0 is_stmt 1
 1078 0032 0422     		movs	r2, #4
 1079 0034 1A49     		ldr	r1, .L103+8
 1080 0036 2046     		mov	r0, r4
 1081 0038 FFF7FEFF 		bl	strncmp
 1082              	.LVL162:
 1083 003c 20B9     		cbnz	r0, .L94
 362:./mqtt/source/cJSON.c **** 	if (*value=='\"')				{ return parse_string(item,value); }
 1084              		.loc 1 362 0 is_stmt 0 discriminator 1
 1085 003e 0123     		movs	r3, #1
 1086 0040 EB60     		str	r3, [r5, #12]
 1087 0042 6B61     		str	r3, [r5, #20]
 1088 0044 201D     		adds	r0, r4, #4
 1089 0046 38BD     		pop	{r3, r4, r5, pc}
 1090              	.LVL163:
 1091              	.L94:
 363:./mqtt/source/cJSON.c **** 	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 1092              		.loc 1 363 0 is_stmt 1
 1093 0048 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1094 004a 222B     		cmp	r3, #34
 1095 004c 04D1     		bne	.L95
 363:./mqtt/source/cJSON.c **** 	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 1096              		.loc 1 363 0 is_stmt 0 discriminator 1
 1097 004e 2146     		mov	r1, r4
 1098 0050 2846     		mov	r0, r5
 1099 0052 FFF7FEFF 		bl	parse_string
 1100              	.LVL164:
 1101 0056 38BD     		pop	{r3, r4, r5, pc}
 1102              	.LVL165:
 1103              	.L95:
 364:./mqtt/source/cJSON.c **** 	if (*value=='[')				{ return parse_array(item,value); }
 1104              		.loc 1 364 0 is_stmt 1
 1105 0058 2D2B     		cmp	r3, #45
 1106 005a 04D0     		beq	.L96
 364:./mqtt/source/cJSON.c **** 	if (*value=='[')				{ return parse_array(item,value); }
 1107              		.loc 1 364 0 is_stmt 0 discriminator 2
 1108 005c A3F13002 		sub	r2, r3, #48
 1109 0060 D2B2     		uxtb	r2, r2
 1110 0062 092A     		cmp	r2, #9
 1111 0064 04D8     		bhi	.L97
 1112              	.L96:
 364:./mqtt/source/cJSON.c **** 	if (*value=='[')				{ return parse_array(item,value); }
 1113              		.loc 1 364 0 discriminator 3
 1114 0066 2146     		mov	r1, r4
 1115 0068 2846     		mov	r0, r5
 1116 006a FFF7FEFF 		bl	parse_number
 1117              	.LVL166:
 1118 006e 38BD     		pop	{r3, r4, r5, pc}
 1119              	.LVL167:
 1120              	.L97:
 365:./mqtt/source/cJSON.c **** 	if (*value=='{')				{ return parse_object(item,value); }
 1121              		.loc 1 365 0 is_stmt 1
 1122 0070 5B2B     		cmp	r3, #91
 1123 0072 04D1     		bne	.L98
 365:./mqtt/source/cJSON.c **** 	if (*value=='{')				{ return parse_object(item,value); }
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 34


 1124              		.loc 1 365 0 is_stmt 0 discriminator 1
 1125 0074 2146     		mov	r1, r4
 1126 0076 2846     		mov	r0, r5
 1127 0078 FFF7FEFF 		bl	parse_array
 1128              	.LVL168:
 1129 007c 38BD     		pop	{r3, r4, r5, pc}
 1130              	.LVL169:
 1131              	.L98:
 366:./mqtt/source/cJSON.c **** 
 1132              		.loc 1 366 0 is_stmt 1
 1133 007e 7B2B     		cmp	r3, #123
 1134 0080 04D1     		bne	.L99
 366:./mqtt/source/cJSON.c **** 
 1135              		.loc 1 366 0 is_stmt 0 discriminator 1
 1136 0082 2146     		mov	r1, r4
 1137 0084 2846     		mov	r0, r5
 1138 0086 FFF7FEFF 		bl	parse_object
 1139              	.LVL170:
 1140 008a 38BD     		pop	{r3, r4, r5, pc}
 1141              	.LVL171:
 1142              	.L99:
 368:./mqtt/source/cJSON.c **** }
 1143              		.loc 1 368 0 is_stmt 1
 1144 008c 054B     		ldr	r3, .L103+12
 1145 008e 1C60     		str	r4, [r3]
 1146 0090 0020     		movs	r0, #0
 1147 0092 38BD     		pop	{r3, r4, r5, pc}
 1148              	.LVL172:
 1149              	.L100:
 1150              	.LCFI8:
 1151              		.cfi_def_cfa_offset 0
 1152              		.cfi_restore 3
 1153              		.cfi_restore 4
 1154              		.cfi_restore 5
 1155              		.cfi_restore 14
 359:./mqtt/source/cJSON.c **** 	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 1156              		.loc 1 359 0
 1157 0094 0020     		movs	r0, #0
 1158              	.LVL173:
 1159 0096 7047     		bx	lr
 1160              	.L104:
 1161              		.align	2
 1162              	.L103:
 1163 0098 00000000 		.word	.LC0
 1164 009c 08000000 		.word	.LC1
 1165 00a0 10000000 		.word	.LC2
 1166 00a4 00000000 		.word	.LANCHOR0
 1167              		.cfi_endproc
 1168              	.LFE22:
 1170              		.section	.text.parse_array,"ax",%progbits
 1171              		.align	2
 1172              		.thumb
 1173              		.thumb_func
 1175              	parse_array:
 1176              	.LFB24:
 407:./mqtt/source/cJSON.c **** 	cJSON *child;
 1177              		.loc 1 407 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 35


 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 1181              	.LVL174:
 409:./mqtt/source/cJSON.c **** 
 1182              		.loc 1 409 0
 1183 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1184 0002 5B2B     		cmp	r3, #91
 1185 0004 03D0     		beq	.L106
 409:./mqtt/source/cJSON.c **** 
 1186              		.loc 1 409 0 is_stmt 0 discriminator 1
 1187 0006 234B     		ldr	r3, .L117
 1188 0008 1960     		str	r1, [r3]
 1189 000a 0020     		movs	r0, #0
 1190              	.LVL175:
 431:./mqtt/source/cJSON.c **** 
 1191              		.loc 1 431 0 is_stmt 1 discriminator 1
 1192 000c 7047     		bx	lr
 1193              	.LVL176:
 1194              	.L106:
 407:./mqtt/source/cJSON.c **** 	cJSON *child;
 1195              		.loc 1 407 0
 1196 000e 70B5     		push	{r4, r5, r6, lr}
 1197              	.LCFI9:
 1198              		.cfi_def_cfa_offset 16
 1199              		.cfi_offset 4, -16
 1200              		.cfi_offset 5, -12
 1201              		.cfi_offset 6, -8
 1202              		.cfi_offset 14, -4
 1203 0010 0446     		mov	r4, r0
 411:./mqtt/source/cJSON.c **** 	value=skip(value+1);
 1204              		.loc 1 411 0
 1205 0012 0523     		movs	r3, #5
 1206 0014 C360     		str	r3, [r0, #12]
 412:./mqtt/source/cJSON.c **** 	if (*value==']') return value+1;	/* empty array. */
 1207              		.loc 1 412 0
 1208 0016 481C     		adds	r0, r1, #1
 1209              	.LVL177:
 1210 0018 FFF7FEFF 		bl	skip
 1211              	.LVL178:
 1212 001c 0546     		mov	r5, r0
 1213              	.LVL179:
 413:./mqtt/source/cJSON.c **** 
 1214              		.loc 1 413 0
 1215 001e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1216 0020 5D2B     		cmp	r3, #93
 1217 0022 01D1     		bne	.L108
 413:./mqtt/source/cJSON.c **** 
 1218              		.loc 1 413 0 is_stmt 0 discriminator 1
 1219 0024 0130     		adds	r0, r0, #1
 1220              	.LVL180:
 1221 0026 70BD     		pop	{r4, r5, r6, pc}
 1222              	.LVL181:
 1223              	.L108:
 415:./mqtt/source/cJSON.c **** 	if (!item->child) return 0;		 /* memory fail */
 1224              		.loc 1 415 0 is_stmt 1
 1225 0028 FFF7FEFF 		bl	cJSON_New_Item
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 36


 1226              	.LVL182:
 1227 002c 0646     		mov	r6, r0
 1228              	.LVL183:
 1229 002e A060     		str	r0, [r4, #8]
 416:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 1230              		.loc 1 416 0
 1231 0030 40B3     		cbz	r0, .L112
 417:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 1232              		.loc 1 417 0
 1233 0032 2846     		mov	r0, r5
 1234              	.LVL184:
 1235 0034 FFF7FEFF 		bl	skip
 1236              	.LVL185:
 1237 0038 0146     		mov	r1, r0
 1238 003a 3046     		mov	r0, r6
 1239 003c FFF7FEFF 		bl	parse_value
 1240              	.LVL186:
 1241 0040 FFF7FEFF 		bl	skip
 1242              	.LVL187:
 418:./mqtt/source/cJSON.c **** 
 1243              		.loc 1 418 0
 1244 0044 0546     		mov	r5, r0
 1245 0046 90B9     		cbnz	r0, .L109
 1246 0048 1EE0     		b	.L113
 1247              	.LVL188:
 1248              	.L110:
 1249              	.LBB2:
 423:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 1250              		.loc 1 423 0
 1251 004a FFF7FEFF 		bl	cJSON_New_Item
 1252              	.LVL189:
 1253 004e 0446     		mov	r4, r0
 1254 0050 E0B1     		cbz	r0, .L114
 424:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));
 1255              		.loc 1 424 0
 1256 0052 3060     		str	r0, [r6]
 1257 0054 4660     		str	r6, [r0, #4]
 1258              	.LVL190:
 425:./mqtt/source/cJSON.c **** 		if (!value) return 0;	/* memory fail */
 1259              		.loc 1 425 0
 1260 0056 681C     		adds	r0, r5, #1
 1261              	.LVL191:
 1262 0058 FFF7FEFF 		bl	skip
 1263              	.LVL192:
 1264 005c 0146     		mov	r1, r0
 1265 005e 2046     		mov	r0, r4
 1266 0060 FFF7FEFF 		bl	parse_value
 1267              	.LVL193:
 1268 0064 FFF7FEFF 		bl	skip
 1269              	.LVL194:
 426:./mqtt/source/cJSON.c **** 	}
 1270              		.loc 1 426 0
 1271 0068 0546     		mov	r5, r0
 1272 006a 88B1     		cbz	r0, .L115
 424:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));
 1273              		.loc 1 424 0
 1274 006c 2646     		mov	r6, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 37


 1275              	.LVL195:
 1276              	.L109:
 1277              	.LBE2:
 420:./mqtt/source/cJSON.c **** 	{
 1278              		.loc 1 420 0
 1279 006e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1280 0070 2C2B     		cmp	r3, #44
 1281 0072 EAD0     		beq	.L110
 429:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 1282              		.loc 1 429 0
 1283 0074 5D2B     		cmp	r3, #93
 1284 0076 01D1     		bne	.L111
 429:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 1285              		.loc 1 429 0 is_stmt 0 discriminator 1
 1286 0078 681C     		adds	r0, r5, #1
 1287              	.LVL196:
 1288 007a 70BD     		pop	{r4, r5, r6, pc}
 1289              	.LVL197:
 1290              	.L111:
 430:./mqtt/source/cJSON.c **** }
 1291              		.loc 1 430 0 is_stmt 1
 1292 007c 054B     		ldr	r3, .L117
 1293 007e 1D60     		str	r5, [r3]
 1294 0080 0020     		movs	r0, #0
 1295              	.LVL198:
 1296 0082 70BD     		pop	{r4, r5, r6, pc}
 1297              	.LVL199:
 1298              	.L112:
 416:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 1299              		.loc 1 416 0
 1300 0084 0020     		movs	r0, #0
 1301              	.LVL200:
 1302 0086 70BD     		pop	{r4, r5, r6, pc}
 1303              	.LVL201:
 1304              	.L113:
 418:./mqtt/source/cJSON.c **** 
 1305              		.loc 1 418 0
 1306 0088 0020     		movs	r0, #0
 1307              	.LVL202:
 1308 008a 70BD     		pop	{r4, r5, r6, pc}
 1309              	.LVL203:
 1310              	.L114:
 1311              	.LBB3:
 423:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 1312              		.loc 1 423 0
 1313 008c 0020     		movs	r0, #0
 1314              	.LVL204:
 1315 008e 70BD     		pop	{r4, r5, r6, pc}
 1316              	.LVL205:
 1317              	.L115:
 426:./mqtt/source/cJSON.c **** 	}
 1318              		.loc 1 426 0
 1319 0090 0020     		movs	r0, #0
 1320              	.LVL206:
 1321              	.LBE3:
 431:./mqtt/source/cJSON.c **** 
 1322              		.loc 1 431 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 38


 1323 0092 70BD     		pop	{r4, r5, r6, pc}
 1324              	.LVL207:
 1325              	.L118:
 1326              		.align	2
 1327              	.L117:
 1328 0094 00000000 		.word	.LANCHOR0
 1329              		.cfi_endproc
 1330              	.LFE24:
 1332              		.section	.text.parse_object,"ax",%progbits
 1333              		.align	2
 1334              		.thumb
 1335              		.thumb_func
 1337              	parse_object:
 1338              	.LFB26:
 515:./mqtt/source/cJSON.c **** 	cJSON *child;
 1339              		.loc 1 515 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 0
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343              	.LVL208:
 517:./mqtt/source/cJSON.c **** 	
 1344              		.loc 1 517 0
 1345 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1346 0002 7B2B     		cmp	r3, #123
 1347 0004 03D0     		beq	.L120
 517:./mqtt/source/cJSON.c **** 	
 1348              		.loc 1 517 0 is_stmt 0 discriminator 1
 1349 0006 3C4B     		ldr	r3, .L135
 1350 0008 1960     		str	r1, [r3]
 1351 000a 0020     		movs	r0, #0
 1352              	.LVL209:
 547:./mqtt/source/cJSON.c **** 
 1353              		.loc 1 547 0 is_stmt 1 discriminator 1
 1354 000c 7047     		bx	lr
 1355              	.LVL210:
 1356              	.L120:
 515:./mqtt/source/cJSON.c **** 	cJSON *child;
 1357              		.loc 1 515 0
 1358 000e 70B5     		push	{r4, r5, r6, lr}
 1359              	.LCFI10:
 1360              		.cfi_def_cfa_offset 16
 1361              		.cfi_offset 4, -16
 1362              		.cfi_offset 5, -12
 1363              		.cfi_offset 6, -8
 1364              		.cfi_offset 14, -4
 1365 0010 0446     		mov	r4, r0
 519:./mqtt/source/cJSON.c **** 	value=skip(value+1);
 1366              		.loc 1 519 0
 1367 0012 0623     		movs	r3, #6
 1368 0014 C360     		str	r3, [r0, #12]
 520:./mqtt/source/cJSON.c **** 	if (*value=='}') return value+1;	/* empty array. */
 1369              		.loc 1 520 0
 1370 0016 481C     		adds	r0, r1, #1
 1371              	.LVL211:
 1372 0018 FFF7FEFF 		bl	skip
 1373              	.LVL212:
 1374 001c 0546     		mov	r5, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 39


 1375              	.LVL213:
 521:./mqtt/source/cJSON.c **** 	
 1376              		.loc 1 521 0
 1377 001e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1378 0020 7D2B     		cmp	r3, #125
 1379 0022 01D1     		bne	.L122
 521:./mqtt/source/cJSON.c **** 	
 1380              		.loc 1 521 0 is_stmt 0 discriminator 1
 1381 0024 0130     		adds	r0, r0, #1
 1382              	.LVL214:
 1383 0026 70BD     		pop	{r4, r5, r6, pc}
 1384              	.LVL215:
 1385              	.L122:
 523:./mqtt/source/cJSON.c **** 	if (!item->child) return 0;
 1386              		.loc 1 523 0 is_stmt 1
 1387 0028 FFF7FEFF 		bl	cJSON_New_Item
 1388              	.LVL216:
 1389 002c 0646     		mov	r6, r0
 1390              	.LVL217:
 1391 002e A060     		str	r0, [r4, #8]
 524:./mqtt/source/cJSON.c **** 	value=skip(parse_string(child,skip(value)));
 1392              		.loc 1 524 0
 1393 0030 0028     		cmp	r0, #0
 1394 0032 54D0     		beq	.L128
 525:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 1395              		.loc 1 525 0
 1396 0034 2846     		mov	r0, r5
 1397              	.LVL218:
 1398 0036 FFF7FEFF 		bl	skip
 1399              	.LVL219:
 1400 003a 0146     		mov	r1, r0
 1401 003c 3046     		mov	r0, r6
 1402 003e FFF7FEFF 		bl	parse_string
 1403              	.LVL220:
 1404 0042 FFF7FEFF 		bl	skip
 1405              	.LVL221:
 526:./mqtt/source/cJSON.c **** 	child->string=child->valuestring;child->valuestring=0;
 1406              		.loc 1 526 0
 1407 0046 0028     		cmp	r0, #0
 1408 0048 4BD0     		beq	.L129
 527:./mqtt/source/cJSON.c **** 	if (*value!=':') {ep=value;return 0;}	/* fail! */
 1409              		.loc 1 527 0
 1410 004a 3269     		ldr	r2, [r6, #16]
 1411 004c 3262     		str	r2, [r6, #32]
 1412 004e 0022     		movs	r2, #0
 1413 0050 3261     		str	r2, [r6, #16]
 528:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 1414              		.loc 1 528 0
 1415 0052 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1416 0054 3A2A     		cmp	r2, #58
 1417 0056 03D0     		beq	.L123
 528:./mqtt/source/cJSON.c **** 	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 1418              		.loc 1 528 0 is_stmt 0 discriminator 1
 1419 0058 274A     		ldr	r2, .L135
 1420 005a 1060     		str	r0, [r2]
 1421 005c 0020     		movs	r0, #0
 1422              	.LVL222:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 40


 1423 005e 70BD     		pop	{r4, r5, r6, pc}
 1424              	.LVL223:
 1425              	.L123:
 529:./mqtt/source/cJSON.c **** 	if (!value) return 0;
 1426              		.loc 1 529 0 is_stmt 1
 1427 0060 0130     		adds	r0, r0, #1
 1428              	.LVL224:
 1429 0062 FFF7FEFF 		bl	skip
 1430              	.LVL225:
 1431 0066 0146     		mov	r1, r0
 1432 0068 3046     		mov	r0, r6
 1433 006a FFF7FEFF 		bl	parse_value
 1434              	.LVL226:
 1435 006e FFF7FEFF 		bl	skip
 1436              	.LVL227:
 530:./mqtt/source/cJSON.c **** 	
 1437              		.loc 1 530 0
 1438 0072 0546     		mov	r5, r0
 1439 0074 40BB     		cbnz	r0, .L124
 1440 0076 36E0     		b	.L130
 1441              	.LVL228:
 1442              	.L126:
 1443              	.LBB4:
 535:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 1444              		.loc 1 535 0
 1445 0078 FFF7FEFF 		bl	cJSON_New_Item
 1446              	.LVL229:
 1447 007c 0446     		mov	r4, r0
 1448 007e 0028     		cmp	r0, #0
 1449 0080 33D0     		beq	.L131
 536:./mqtt/source/cJSON.c **** 		value=skip(parse_string(child,skip(value+1)));
 1450              		.loc 1 536 0
 1451 0082 3060     		str	r0, [r6]
 1452 0084 4660     		str	r6, [r0, #4]
 1453              	.LVL230:
 537:./mqtt/source/cJSON.c **** 		if (!value) return 0;
 1454              		.loc 1 537 0
 1455 0086 681C     		adds	r0, r5, #1
 1456              	.LVL231:
 1457 0088 FFF7FEFF 		bl	skip
 1458              	.LVL232:
 1459 008c 0146     		mov	r1, r0
 1460 008e 2046     		mov	r0, r4
 1461 0090 FFF7FEFF 		bl	parse_string
 1462              	.LVL233:
 1463 0094 FFF7FEFF 		bl	skip
 1464              	.LVL234:
 538:./mqtt/source/cJSON.c **** 		child->string=child->valuestring;child->valuestring=0;
 1465              		.loc 1 538 0
 1466 0098 48B3     		cbz	r0, .L132
 539:./mqtt/source/cJSON.c **** 		if (*value!=':') {ep=value;return 0;}	/* fail! */
 1467              		.loc 1 539 0
 1468 009a 2269     		ldr	r2, [r4, #16]
 1469 009c 2262     		str	r2, [r4, #32]
 1470 009e 0022     		movs	r2, #0
 1471 00a0 2261     		str	r2, [r4, #16]
 540:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 41


 1472              		.loc 1 540 0
 1473 00a2 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1474 00a4 3A2A     		cmp	r2, #58
 1475 00a6 03D0     		beq	.L125
 540:./mqtt/source/cJSON.c **** 		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 1476              		.loc 1 540 0 is_stmt 0 discriminator 1
 1477 00a8 134A     		ldr	r2, .L135
 1478 00aa 1060     		str	r0, [r2]
 1479 00ac 0020     		movs	r0, #0
 1480              	.LVL235:
 1481 00ae 70BD     		pop	{r4, r5, r6, pc}
 1482              	.LVL236:
 1483              	.L125:
 541:./mqtt/source/cJSON.c **** 		if (!value) return 0;
 1484              		.loc 1 541 0 is_stmt 1
 1485 00b0 0130     		adds	r0, r0, #1
 1486              	.LVL237:
 1487 00b2 FFF7FEFF 		bl	skip
 1488              	.LVL238:
 1489 00b6 0146     		mov	r1, r0
 1490 00b8 2046     		mov	r0, r4
 1491 00ba FFF7FEFF 		bl	parse_value
 1492              	.LVL239:
 1493 00be FFF7FEFF 		bl	skip
 1494              	.LVL240:
 542:./mqtt/source/cJSON.c **** 	}
 1495              		.loc 1 542 0
 1496 00c2 0546     		mov	r5, r0
 1497 00c4 A8B1     		cbz	r0, .L133
 536:./mqtt/source/cJSON.c **** 		value=skip(parse_string(child,skip(value+1)));
 1498              		.loc 1 536 0
 1499 00c6 2646     		mov	r6, r4
 1500              	.LVL241:
 1501              	.L124:
 1502              	.LBE4:
 532:./mqtt/source/cJSON.c **** 	{
 1503              		.loc 1 532 0
 1504 00c8 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1505 00ca 2C2B     		cmp	r3, #44
 1506 00cc D4D0     		beq	.L126
 545:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 1507              		.loc 1 545 0
 1508 00ce 7D2B     		cmp	r3, #125
 1509 00d0 01D1     		bne	.L127
 545:./mqtt/source/cJSON.c **** 	ep=value;return 0;	/* malformed. */
 1510              		.loc 1 545 0 is_stmt 0 discriminator 1
 1511 00d2 681C     		adds	r0, r5, #1
 1512              	.LVL242:
 1513 00d4 70BD     		pop	{r4, r5, r6, pc}
 1514              	.LVL243:
 1515              	.L127:
 546:./mqtt/source/cJSON.c **** }
 1516              		.loc 1 546 0 is_stmt 1
 1517 00d6 084B     		ldr	r3, .L135
 1518 00d8 1D60     		str	r5, [r3]
 1519 00da 0020     		movs	r0, #0
 1520              	.LVL244:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 42


 1521 00dc 70BD     		pop	{r4, r5, r6, pc}
 1522              	.LVL245:
 1523              	.L128:
 524:./mqtt/source/cJSON.c **** 	value=skip(parse_string(child,skip(value)));
 1524              		.loc 1 524 0
 1525 00de 0020     		movs	r0, #0
 1526              	.LVL246:
 1527 00e0 70BD     		pop	{r4, r5, r6, pc}
 1528              	.LVL247:
 1529              	.L129:
 526:./mqtt/source/cJSON.c **** 	child->string=child->valuestring;child->valuestring=0;
 1530              		.loc 1 526 0
 1531 00e2 0020     		movs	r0, #0
 1532              	.LVL248:
 1533 00e4 70BD     		pop	{r4, r5, r6, pc}
 1534              	.LVL249:
 1535              	.L130:
 530:./mqtt/source/cJSON.c **** 	
 1536              		.loc 1 530 0
 1537 00e6 0020     		movs	r0, #0
 1538              	.LVL250:
 1539 00e8 70BD     		pop	{r4, r5, r6, pc}
 1540              	.LVL251:
 1541              	.L131:
 1542              	.LBB5:
 535:./mqtt/source/cJSON.c **** 		child->next=new_item;new_item->prev=child;child=new_item;
 1543              		.loc 1 535 0
 1544 00ea 0020     		movs	r0, #0
 1545              	.LVL252:
 1546 00ec 70BD     		pop	{r4, r5, r6, pc}
 1547              	.LVL253:
 1548              	.L132:
 538:./mqtt/source/cJSON.c **** 		child->string=child->valuestring;child->valuestring=0;
 1549              		.loc 1 538 0
 1550 00ee 0020     		movs	r0, #0
 1551              	.LVL254:
 1552 00f0 70BD     		pop	{r4, r5, r6, pc}
 1553              	.LVL255:
 1554              	.L133:
 542:./mqtt/source/cJSON.c **** 	}
 1555              		.loc 1 542 0
 1556 00f2 0020     		movs	r0, #0
 1557              	.LVL256:
 1558              	.LBE5:
 547:./mqtt/source/cJSON.c **** 
 1559              		.loc 1 547 0
 1560 00f4 70BD     		pop	{r4, r5, r6, pc}
 1561              	.LVL257:
 1562              	.L136:
 1563 00f6 00BF     		.align	2
 1564              	.L135:
 1565 00f8 00000000 		.word	.LANCHOR0
 1566              		.cfi_endproc
 1567              	.LFE26:
 1569              		.section	.text.ensure,"ax",%progbits
 1570              		.align	2
 1571              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 43


 1572              		.thumb_func
 1574              	ensure:
 1575              	.LFB9:
 122:./mqtt/source/cJSON.c **** 	char *newbuffer;int newsize;
 1576              		.loc 1 122 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              	.LVL258:
 124:./mqtt/source/cJSON.c **** 	needed+=p->offset;
 1581              		.loc 1 124 0
 1582 0000 0028     		cmp	r0, #0
 1583 0002 2CD0     		beq	.L142
 1584 0004 0346     		mov	r3, r0
 124:./mqtt/source/cJSON.c **** 	needed+=p->offset;
 1585              		.loc 1 124 0 is_stmt 0 discriminator 2
 1586 0006 0068     		ldr	r0, [r0]
 1587              	.LVL259:
 1588 0008 0028     		cmp	r0, #0
 1589 000a 2AD0     		beq	.L144
 122:./mqtt/source/cJSON.c **** 	char *newbuffer;int newsize;
 1590              		.loc 1 122 0 is_stmt 1
 1591 000c 70B5     		push	{r4, r5, r6, lr}
 1592              	.LCFI11:
 1593              		.cfi_def_cfa_offset 16
 1594              		.cfi_offset 4, -16
 1595              		.cfi_offset 5, -12
 1596              		.cfi_offset 6, -8
 1597              		.cfi_offset 14, -4
 125:./mqtt/source/cJSON.c **** 	if (needed<=p->length) return p->buffer+p->offset;
 1598              		.loc 1 125 0
 1599 000e 9A68     		ldr	r2, [r3, #8]
 1600 0010 1144     		add	r1, r1, r2
 1601              	.LVL260:
 126:./mqtt/source/cJSON.c **** 
 1602              		.loc 1 126 0
 1603 0012 5C68     		ldr	r4, [r3, #4]
 1604 0014 A142     		cmp	r1, r4
 1605 0016 01DC     		bgt	.L139
 126:./mqtt/source/cJSON.c **** 
 1606              		.loc 1 126 0 is_stmt 0 discriminator 1
 1607 0018 1044     		add	r0, r0, r2
 1608 001a 70BD     		pop	{r4, r5, r6, pc}
 1609              	.L139:
 1610 001c 1C46     		mov	r4, r3
 128:./mqtt/source/cJSON.c **** 	newbuffer=(char*)cJSON_malloc(newsize);
 1611              		.loc 1 128 0 is_stmt 1
 1612 001e 0846     		mov	r0, r1
 1613 0020 FFF7FEFF 		bl	pow2gt
 1614              	.LVL261:
 1615 0024 0646     		mov	r6, r0
 1616              	.LVL262:
 129:./mqtt/source/cJSON.c **** 	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
 1617              		.loc 1 129 0
 1618 0026 0F4B     		ldr	r3, .L145
 1619 0028 1B68     		ldr	r3, [r3]
 1620 002a 9847     		blx	r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 44


 1621              	.LVL263:
 130:./mqtt/source/cJSON.c **** 	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
 1622              		.loc 1 130 0
 1623 002c 0546     		mov	r5, r0
 1624 002e 40B9     		cbnz	r0, .L140
 130:./mqtt/source/cJSON.c **** 	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
 1625              		.loc 1 130 0 is_stmt 0 discriminator 1
 1626 0030 0D4B     		ldr	r3, .L145+4
 1627 0032 1B68     		ldr	r3, [r3]
 1628 0034 2068     		ldr	r0, [r4]
 1629              	.LVL264:
 1630 0036 9847     		blx	r3
 1631              	.LVL265:
 1632 0038 0023     		movs	r3, #0
 1633 003a 6360     		str	r3, [r4, #4]
 1634 003c 2360     		str	r3, [r4]
 1635 003e 1846     		mov	r0, r3
 1636 0040 70BD     		pop	{r4, r5, r6, pc}
 1637              	.LVL266:
 1638              	.L140:
 131:./mqtt/source/cJSON.c **** 	cJSON_free(p->buffer);
 1639              		.loc 1 131 0 is_stmt 1
 1640 0042 18B1     		cbz	r0, .L141
 131:./mqtt/source/cJSON.c **** 	cJSON_free(p->buffer);
 1641              		.loc 1 131 0 is_stmt 0 discriminator 1
 1642 0044 6268     		ldr	r2, [r4, #4]
 1643 0046 2168     		ldr	r1, [r4]
 1644 0048 FFF7FEFF 		bl	memcpy
 1645              	.LVL267:
 1646              	.L141:
 132:./mqtt/source/cJSON.c **** 	p->length=newsize;
 1647              		.loc 1 132 0 is_stmt 1
 1648 004c 064B     		ldr	r3, .L145+4
 1649 004e 1B68     		ldr	r3, [r3]
 1650 0050 2068     		ldr	r0, [r4]
 1651 0052 9847     		blx	r3
 1652              	.LVL268:
 133:./mqtt/source/cJSON.c **** 	p->buffer=newbuffer;
 1653              		.loc 1 133 0
 1654 0054 6660     		str	r6, [r4, #4]
 134:./mqtt/source/cJSON.c **** 	return newbuffer+p->offset;
 1655              		.loc 1 134 0
 1656 0056 2560     		str	r5, [r4]
 135:./mqtt/source/cJSON.c **** }
 1657              		.loc 1 135 0
 1658 0058 A068     		ldr	r0, [r4, #8]
 1659 005a 2844     		add	r0, r0, r5
 1660 005c 70BD     		pop	{r4, r5, r6, pc}
 1661              	.LVL269:
 1662              	.L142:
 1663              	.LCFI12:
 1664              		.cfi_def_cfa_offset 0
 1665              		.cfi_restore 4
 1666              		.cfi_restore 5
 1667              		.cfi_restore 6
 1668              		.cfi_restore 14
 124:./mqtt/source/cJSON.c **** 	needed+=p->offset;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 45


 1669              		.loc 1 124 0
 1670 005e 0020     		movs	r0, #0
 1671              	.LVL270:
 1672 0060 7047     		bx	lr
 1673              	.LVL271:
 1674              	.L144:
 136:./mqtt/source/cJSON.c **** 
 1675              		.loc 1 136 0
 1676 0062 7047     		bx	lr
 1677              	.L146:
 1678              		.align	2
 1679              	.L145:
 1680 0064 00000000 		.word	.LANCHOR1
 1681 0068 00000000 		.word	.LANCHOR3
 1682              		.cfi_endproc
 1683              	.LFE9:
 1685              		.section	.text.create_reference,"ax",%progbits
 1686              		.align	2
 1687              		.thumb
 1688              		.thumb_func
 1690              	create_reference:
 1691              	.LFB32:
 667:./mqtt/source/cJSON.c **** /* Utility for handling references. */
 668:./mqtt/source/cJSON.c **** static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(
 1692              		.loc 1 668 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696              	.LVL272:
 1697 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1698              	.LCFI13:
 1699              		.cfi_def_cfa_offset 24
 1700              		.cfi_offset 3, -24
 1701              		.cfi_offset 4, -20
 1702              		.cfi_offset 5, -16
 1703              		.cfi_offset 6, -12
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 0002 0446     		mov	r4, r0
 1707              		.loc 1 668 0
 1708 0004 FFF7FEFF 		bl	cJSON_New_Item
 1709              	.LVL273:
 1710 0008 E8B1     		cbz	r0, .L150
 1711 000a 0146     		mov	r1, r0
 1712              		.loc 1 668 0 is_stmt 0 discriminator 2
 1713 000c 2346     		mov	r3, r4
 1714 000e 0246     		mov	r2, r0
 1715 0010 2034     		adds	r4, r4, #32
 1716              	.LVL274:
 1717              	.L149:
 1718 0012 1F68     		ldr	r7, [r3]	@ unaligned
 1719 0014 5E68     		ldr	r6, [r3, #4]	@ unaligned
 1720 0016 9D68     		ldr	r5, [r3, #8]	@ unaligned
 1721 0018 D868     		ldr	r0, [r3, #12]	@ unaligned
 1722 001a 1760     		str	r7, [r2]	@ unaligned
 1723 001c 5660     		str	r6, [r2, #4]	@ unaligned
 1724 001e 9560     		str	r5, [r2, #8]	@ unaligned
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 46


 1725 0020 D060     		str	r0, [r2, #12]	@ unaligned
 1726 0022 1033     		adds	r3, r3, #16
 1727 0024 1032     		adds	r2, r2, #16
 1728 0026 A342     		cmp	r3, r4
 1729 0028 F3D1     		bne	.L149
 1730 002a 1868     		ldr	r0, [r3]	@ unaligned
 1731 002c 5B68     		ldr	r3, [r3, #4]	@ unaligned
 1732 002e 1060     		str	r0, [r2]	@ unaligned
 1733 0030 5360     		str	r3, [r2, #4]	@ unaligned
 1734 0032 0023     		movs	r3, #0
 1735 0034 0B62     		str	r3, [r1, #32]
 1736 0036 CA68     		ldr	r2, [r1, #12]
 1737 0038 42F48072 		orr	r2, r2, #256
 1738 003c CA60     		str	r2, [r1, #12]
 1739 003e 4B60     		str	r3, [r1, #4]
 1740 0040 0B60     		str	r3, [r1]
 1741 0042 0846     		mov	r0, r1
 1742 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1743              	.LVL275:
 1744              	.L150:
 1745              		.loc 1 668 0
 1746 0046 0020     		movs	r0, #0
 1747              	.LVL276:
 1748 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1749              		.cfi_endproc
 1750              	.LFE32:
 1752 004a 00BF     		.section	.text.cJSON_strdup,"ax",%progbits
 1753              		.align	2
 1754              		.thumb
 1755              		.thumb_func
 1757              	cJSON_strdup:
 1758              	.LFB3:
  50:./mqtt/source/cJSON.c ****       size_t len;
 1759              		.loc 1 50 0 is_stmt 1
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763              	.LVL277:
 1764 0000 70B5     		push	{r4, r5, r6, lr}
 1765              	.LCFI14:
 1766              		.cfi_def_cfa_offset 16
 1767              		.cfi_offset 4, -16
 1768              		.cfi_offset 5, -12
 1769              		.cfi_offset 6, -8
 1770              		.cfi_offset 14, -4
 1771 0002 0646     		mov	r6, r0
  54:./mqtt/source/cJSON.c ****       if (!(copy = (char*)cJSON_malloc(len))) return 0;
 1772              		.loc 1 54 0
 1773 0004 FFF7FEFF 		bl	strlen
 1774              	.LVL278:
 1775 0008 451C     		adds	r5, r0, #1
 1776              	.LVL279:
  55:./mqtt/source/cJSON.c ****       memcpy(copy,str,len);
 1777              		.loc 1 55 0
 1778 000a 074B     		ldr	r3, .L156
 1779 000c 1B68     		ldr	r3, [r3]
 1780 000e 2846     		mov	r0, r5
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 47


 1781 0010 9847     		blx	r3
 1782              	.LVL280:
 1783 0012 30B1     		cbz	r0, .L154
 1784 0014 0446     		mov	r4, r0
  56:./mqtt/source/cJSON.c ****       return copy;
 1785              		.loc 1 56 0
 1786 0016 2A46     		mov	r2, r5
 1787 0018 3146     		mov	r1, r6
 1788 001a FFF7FEFF 		bl	memcpy
 1789              	.LVL281:
  57:./mqtt/source/cJSON.c **** }
 1790              		.loc 1 57 0
 1791 001e 2046     		mov	r0, r4
 1792 0020 70BD     		pop	{r4, r5, r6, pc}
 1793              	.LVL282:
 1794              	.L154:
  55:./mqtt/source/cJSON.c ****       memcpy(copy,str,len);
 1795              		.loc 1 55 0
 1796 0022 0020     		movs	r0, #0
 1797              	.LVL283:
  58:./mqtt/source/cJSON.c **** 
 1798              		.loc 1 58 0
 1799 0024 70BD     		pop	{r4, r5, r6, pc}
 1800              	.LVL284:
 1801              	.L157:
 1802 0026 00BF     		.align	2
 1803              	.L156:
 1804 0028 00000000 		.word	.LANCHOR1
 1805              		.cfi_endproc
 1806              	.LFE3:
 1808              		.section	.text.update,"ax",%progbits
 1809              		.align	2
 1810              		.thumb
 1811              		.thumb_func
 1813              	update:
 1814              	.LFB10:
 139:./mqtt/source/cJSON.c **** 	char *str;
 1815              		.loc 1 139 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              	.LVL285:
 141:./mqtt/source/cJSON.c **** 	str=p->buffer+p->offset;
 1820              		.loc 1 141 0
 1821 0000 48B1     		cbz	r0, .L160
 1822 0002 0346     		mov	r3, r0
 141:./mqtt/source/cJSON.c **** 	str=p->buffer+p->offset;
 1823              		.loc 1 141 0 is_stmt 0 discriminator 2
 1824 0004 0068     		ldr	r0, [r0]
 1825              	.LVL286:
 1826 0006 40B1     		cbz	r0, .L161
 139:./mqtt/source/cJSON.c **** 	char *str;
 1827              		.loc 1 139 0 is_stmt 1
 1828 0008 10B5     		push	{r4, lr}
 1829              	.LCFI15:
 1830              		.cfi_def_cfa_offset 8
 1831              		.cfi_offset 4, -8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 48


 1832              		.cfi_offset 14, -4
 142:./mqtt/source/cJSON.c **** 	return p->offset+strlen(str);
 1833              		.loc 1 142 0
 1834 000a 9C68     		ldr	r4, [r3, #8]
 1835              	.LVL287:
 143:./mqtt/source/cJSON.c **** }
 1836              		.loc 1 143 0
 1837 000c 2044     		add	r0, r0, r4
 1838              	.LVL288:
 1839 000e FFF7FEFF 		bl	strlen
 1840              	.LVL289:
 1841 0012 2044     		add	r0, r0, r4
 1842 0014 10BD     		pop	{r4, pc}
 1843              	.LVL290:
 1844              	.L160:
 1845              	.LCFI16:
 1846              		.cfi_def_cfa_offset 0
 1847              		.cfi_restore 4
 1848              		.cfi_restore 14
 141:./mqtt/source/cJSON.c **** 	str=p->buffer+p->offset;
 1849              		.loc 1 141 0
 1850 0016 0020     		movs	r0, #0
 1851              	.LVL291:
 1852 0018 7047     		bx	lr
 1853              	.LVL292:
 1854              	.L161:
 1855 001a 0020     		movs	r0, #0
 1856 001c 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE10:
 1860              		.global	__aeabi_dcmpeq
 1861              		.global	__aeabi_dcmple
 1862              		.global	__aeabi_dcmpge
 1863              		.global	__aeabi_dcmplt
 1864              		.global	__aeabi_dcmpgt
 1865 001e 00BF     		.section	.text.print_number,"ax",%progbits
 1866              		.align	2
 1867              		.thumb
 1868              		.thumb_func
 1870              	print_number:
 1871              	.LFB11:
 148:./mqtt/source/cJSON.c **** 	char *str=0;
 1872              		.loc 1 148 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL293:
 1877 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1878              	.LCFI17:
 1879              		.cfi_def_cfa_offset 32
 1880              		.cfi_offset 3, -32
 1881              		.cfi_offset 4, -28
 1882              		.cfi_offset 5, -24
 1883              		.cfi_offset 6, -20
 1884              		.cfi_offset 7, -16
 1885              		.cfi_offset 8, -12
 1886              		.cfi_offset 9, -8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 49


 1887              		.cfi_offset 14, -4
 1888 0004 0746     		mov	r7, r0
 1889 0006 0E46     		mov	r6, r1
 1890              	.LVL294:
 150:./mqtt/source/cJSON.c **** 	if (d==0)
 1891              		.loc 1 150 0
 1892 0008 D0E90645 		ldrd	r4, [r0, #24]
 1893              	.LVL295:
 151:./mqtt/source/cJSON.c **** 	{
 1894              		.loc 1 151 0
 1895 000c 0022     		movs	r2, #0
 1896 000e 0023     		movs	r3, #0
 1897 0010 2046     		mov	r0, r4
 1898              	.LVL296:
 1899 0012 2946     		mov	r1, r5
 1900              	.LVL297:
 1901 0014 FFF7FEFF 		bl	__aeabi_dcmpeq
 1902              	.LVL298:
 1903 0018 90B1     		cbz	r0, .L190
 153:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
 1904              		.loc 1 153 0
 1905 001a 2EB1     		cbz	r6, .L167
 153:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
 1906              		.loc 1 153 0 is_stmt 0 discriminator 1
 1907 001c 0221     		movs	r1, #2
 1908 001e 3046     		mov	r0, r6
 1909 0020 FFF7FEFF 		bl	ensure
 1910              	.LVL299:
 1911 0024 0646     		mov	r6, r0
 1912              	.LVL300:
 1913 0026 04E0     		b	.L168
 1914              	.LVL301:
 1915              	.L167:
 154:./mqtt/source/cJSON.c **** 		if (str) strcpy(str,"0");
 1916              		.loc 1 154 0 is_stmt 1
 1917 0028 514B     		ldr	r3, .L193+32
 1918 002a 1B68     		ldr	r3, [r3]
 1919 002c 0220     		movs	r0, #2
 1920 002e 9847     		blx	r3
 1921              	.LVL302:
 1922 0030 0646     		mov	r6, r0
 1923              	.LVL303:
 1924              	.L168:
 155:./mqtt/source/cJSON.c **** 	}
 1925              		.loc 1 155 0
 1926 0032 002E     		cmp	r6, #0
 1927 0034 00F08980 		beq	.L169
 155:./mqtt/source/cJSON.c **** 	}
 1928              		.loc 1 155 0 is_stmt 0 discriminator 1
 1929 0038 4E4B     		ldr	r3, .L193+36
 1930 003a 1B88     		ldrh	r3, [r3]	@ unaligned
 1931 003c 3380     		strh	r3, [r6]	@ unaligned
 1932 003e 84E0     		b	.L169
 1933              	.LVL304:
 1934              	.L190:
 157:./mqtt/source/cJSON.c **** 	{
 1935              		.loc 1 157 0 is_stmt 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 50


 1936 0040 7869     		ldr	r0, [r7, #20]
 1937 0042 FFF7FEFF 		bl	__aeabi_i2d
 1938              	.LVL305:
 1939 0046 2246     		mov	r2, r4
 1940 0048 2B46     		mov	r3, r5
 1941 004a FFF7FEFF 		bl	__aeabi_dsub
 1942              	.LVL306:
 1943 004e 0246     		mov	r2, r0
 1944 0050 0B46     		mov	r3, r1
 1945 0052 1046     		mov	r0, r2
 1946 0054 23F00041 		bic	r1, r3, #-2147483648
 1947 0058 0022     		movs	r2, #0
 1948 005a 474B     		ldr	r3, .L193+40
 1949 005c FFF7FEFF 		bl	__aeabi_dcmple
 1950              	.LVL307:
 1951 0060 10B3     		cbz	r0, .L170
 157:./mqtt/source/cJSON.c **** 	{
 1952              		.loc 1 157 0 is_stmt 0 discriminator 1
 1953 0062 3BA3     		adr	r3, .L193
 1954 0064 D3E90023 		ldrd	r2, [r3]
 1955 0068 2046     		mov	r0, r4
 1956 006a 2946     		mov	r1, r5
 1957 006c FFF7FEFF 		bl	__aeabi_dcmple
 1958              	.LVL308:
 1959 0070 D0B1     		cbz	r0, .L170
 157:./mqtt/source/cJSON.c **** 	{
 1960              		.loc 1 157 0 discriminator 2
 1961 0072 0022     		movs	r2, #0
 1962 0074 414B     		ldr	r3, .L193+44
 1963 0076 2046     		mov	r0, r4
 1964 0078 2946     		mov	r1, r5
 1965 007a FFF7FEFF 		bl	__aeabi_dcmpge
 1966              	.LVL309:
 1967 007e 98B1     		cbz	r0, .L170
 159:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
 1968              		.loc 1 159 0 is_stmt 1
 1969 0080 2EB1     		cbz	r6, .L174
 159:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
 1970              		.loc 1 159 0 is_stmt 0 discriminator 1
 1971 0082 1521     		movs	r1, #21
 1972 0084 3046     		mov	r0, r6
 1973 0086 FFF7FEFF 		bl	ensure
 1974              	.LVL310:
 1975 008a 0646     		mov	r6, r0
 1976              	.LVL311:
 1977 008c 04E0     		b	.L175
 1978              	.LVL312:
 1979              	.L174:
 160:./mqtt/source/cJSON.c **** 		if (str)	sprintf(str,"%d",item->valueint);
 1980              		.loc 1 160 0 is_stmt 1
 1981 008e 384B     		ldr	r3, .L193+32
 1982 0090 1B68     		ldr	r3, [r3]
 1983 0092 1520     		movs	r0, #21
 1984 0094 9847     		blx	r3
 1985              	.LVL313:
 1986 0096 0646     		mov	r6, r0
 1987              	.LVL314:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 51


 1988              	.L175:
 161:./mqtt/source/cJSON.c **** 	}
 1989              		.loc 1 161 0
 1990 0098 002E     		cmp	r6, #0
 1991 009a 56D0     		beq	.L169
 161:./mqtt/source/cJSON.c **** 	}
 1992              		.loc 1 161 0 is_stmt 0 discriminator 1
 1993 009c 7A69     		ldr	r2, [r7, #20]
 1994 009e 3849     		ldr	r1, .L193+48
 1995 00a0 3046     		mov	r0, r6
 1996 00a2 FFF7FEFF 		bl	sprintf
 1997              	.LVL315:
 1998 00a6 50E0     		b	.L169
 1999              	.LVL316:
 2000              	.L170:
 165:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
 2001              		.loc 1 165 0 is_stmt 1
 2002 00a8 2EB1     		cbz	r6, .L176
 165:./mqtt/source/cJSON.c **** 		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
 2003              		.loc 1 165 0 is_stmt 0 discriminator 1
 2004 00aa 4021     		movs	r1, #64
 2005 00ac 3046     		mov	r0, r6
 2006 00ae FFF7FEFF 		bl	ensure
 2007              	.LVL317:
 2008 00b2 0646     		mov	r6, r0
 2009              	.LVL318:
 2010 00b4 04E0     		b	.L177
 2011              	.LVL319:
 2012              	.L176:
 166:./mqtt/source/cJSON.c **** 		if (str)
 2013              		.loc 1 166 0 is_stmt 1
 2014 00b6 2E4B     		ldr	r3, .L193+32
 2015 00b8 1B68     		ldr	r3, [r3]
 2016 00ba 4020     		movs	r0, #64
 2017 00bc 9847     		blx	r3
 2018              	.LVL320:
 2019 00be 0646     		mov	r6, r0
 2020              	.LVL321:
 2021              	.L177:
 167:./mqtt/source/cJSON.c **** 		{
 2022              		.loc 1 167 0
 2023 00c0 002E     		cmp	r6, #0
 2024 00c2 42D0     		beq	.L169
 169:./mqtt/source/cJSON.c **** 			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 2025              		.loc 1 169 0
 2026 00c4 45EC104B 		vmov	d0, r4, r5
 2027 00c8 FFF7FEFF 		bl	floor
 2028              	.LVL322:
 2029 00cc 2246     		mov	r2, r4
 2030 00ce 2B46     		mov	r3, r5
 2031 00d0 51EC100B 		vmov	r0, r1, d0
 2032 00d4 FFF7FEFF 		bl	__aeabi_dsub
 2033              	.LVL323:
 2034 00d8 0246     		mov	r2, r0
 2035 00da 0B46     		mov	r3, r1
 2036 00dc 1046     		mov	r0, r2
 2037 00de 23F00041 		bic	r1, r3, #-2147483648
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 52


 2038 00e2 0022     		movs	r2, #0
 2039 00e4 244B     		ldr	r3, .L193+40
 2040 00e6 FFF7FEFF 		bl	__aeabi_dcmple
 2041              	.LVL324:
 2042 00ea 78B1     		cbz	r0, .L178
 169:./mqtt/source/cJSON.c **** 			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 2043              		.loc 1 169 0 is_stmt 0 discriminator 1
 2044 00ec 2046     		mov	r0, r4
 2045 00ee 25F00041 		bic	r1, r5, #-2147483648
 2046 00f2 19A3     		adr	r3, .L193+8
 2047 00f4 D3E90023 		ldrd	r2, [r3]
 2048 00f8 FFF7FEFF 		bl	__aeabi_dcmplt
 2049              	.LVL325:
 2050 00fc 30B1     		cbz	r0, .L178
 169:./mqtt/source/cJSON.c **** 			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 2051              		.loc 1 169 0 discriminator 2
 2052 00fe 2246     		mov	r2, r4
 2053 0100 2B46     		mov	r3, r5
 2054 0102 2049     		ldr	r1, .L193+52
 2055 0104 3046     		mov	r0, r6
 2056 0106 FFF7FEFF 		bl	sprintf
 2057              	.LVL326:
 2058 010a 1EE0     		b	.L169
 2059              	.L178:
 170:./mqtt/source/cJSON.c **** 			else												sprintf(str,"%f",d);
 2060              		.loc 1 170 0 is_stmt 1
 2061 010c 25F00049 		bic	r9, r5, #-2147483648
 2062 0110 13A3     		adr	r3, .L193+16
 2063 0112 D3E90023 		ldrd	r2, [r3]
 2064 0116 2046     		mov	r0, r4
 2065 0118 4946     		mov	r1, r9
 2066 011a FFF7FEFF 		bl	__aeabi_dcmplt
 2067              	.LVL327:
 2068 011e 38B9     		cbnz	r0, .L181
 170:./mqtt/source/cJSON.c **** 			else												sprintf(str,"%f",d);
 2069              		.loc 1 170 0 is_stmt 0 discriminator 2
 2070 0120 11A3     		adr	r3, .L193+24
 2071 0122 D3E90023 		ldrd	r2, [r3]
 2072 0126 2046     		mov	r0, r4
 2073 0128 4946     		mov	r1, r9
 2074 012a FFF7FEFF 		bl	__aeabi_dcmpgt
 2075              	.LVL328:
 2076 012e 30B1     		cbz	r0, .L191
 2077              	.L181:
 170:./mqtt/source/cJSON.c **** 			else												sprintf(str,"%f",d);
 2078              		.loc 1 170 0 discriminator 3
 2079 0130 2246     		mov	r2, r4
 2080 0132 2B46     		mov	r3, r5
 2081 0134 1449     		ldr	r1, .L193+56
 2082 0136 3046     		mov	r0, r6
 2083 0138 FFF7FEFF 		bl	sprintf
 2084              	.LVL329:
 2085 013c 05E0     		b	.L169
 2086              	.L191:
 171:./mqtt/source/cJSON.c **** 		}
 2087              		.loc 1 171 0 is_stmt 1
 2088 013e 2246     		mov	r2, r4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 53


 2089 0140 2B46     		mov	r3, r5
 2090 0142 1249     		ldr	r1, .L193+60
 2091 0144 3046     		mov	r0, r6
 2092 0146 FFF7FEFF 		bl	sprintf
 2093              	.LVL330:
 2094              	.L169:
 175:./mqtt/source/cJSON.c **** 
 2095              		.loc 1 175 0
 2096 014a 3046     		mov	r0, r6
 2097 014c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2098              	.LVL331:
 2099              	.L194:
 2100              		.align	3
 2101              	.L193:
 2102 0150 0000C0FF 		.word	-4194304
 2103 0154 FFFFDF41 		.word	1105199103
 2104 0158 44F3C2E4 		.word	-456985788
 2105 015c E4E9634C 		.word	1281616356
 2106 0160 8DEDB5A0 		.word	-1598689907
 2107 0164 F7C6B03E 		.word	1051772663
 2108 0168 00000000 		.word	0
 2109 016c 65CDCD41 		.word	1104006501
 2110 0170 00000000 		.word	.LANCHOR1
 2111 0174 18000000 		.word	.LC3
 2112 0178 0000B03C 		.word	1018167296
 2113 017c 0000E0C1 		.word	-1042284544
 2114 0180 1C000000 		.word	.LC4
 2115 0184 20000000 		.word	.LC5
 2116 0188 28000000 		.word	.LC6
 2117 018c 2C000000 		.word	.LC7
 2118              		.cfi_endproc
 2119              	.LFE11:
 2121              		.section	.text.print_string_ptr,"ax",%progbits
 2122              		.align	2
 2123              		.thumb
 2124              		.thumb_func
 2126              	print_string_ptr:
 2127              	.LFB14:
 253:./mqtt/source/cJSON.c **** 	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
 2128              		.loc 1 253 0
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 0, uses_anonymous_args = 0
 2132              	.LVL332:
 2133 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2134              	.LCFI18:
 2135              		.cfi_def_cfa_offset 32
 2136              		.cfi_offset 3, -32
 2137              		.cfi_offset 4, -28
 2138              		.cfi_offset 5, -24
 2139              		.cfi_offset 6, -20
 2140              		.cfi_offset 7, -16
 2141              		.cfi_offset 8, -12
 2142              		.cfi_offset 9, -8
 2143              		.cfi_offset 14, -4
 2144 0004 0546     		mov	r5, r0
 2145 0006 0E46     		mov	r6, r1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 54


 2146              	.LVL333:
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2147              		.loc 1 256 0
 2148 0008 0146     		mov	r1, r0
 2149              	.LVL334:
 254:./mqtt/source/cJSON.c **** 	
 2150              		.loc 1 254 0
 2151 000a 0020     		movs	r0, #0
 2152              	.LVL335:
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2153              		.loc 1 256 0
 2154 000c 10E0     		b	.L196
 2155              	.LVL336:
 2156              	.L198:
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2157              		.loc 1 256 0 is_stmt 0 discriminator 11
 2158 000e 5A1E     		subs	r2, r3, #1
 2159 0010 D2B2     		uxtb	r2, r2
 2160 0012 1E2A     		cmp	r2, #30
 2161 0014 05D9     		bls	.L225
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2162              		.loc 1 256 0 discriminator 3
 2163 0016 222B     		cmp	r3, #34
 2164 0018 05D0     		beq	.L226
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2165              		.loc 1 256 0 discriminator 5
 2166 001a 5C2B     		cmp	r3, #92
 2167 001c 05D1     		bne	.L227
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2168              		.loc 1 256 0
 2169 001e 0123     		movs	r3, #1
 2170 0020 04E0     		b	.L197
 2171              	.L225:
 2172 0022 0123     		movs	r3, #1
 2173 0024 02E0     		b	.L197
 2174              	.L226:
 2175 0026 0123     		movs	r3, #1
 2176 0028 00E0     		b	.L197
 2177              	.L227:
 2178 002a 0023     		movs	r3, #0
 2179              	.L197:
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2180              		.loc 1 256 0 discriminator 9
 2181 002c 1843     		orrs	r0, r0, r3
 2182              	.LVL337:
 2183 002e 0131     		adds	r1, r1, #1
 2184              	.LVL338:
 2185              	.L196:
 256:./mqtt/source/cJSON.c **** 	if (!flag)
 2186              		.loc 1 256 0 discriminator 10
 2187 0030 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 2188 0032 002B     		cmp	r3, #0
 2189 0034 EBD1     		bne	.L198
 257:./mqtt/source/cJSON.c **** 	{
 2190              		.loc 1 257 0 is_stmt 1
 2191 0036 00BB     		cbnz	r0, .L199
 259:./mqtt/source/cJSON.c **** 		if (p) out=ensure(p,len+3);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 55


 2192              		.loc 1 259 0
 2193 0038 4C1B     		subs	r4, r1, r5
 2194              	.LVL339:
 260:./mqtt/source/cJSON.c **** 		else		out=(char*)cJSON_malloc(len+3);
 2195              		.loc 1 260 0
 2196 003a 2EB1     		cbz	r6, .L200
 260:./mqtt/source/cJSON.c **** 		else		out=(char*)cJSON_malloc(len+3);
 2197              		.loc 1 260 0 is_stmt 0 discriminator 1
 2198 003c E11C     		adds	r1, r4, #3
 2199              	.LVL340:
 2200 003e 3046     		mov	r0, r6
 2201              	.LVL341:
 2202 0040 FFF7FEFF 		bl	ensure
 2203              	.LVL342:
 2204 0044 0646     		mov	r6, r0
 2205              	.LVL343:
 2206 0046 04E0     		b	.L201
 2207              	.LVL344:
 2208              	.L200:
 261:./mqtt/source/cJSON.c **** 		if (!out) return 0;
 2209              		.loc 1 261 0 is_stmt 1
 2210 0048 594B     		ldr	r3, .L234
 2211 004a 1B68     		ldr	r3, [r3]
 2212 004c E01C     		adds	r0, r4, #3
 2213              	.LVL345:
 2214 004e 9847     		blx	r3
 2215              	.LVL346:
 2216 0050 0646     		mov	r6, r0
 2217              	.LVL347:
 2218              	.L201:
 262:./mqtt/source/cJSON.c **** 		ptr2=out;*ptr2++='\"';
 2219              		.loc 1 262 0
 2220 0052 002E     		cmp	r6, #0
 2221 0054 00F0A280 		beq	.L228
 2222              	.LVL348:
 263:./mqtt/source/cJSON.c **** 		strcpy(ptr2,str);
 2223              		.loc 1 263 0
 2224 0058 771C     		adds	r7, r6, #1
 2225              	.LVL349:
 2226 005a 4FF02208 		mov	r8, #34
 2227 005e 86F80080 		strb	r8, [r6]
 264:./mqtt/source/cJSON.c **** 		ptr2[len]='\"';
 2228              		.loc 1 264 0
 2229 0062 2946     		mov	r1, r5
 2230 0064 3846     		mov	r0, r7
 2231              	.LVL350:
 2232 0066 FFF7FEFF 		bl	strcpy
 2233              	.LVL351:
 265:./mqtt/source/cJSON.c **** 		ptr2[len+1]=0;
 2234              		.loc 1 265 0
 2235 006a 07F80480 		strb	r8, [r7, r4]
 266:./mqtt/source/cJSON.c **** 		return out;
 2236              		.loc 1 266 0
 2237 006e 611C     		adds	r1, r4, #1
 2238 0070 0023     		movs	r3, #0
 2239 0072 7B54     		strb	r3, [r7, r1]
 267:./mqtt/source/cJSON.c **** 	}
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 56


 2240              		.loc 1 267 0
 2241 0074 3046     		mov	r0, r6
 2242 0076 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2243              	.LVL352:
 2244              	.L199:
 270:./mqtt/source/cJSON.c **** 	{
 2245              		.loc 1 270 0
 2246 007a 15BB     		cbnz	r5, .L229
 272:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 2247              		.loc 1 272 0
 2248 007c 26B1     		cbz	r6, .L204
 272:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 2249              		.loc 1 272 0 is_stmt 0 discriminator 1
 2250 007e 0321     		movs	r1, #3
 2251              	.LVL353:
 2252 0080 3046     		mov	r0, r6
 2253              	.LVL354:
 2254 0082 FFF7FEFF 		bl	ensure
 2255              	.LVL355:
 2256 0086 03E0     		b	.L205
 2257              	.LVL356:
 2258              	.L204:
 273:./mqtt/source/cJSON.c **** 		if (!out) return 0;
 2259              		.loc 1 273 0 is_stmt 1
 2260 0088 494B     		ldr	r3, .L234
 2261 008a 1B68     		ldr	r3, [r3]
 2262 008c 0320     		movs	r0, #3
 2263              	.LVL357:
 2264 008e 9847     		blx	r3
 2265              	.LVL358:
 2266              	.L205:
 274:./mqtt/source/cJSON.c **** 		strcpy(out,"\"\"");
 2267              		.loc 1 274 0
 2268 0090 0028     		cmp	r0, #0
 2269 0092 00F08680 		beq	.L230
 275:./mqtt/source/cJSON.c **** 		return out;
 2270              		.loc 1 275 0
 2271 0096 474B     		ldr	r3, .L234+4
 2272 0098 1A88     		ldrh	r2, [r3]	@ unaligned
 2273 009a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2274 009c 0280     		strh	r2, [r0]	@ unaligned
 2275 009e 8370     		strb	r3, [r0, #2]
 276:./mqtt/source/cJSON.c **** 	}
 2276              		.loc 1 276 0
 2277 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2278              	.LVL359:
 2279              	.L209:
 278:./mqtt/source/cJSON.c **** 	
 2280              		.loc 1 278 0 discriminator 10
 2281 00a4 3946     		mov	r1, r7
 2282 00a6 4448     		ldr	r0, .L234+8
 2283 00a8 FFF7FEFF 		bl	strchr
 2284              	.LVL360:
 2285 00ac 08B1     		cbz	r0, .L206
 278:./mqtt/source/cJSON.c **** 	
 2286              		.loc 1 278 0 is_stmt 0 discriminator 2
 2287 00ae 0234     		adds	r4, r4, #2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 57


 2288              	.LVL361:
 2289 00b0 04E0     		b	.L207
 2290              	.LVL362:
 2291              	.L206:
 278:./mqtt/source/cJSON.c **** 	
 2292              		.loc 1 278 0 discriminator 3
 2293 00b2 1F2F     		cmp	r7, #31
 2294 00b4 01D8     		bhi	.L231
 278:./mqtt/source/cJSON.c **** 	
 2295              		.loc 1 278 0 discriminator 5
 2296 00b6 0634     		adds	r4, r4, #6
 2297              	.LVL363:
 2298 00b8 00E0     		b	.L207
 2299              	.LVL364:
 2300              	.L231:
 278:./mqtt/source/cJSON.c **** 	
 2301              		.loc 1 278 0
 2302 00ba 4C46     		mov	r4, r9
 2303              	.LVL365:
 2304              	.L207:
 278:./mqtt/source/cJSON.c **** 	
 2305              		.loc 1 278 0 discriminator 7
 2306 00bc 08F10108 		add	r8, r8, #1
 2307              	.LVL366:
 2308 00c0 01E0     		b	.L203
 2309              	.LVL367:
 2310              	.L229:
 2311 00c2 A846     		mov	r8, r5
 2312 00c4 0024     		movs	r4, #0
 2313              	.LVL368:
 2314              	.L203:
 278:./mqtt/source/cJSON.c **** 	
 2315              		.loc 1 278 0 discriminator 8
 2316 00c6 98F80070 		ldrb	r7, [r8]	@ zero_extendqisi2
 2317              	.LVL369:
 2318 00ca 1FB1     		cbz	r7, .L208
 2319              	.LVL370:
 278:./mqtt/source/cJSON.c **** 	
 2320              		.loc 1 278 0 discriminator 9
 2321 00cc 14F10109 		adds	r9, r4, #1
 2322              	.LVL371:
 2323 00d0 E8D1     		bne	.L209
 278:./mqtt/source/cJSON.c **** 	
 2324              		.loc 1 278 0
 2325 00d2 4C46     		mov	r4, r9
 2326              	.LVL372:
 2327              	.L208:
 280:./mqtt/source/cJSON.c **** 	else	out=(char*)cJSON_malloc(len+3);
 2328              		.loc 1 280 0 is_stmt 1
 2329 00d4 2EB1     		cbz	r6, .L210
 280:./mqtt/source/cJSON.c **** 	else	out=(char*)cJSON_malloc(len+3);
 2330              		.loc 1 280 0 is_stmt 0 discriminator 1
 2331 00d6 E11C     		adds	r1, r4, #3
 2332 00d8 3046     		mov	r0, r6
 2333 00da FFF7FEFF 		bl	ensure
 2334              	.LVL373:
 2335 00de 0646     		mov	r6, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 58


 2336              	.LVL374:
 2337 00e0 04E0     		b	.L211
 2338              	.LVL375:
 2339              	.L210:
 281:./mqtt/source/cJSON.c **** 	if (!out) return 0;
 2340              		.loc 1 281 0 is_stmt 1
 2341 00e2 334B     		ldr	r3, .L234
 2342 00e4 1B68     		ldr	r3, [r3]
 2343 00e6 E01C     		adds	r0, r4, #3
 2344 00e8 9847     		blx	r3
 2345              	.LVL376:
 2346 00ea 0646     		mov	r6, r0
 2347              	.LVL377:
 2348              	.L211:
 282:./mqtt/source/cJSON.c **** 
 2349              		.loc 1 282 0
 2350 00ec 002E     		cmp	r6, #0
 2351 00ee 5BD0     		beq	.L232
 2352              	.LVL378:
 285:./mqtt/source/cJSON.c **** 	while (*ptr)
 2353              		.loc 1 285 0
 2354 00f0 741C     		adds	r4, r6, #1
 2355              	.LVL379:
 2356 00f2 2223     		movs	r3, #34
 2357 00f4 3370     		strb	r3, [r6]
 286:./mqtt/source/cJSON.c **** 	{
 2358              		.loc 1 286 0
 2359 00f6 47E0     		b	.L212
 2360              	.LVL380:
 2361              	.L224:
 288:./mqtt/source/cJSON.c **** 		else
 2362              		.loc 1 288 0
 2363 00f8 1F2B     		cmp	r3, #31
 2364 00fa 07D9     		bls	.L213
 288:./mqtt/source/cJSON.c **** 		else
 2365              		.loc 1 288 0 is_stmt 0 discriminator 1
 2366 00fc 222B     		cmp	r3, #34
 2367 00fe 05D0     		beq	.L213
 288:./mqtt/source/cJSON.c **** 		else
 2368              		.loc 1 288 0 discriminator 2
 2369 0100 5C2B     		cmp	r3, #92
 2370 0102 03D0     		beq	.L213
 2371              	.LVL381:
 288:./mqtt/source/cJSON.c **** 		else
 2372              		.loc 1 288 0 discriminator 3
 2373 0104 0135     		adds	r5, r5, #1
 2374              	.LVL382:
 2375 0106 2370     		strb	r3, [r4]
 2376 0108 0134     		adds	r4, r4, #1
 2377              	.LVL383:
 2378 010a 3DE0     		b	.L212
 2379              	.L213:
 291:./mqtt/source/cJSON.c **** 			switch (token=*ptr++)
 2380              		.loc 1 291 0 is_stmt 1
 2381 010c 601C     		adds	r0, r4, #1
 2382              	.LVL384:
 2383 010e 5C23     		movs	r3, #92
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 59


 2384 0110 2370     		strb	r3, [r4]
 292:./mqtt/source/cJSON.c **** 			{
 2385              		.loc 1 292 0
 2386 0112 6F1C     		adds	r7, r5, #1
 2387              	.LVL385:
 2388 0114 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 2389              	.LVL386:
 2390 0116 0C2A     		cmp	r2, #12
 2391 0118 1DD0     		beq	.L216
 2392 011a 06D8     		bhi	.L217
 2393 011c 092A     		cmp	r2, #9
 2394 011e 29D0     		beq	.L218
 2395 0120 0A2A     		cmp	r2, #10
 2396 0122 1DD0     		beq	.L219
 2397 0124 082A     		cmp	r2, #8
 2398 0126 2AD1     		bne	.L215
 2399 0128 10E0     		b	.L220
 2400              	.L217:
 2401 012a 222A     		cmp	r2, #34
 2402 012c 09D0     		beq	.L221
 2403 012e 5C2A     		cmp	r2, #92
 2404 0130 02D0     		beq	.L222
 2405 0132 0D2A     		cmp	r2, #13
 2406 0134 23D1     		bne	.L215
 2407 0136 18E0     		b	.L223
 2408              	.L222:
 2409              	.LVL387:
 294:./mqtt/source/cJSON.c **** 				case '\"':	*ptr2++='\"';	break;
 2410              		.loc 1 294 0
 2411 0138 5C23     		movs	r3, #92
 2412 013a 6370     		strb	r3, [r4, #1]
 2413 013c 0234     		adds	r4, r4, #2
 2414              	.LVL388:
 292:./mqtt/source/cJSON.c **** 			{
 2415              		.loc 1 292 0
 2416 013e 3D46     		mov	r5, r7
 294:./mqtt/source/cJSON.c **** 				case '\"':	*ptr2++='\"';	break;
 2417              		.loc 1 294 0
 2418 0140 22E0     		b	.L212
 2419              	.LVL389:
 2420              	.L221:
 295:./mqtt/source/cJSON.c **** 				case '\b':	*ptr2++='b';	break;
 2421              		.loc 1 295 0
 2422 0142 2223     		movs	r3, #34
 2423 0144 6370     		strb	r3, [r4, #1]
 2424 0146 0234     		adds	r4, r4, #2
 2425              	.LVL390:
 292:./mqtt/source/cJSON.c **** 			{
 2426              		.loc 1 292 0
 2427 0148 3D46     		mov	r5, r7
 295:./mqtt/source/cJSON.c **** 				case '\b':	*ptr2++='b';	break;
 2428              		.loc 1 295 0
 2429 014a 1DE0     		b	.L212
 2430              	.LVL391:
 2431              	.L220:
 296:./mqtt/source/cJSON.c **** 				case '\f':	*ptr2++='f';	break;
 2432              		.loc 1 296 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 60


 2433 014c 6223     		movs	r3, #98
 2434 014e 6370     		strb	r3, [r4, #1]
 2435 0150 0234     		adds	r4, r4, #2
 2436              	.LVL392:
 292:./mqtt/source/cJSON.c **** 			{
 2437              		.loc 1 292 0
 2438 0152 3D46     		mov	r5, r7
 296:./mqtt/source/cJSON.c **** 				case '\f':	*ptr2++='f';	break;
 2439              		.loc 1 296 0
 2440 0154 18E0     		b	.L212
 2441              	.LVL393:
 2442              	.L216:
 297:./mqtt/source/cJSON.c **** 				case '\n':	*ptr2++='n';	break;
 2443              		.loc 1 297 0
 2444 0156 6623     		movs	r3, #102
 2445 0158 6370     		strb	r3, [r4, #1]
 2446 015a 0234     		adds	r4, r4, #2
 2447              	.LVL394:
 292:./mqtt/source/cJSON.c **** 			{
 2448              		.loc 1 292 0
 2449 015c 3D46     		mov	r5, r7
 297:./mqtt/source/cJSON.c **** 				case '\n':	*ptr2++='n';	break;
 2450              		.loc 1 297 0
 2451 015e 13E0     		b	.L212
 2452              	.LVL395:
 2453              	.L219:
 298:./mqtt/source/cJSON.c **** 				case '\r':	*ptr2++='r';	break;
 2454              		.loc 1 298 0
 2455 0160 6E23     		movs	r3, #110
 2456 0162 6370     		strb	r3, [r4, #1]
 2457 0164 0234     		adds	r4, r4, #2
 2458              	.LVL396:
 292:./mqtt/source/cJSON.c **** 			{
 2459              		.loc 1 292 0
 2460 0166 3D46     		mov	r5, r7
 298:./mqtt/source/cJSON.c **** 				case '\r':	*ptr2++='r';	break;
 2461              		.loc 1 298 0
 2462 0168 0EE0     		b	.L212
 2463              	.LVL397:
 2464              	.L223:
 299:./mqtt/source/cJSON.c **** 				case '\t':	*ptr2++='t';	break;
 2465              		.loc 1 299 0
 2466 016a 7223     		movs	r3, #114
 2467 016c 6370     		strb	r3, [r4, #1]
 2468 016e 0234     		adds	r4, r4, #2
 2469              	.LVL398:
 292:./mqtt/source/cJSON.c **** 			{
 2470              		.loc 1 292 0
 2471 0170 3D46     		mov	r5, r7
 299:./mqtt/source/cJSON.c **** 				case '\t':	*ptr2++='t';	break;
 2472              		.loc 1 299 0
 2473 0172 09E0     		b	.L212
 2474              	.LVL399:
 2475              	.L218:
 300:./mqtt/source/cJSON.c **** 				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
 2476              		.loc 1 300 0
 2477 0174 7423     		movs	r3, #116
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 61


 2478 0176 6370     		strb	r3, [r4, #1]
 2479 0178 0234     		adds	r4, r4, #2
 2480              	.LVL400:
 292:./mqtt/source/cJSON.c **** 			{
 2481              		.loc 1 292 0
 2482 017a 3D46     		mov	r5, r7
 300:./mqtt/source/cJSON.c **** 				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
 2483              		.loc 1 300 0
 2484 017c 04E0     		b	.L212
 2485              	.LVL401:
 2486              	.L215:
 301:./mqtt/source/cJSON.c **** 			}
 2487              		.loc 1 301 0
 2488 017e 0F49     		ldr	r1, .L234+12
 2489 0180 FFF7FEFF 		bl	sprintf
 2490              	.LVL402:
 2491 0184 0634     		adds	r4, r4, #6
 2492              	.LVL403:
 292:./mqtt/source/cJSON.c **** 			{
 2493              		.loc 1 292 0
 2494 0186 3D46     		mov	r5, r7
 2495              	.LVL404:
 2496              	.L212:
 286:./mqtt/source/cJSON.c **** 	{
 2497              		.loc 1 286 0
 2498 0188 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2499 018a 002B     		cmp	r3, #0
 2500 018c B4D1     		bne	.L224
 2501              	.LVL405:
 305:./mqtt/source/cJSON.c **** 	return out;
 2502              		.loc 1 305 0
 2503 018e 2223     		movs	r3, #34
 2504 0190 2370     		strb	r3, [r4]
 2505              	.LVL406:
 2506 0192 0023     		movs	r3, #0
 2507 0194 6370     		strb	r3, [r4, #1]
 306:./mqtt/source/cJSON.c **** }
 2508              		.loc 1 306 0
 2509 0196 3046     		mov	r0, r6
 2510 0198 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2511              	.LVL407:
 2512              	.L228:
 262:./mqtt/source/cJSON.c **** 		ptr2=out;*ptr2++='\"';
 2513              		.loc 1 262 0
 2514 019c 0020     		movs	r0, #0
 2515              	.LVL408:
 2516 019e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2517              	.LVL409:
 2518              	.L230:
 274:./mqtt/source/cJSON.c **** 		strcpy(out,"\"\"");
 2519              		.loc 1 274 0
 2520 01a2 0020     		movs	r0, #0
 2521              	.LVL410:
 2522 01a4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2523              	.LVL411:
 2524              	.L232:
 282:./mqtt/source/cJSON.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 62


 2525              		.loc 1 282 0
 2526 01a8 0020     		movs	r0, #0
 2527              	.LVL412:
 307:./mqtt/source/cJSON.c **** /* Invote print_string_ptr (which is useful) on an item. */
 2528              		.loc 1 307 0
 2529 01aa BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2530              	.LVL413:
 2531              	.L235:
 2532 01ae 00BF     		.align	2
 2533              	.L234:
 2534 01b0 00000000 		.word	.LANCHOR1
 2535 01b4 30000000 		.word	.LC8
 2536 01b8 34000000 		.word	.LC9
 2537 01bc 3C000000 		.word	.LC10
 2538              		.cfi_endproc
 2539              	.LFE14:
 2541              		.section	.text.print_string,"ax",%progbits
 2542              		.align	2
 2543              		.thumb
 2544              		.thumb_func
 2546              	print_string:
 2547              	.LFB15:
 309:./mqtt/source/cJSON.c **** 
 2548              		.loc 1 309 0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              	.LVL414:
 2553 0000 08B5     		push	{r3, lr}
 2554              	.LCFI19:
 2555              		.cfi_def_cfa_offset 8
 2556              		.cfi_offset 3, -8
 2557              		.cfi_offset 14, -4
 309:./mqtt/source/cJSON.c **** 
 2558              		.loc 1 309 0
 2559 0002 0069     		ldr	r0, [r0, #16]
 2560              	.LVL415:
 2561 0004 FFF7FEFF 		bl	print_string_ptr
 2562              	.LVL416:
 2563 0008 08BD     		pop	{r3, pc}
 2564              		.cfi_endproc
 2565              	.LFE15:
 2567 000a 00BF     		.section	.text.print_object,"ax",%progbits
 2568              		.align	2
 2569              		.thumb
 2570              		.thumb_func
 2572              	print_object:
 2573              	.LFB27:
 551:./mqtt/source/cJSON.c **** 	char **entries=0,**names=0;
 2574              		.loc 1 551 0
 2575              		.cfi_startproc
 2576              		@ args = 0, pretend = 0, frame = 24
 2577              		@ frame_needed = 0, uses_anonymous_args = 0
 2578              	.LVL417:
 2579 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2580              	.LCFI20:
 2581              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 63


 2582              		.cfi_offset 4, -36
 2583              		.cfi_offset 5, -32
 2584              		.cfi_offset 6, -28
 2585              		.cfi_offset 7, -24
 2586              		.cfi_offset 8, -20
 2587              		.cfi_offset 9, -16
 2588              		.cfi_offset 10, -12
 2589              		.cfi_offset 11, -8
 2590              		.cfi_offset 14, -4
 2591 0004 87B0     		sub	sp, sp, #28
 2592              	.LCFI21:
 2593              		.cfi_def_cfa_offset 64
 2594 0006 8046     		mov	r8, r0
 2595 0008 0F46     		mov	r7, r1
 2596 000a 1446     		mov	r4, r2
 2597 000c 1E46     		mov	r6, r3
 2598              	.LVL418:
 554:./mqtt/source/cJSON.c **** 	int numentries=0,fail=0;
 2599              		.loc 1 554 0
 2600 000e 8368     		ldr	r3, [r0, #8]
 2601              	.LVL419:
 555:./mqtt/source/cJSON.c **** 	size_t tmplen=0;
 2602              		.loc 1 555 0
 2603 0010 0025     		movs	r5, #0
 558:./mqtt/source/cJSON.c **** 	/* Explicitly handle empty object case */
 2604              		.loc 1 558 0
 2605 0012 01E0     		b	.L239
 2606              	.LVL420:
 2607              	.L240:
 558:./mqtt/source/cJSON.c **** 	/* Explicitly handle empty object case */
 2608              		.loc 1 558 0 is_stmt 0 discriminator 2
 2609 0014 0135     		adds	r5, r5, #1
 2610              	.LVL421:
 2611 0016 1B68     		ldr	r3, [r3]
 2612              	.LVL422:
 2613              	.L239:
 558:./mqtt/source/cJSON.c **** 	/* Explicitly handle empty object case */
 2614              		.loc 1 558 0 discriminator 1
 2615 0018 002B     		cmp	r3, #0
 2616 001a FBD1     		bne	.L240
 560:./mqtt/source/cJSON.c **** 	{
 2617              		.loc 1 560 0 is_stmt 1
 2618 001c 3DBB     		cbnz	r5, .L241
 562:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 2619              		.loc 1 562 0
 2620 001e 3EB1     		cbz	r6, .L242
 562:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 2621              		.loc 1 562 0 is_stmt 0 discriminator 1
 2622 0020 0CB1     		cbz	r4, .L291
 562:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 2623              		.loc 1 562 0 discriminator 2
 2624 0022 391D     		adds	r1, r7, #4
 2625              	.LVL423:
 2626 0024 00E0     		b	.L243
 2627              	.LVL424:
 2628              	.L291:
 562:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 64


 2629              		.loc 1 562 0
 2630 0026 0321     		movs	r1, #3
 2631              	.LVL425:
 2632              	.L243:
 562:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 2633              		.loc 1 562 0 discriminator 5
 2634 0028 3046     		mov	r0, r6
 2635              	.LVL426:
 2636 002a FFF7FEFF 		bl	ensure
 2637              	.LVL427:
 2638 002e 06E0     		b	.L244
 2639              	.LVL428:
 2640              	.L242:
 563:./mqtt/source/cJSON.c **** 		if (!out)	return 0;
 2641              		.loc 1 563 0 is_stmt 1
 2642 0030 A44B     		ldr	r3, .L317
 2643              	.LVL429:
 2644 0032 1B68     		ldr	r3, [r3]
 2645 0034 0CB1     		cbz	r4, .L292
 563:./mqtt/source/cJSON.c **** 		if (!out)	return 0;
 2646              		.loc 1 563 0 is_stmt 0 discriminator 1
 2647 0036 381D     		adds	r0, r7, #4
 2648              	.LVL430:
 2649 0038 00E0     		b	.L245
 2650              	.LVL431:
 2651              	.L292:
 563:./mqtt/source/cJSON.c **** 		if (!out)	return 0;
 2652              		.loc 1 563 0
 2653 003a 0320     		movs	r0, #3
 2654              	.LVL432:
 2655              	.L245:
 563:./mqtt/source/cJSON.c **** 		if (!out)	return 0;
 2656              		.loc 1 563 0 discriminator 4
 2657 003c 9847     		blx	r3
 2658              	.LVL433:
 2659              	.L244:
 564:./mqtt/source/cJSON.c **** 		ptr=out;*ptr++='{';
 2660              		.loc 1 564 0 is_stmt 1
 2661 003e 0028     		cmp	r0, #0
 2662 0040 00F0C581 		beq	.L293
 2663              	.LVL434:
 565:./mqtt/source/cJSON.c **** 		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
 2664              		.loc 1 565 0
 2665 0044 431C     		adds	r3, r0, #1
 2666              	.LVL435:
 2667 0046 7B22     		movs	r2, #123
 2668 0048 0270     		strb	r2, [r0]
 566:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 2669              		.loc 1 566 0
 2670 004a 5CB1     		cbz	r4, .L247
 566:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 2671              		.loc 1 566 0 is_stmt 0 discriminator 1
 2672 004c 831C     		adds	r3, r0, #2
 2673              	.LVL436:
 2674 004e 0A22     		movs	r2, #10
 2675 0050 4270     		strb	r2, [r0, #1]
 2676 0052 0022     		movs	r2, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 65


 2677 0054 03E0     		b	.L248
 2678              	.LVL437:
 2679              	.L249:
 566:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 2680              		.loc 1 566 0 discriminator 4
 2681 0056 0921     		movs	r1, #9
 2682 0058 1970     		strb	r1, [r3]
 2683 005a 0132     		adds	r2, r2, #1
 2684              	.LVL438:
 2685 005c 0133     		adds	r3, r3, #1
 2686              	.LVL439:
 2687              	.L248:
 566:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 2688              		.loc 1 566 0 discriminator 2
 2689 005e 791E     		subs	r1, r7, #1
 2690 0060 8A42     		cmp	r2, r1
 2691 0062 F8DB     		blt	.L249
 2692              	.LVL440:
 2693              	.L247:
 567:./mqtt/source/cJSON.c **** 		return out;
 2694              		.loc 1 567 0 is_stmt 1
 2695 0064 7D22     		movs	r2, #125
 2696 0066 1A70     		strb	r2, [r3]
 2697              	.LVL441:
 2698 0068 0022     		movs	r2, #0
 2699 006a 5A70     		strb	r2, [r3, #1]
 568:./mqtt/source/cJSON.c **** 	}
 2700              		.loc 1 568 0
 2701 006c BCE1     		b	.L246
 2702              	.LVL442:
 2703              	.L241:
 570:./mqtt/source/cJSON.c **** 	{
 2704              		.loc 1 570 0
 2705 006e 002E     		cmp	r6, #0
 2706 0070 00F0A080 		beq	.L250
 573:./mqtt/source/cJSON.c **** 		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
 2707              		.loc 1 573 0
 2708 0074 D6F80890 		ldr	r9, [r6, #8]
 2709              	.LVL443:
 574:./mqtt/source/cJSON.c **** 		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 2710              		.loc 1 574 0
 2711 0078 0CB1     		cbz	r4, .L294
 2712 007a 0225     		movs	r5, #2
 2713              	.LVL444:
 2714 007c 00E0     		b	.L251
 2715              	.LVL445:
 2716              	.L294:
 2717 007e 0125     		movs	r5, #1
 2718              	.LVL446:
 2719              	.L251:
 574:./mqtt/source/cJSON.c **** 		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 2720              		.loc 1 574 0 is_stmt 0 discriminator 4
 2721 0080 691C     		adds	r1, r5, #1
 2722              	.LVL447:
 2723 0082 3046     		mov	r0, r6
 2724              	.LVL448:
 2725 0084 FFF7FEFF 		bl	ensure
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 66


 2726              	.LVL449:
 2727 0088 0028     		cmp	r0, #0
 2728 008a 00F0A281 		beq	.L295
 575:./mqtt/source/cJSON.c **** 		child=item->child;depth++;
 2729              		.loc 1 575 0 is_stmt 1
 2730 008e 421C     		adds	r2, r0, #1
 2731              	.LVL450:
 2732 0090 7B21     		movs	r1, #123
 2733 0092 0170     		strb	r1, [r0]
 2734 0094 14B1     		cbz	r4, .L252
 575:./mqtt/source/cJSON.c **** 		child=item->child;depth++;
 2735              		.loc 1 575 0 is_stmt 0 discriminator 1
 2736 0096 821C     		adds	r2, r0, #2
 2737              	.LVL451:
 2738 0098 0A21     		movs	r1, #10
 2739 009a 4170     		strb	r1, [r0, #1]
 2740              	.L252:
 575:./mqtt/source/cJSON.c **** 		child=item->child;depth++;
 2741              		.loc 1 575 0 discriminator 3
 2742 009c 0023     		movs	r3, #0
 2743 009e 1370     		strb	r3, [r2]
 2744 00a0 B368     		ldr	r3, [r6, #8]
 2745 00a2 1D44     		add	r5, r5, r3
 2746              	.LVL452:
 2747 00a4 B560     		str	r5, [r6, #8]
 576:./mqtt/source/cJSON.c **** 		while (child)
 2748              		.loc 1 576 0 is_stmt 1 discriminator 3
 2749 00a6 D8F80880 		ldr	r8, [r8, #8]
 2750              	.LVL453:
 2751 00aa 7D1C     		adds	r5, r7, #1
 2752              	.LVL454:
 2753 00ac 2346     		mov	r3, r4
 2754 00ae 4446     		mov	r4, r8
 2755              	.LVL455:
 2756 00b0 B846     		mov	r8, r7
 2757              	.LVL456:
 2758 00b2 1F46     		mov	r7, r3
 577:./mqtt/source/cJSON.c **** 		{
 2759              		.loc 1 577 0 discriminator 3
 2760 00b4 5CE0     		b	.L253
 2761              	.LVL457:
 2762              	.L261:
 579:./mqtt/source/cJSON.c **** 			{
 2763              		.loc 1 579 0
 2764 00b6 97B1     		cbz	r7, .L254
 581:./mqtt/source/cJSON.c **** 				for (j=0;j<depth;j++) *ptr++='\t';
 2765              		.loc 1 581 0
 2766 00b8 2946     		mov	r1, r5
 2767 00ba 3046     		mov	r0, r6
 2768 00bc FFF7FEFF 		bl	ensure
 2769              	.LVL458:
 2770 00c0 0246     		mov	r2, r0
 2771 00c2 0028     		cmp	r0, #0
 2772 00c4 00F08781 		beq	.L296
 2773 00c8 0023     		movs	r3, #0
 2774 00ca 03E0     		b	.L255
 2775              	.LVL459:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 67


 2776              	.L256:
 582:./mqtt/source/cJSON.c **** 				p->offset+=depth;
 2777              		.loc 1 582 0 discriminator 3
 2778 00cc 0921     		movs	r1, #9
 2779 00ce 1170     		strb	r1, [r2]
 2780 00d0 0133     		adds	r3, r3, #1
 2781              	.LVL460:
 2782 00d2 0132     		adds	r2, r2, #1
 2783              	.LVL461:
 2784              	.L255:
 582:./mqtt/source/cJSON.c **** 				p->offset+=depth;
 2785              		.loc 1 582 0 is_stmt 0 discriminator 1
 2786 00d4 AB42     		cmp	r3, r5
 2787 00d6 F9DB     		blt	.L256
 583:./mqtt/source/cJSON.c **** 			}
 2788              		.loc 1 583 0 is_stmt 1
 2789 00d8 B368     		ldr	r3, [r6, #8]
 2790              	.LVL462:
 2791 00da 2B44     		add	r3, r3, r5
 2792 00dc B360     		str	r3, [r6, #8]
 2793              	.LVL463:
 2794              	.L254:
 585:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 2795              		.loc 1 585 0
 2796 00de 3146     		mov	r1, r6
 2797 00e0 206A     		ldr	r0, [r4, #32]
 2798 00e2 FFF7FEFF 		bl	print_string_ptr
 2799              	.LVL464:
 586:./mqtt/source/cJSON.c **** 			
 2800              		.loc 1 586 0
 2801 00e6 3046     		mov	r0, r6
 2802 00e8 FFF7FEFF 		bl	update
 2803              	.LVL465:
 2804 00ec B060     		str	r0, [r6, #8]
 588:./mqtt/source/cJSON.c **** 			ptr=ensure(p,len);	if (!ptr) return 0;
 2805              		.loc 1 588 0
 2806 00ee 17B1     		cbz	r7, .L297
 2807 00f0 4FF0020A 		mov	r10, #2
 2808 00f4 01E0     		b	.L257
 2809              	.L297:
 2810 00f6 4FF0010A 		mov	r10, #1
 2811              	.L257:
 2812              	.LVL466:
 589:./mqtt/source/cJSON.c **** 			*ptr++=':';if (fmt) *ptr++='\t';
 2813              		.loc 1 589 0 discriminator 4
 2814 00fa 5146     		mov	r1, r10
 2815 00fc 3046     		mov	r0, r6
 2816 00fe FFF7FEFF 		bl	ensure
 2817              	.LVL467:
 2818 0102 0028     		cmp	r0, #0
 2819 0104 00F06981 		beq	.L298
 2820              	.LVL468:
 590:./mqtt/source/cJSON.c **** 			p->offset+=len;
 2821              		.loc 1 590 0
 2822 0108 3A22     		movs	r2, #58
 2823 010a 0270     		strb	r2, [r0]
 2824 010c 0FB1     		cbz	r7, .L258
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 68


 2825              	.LVL469:
 590:./mqtt/source/cJSON.c **** 			p->offset+=len;
 2826              		.loc 1 590 0 is_stmt 0 discriminator 1
 2827 010e 0922     		movs	r2, #9
 2828 0110 4270     		strb	r2, [r0, #1]
 2829              	.LVL470:
 2830              	.L258:
 591:./mqtt/source/cJSON.c **** 			
 2831              		.loc 1 591 0 is_stmt 1
 2832 0112 B368     		ldr	r3, [r6, #8]
 2833 0114 5344     		add	r3, r3, r10
 2834 0116 B360     		str	r3, [r6, #8]
 593:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 2835              		.loc 1 593 0
 2836 0118 3346     		mov	r3, r6
 2837 011a 3A46     		mov	r2, r7
 2838 011c 2946     		mov	r1, r5
 2839 011e 2046     		mov	r0, r4
 2840 0120 FFF7FEFF 		bl	print_value
 2841              	.LVL471:
 594:./mqtt/source/cJSON.c **** 
 2842              		.loc 1 594 0
 2843 0124 3046     		mov	r0, r6
 2844 0126 FFF7FEFF 		bl	update
 2845              	.LVL472:
 2846 012a B060     		str	r0, [r6, #8]
 596:./mqtt/source/cJSON.c **** 			ptr=ensure(p,len+1); if (!ptr) return 0;
 2847              		.loc 1 596 0
 2848 012c 2368     		ldr	r3, [r4]
 2849 012e 0033     		adds	r3, r3, #0
 2850 0130 18BF     		it	ne
 2851 0132 0123     		movne	r3, #1
 2852 0134 002F     		cmp	r7, #0
 2853 0136 0CBF     		ite	eq
 2854 0138 9A46     		moveq	r10, r3
 2855 013a 03F1010A 		addne	r10, r3, #1
 2856              	.LVL473:
 597:./mqtt/source/cJSON.c **** 			if (child->next) *ptr++=',';
 2857              		.loc 1 597 0
 2858 013e 0AF10101 		add	r1, r10, #1
 2859 0142 3046     		mov	r0, r6
 2860 0144 FFF7FEFF 		bl	ensure
 2861              	.LVL474:
 2862 0148 0028     		cmp	r0, #0
 2863 014a 00F04881 		beq	.L299
 598:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 2864              		.loc 1 598 0
 2865 014e 2368     		ldr	r3, [r4]
 2866 0150 1BB1     		cbz	r3, .L300
 598:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 2867              		.loc 1 598 0 is_stmt 0 discriminator 1
 2868 0152 431C     		adds	r3, r0, #1
 2869              	.LVL475:
 2870 0154 2C21     		movs	r1, #44
 2871 0156 0170     		strb	r1, [r0]
 2872 0158 00E0     		b	.L259
 2873              	.LVL476:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 69


 2874              	.L300:
 597:./mqtt/source/cJSON.c **** 			if (child->next) *ptr++=',';
 2875              		.loc 1 597 0 is_stmt 1
 2876 015a 0346     		mov	r3, r0
 2877              	.LVL477:
 2878              	.L259:
 599:./mqtt/source/cJSON.c **** 			p->offset+=len;
 2879              		.loc 1 599 0
 2880 015c 17B1     		cbz	r7, .L260
 2881              	.LVL478:
 599:./mqtt/source/cJSON.c **** 			p->offset+=len;
 2882              		.loc 1 599 0 is_stmt 0 discriminator 1
 2883 015e 0A22     		movs	r2, #10
 2884 0160 1A70     		strb	r2, [r3]
 2885 0162 0133     		adds	r3, r3, #1
 2886              	.LVL479:
 2887              	.L260:
 599:./mqtt/source/cJSON.c **** 			p->offset+=len;
 2888              		.loc 1 599 0 discriminator 3
 2889 0164 0022     		movs	r2, #0
 2890 0166 1A70     		strb	r2, [r3]
 600:./mqtt/source/cJSON.c **** 			child=child->next;
 2891              		.loc 1 600 0 is_stmt 1 discriminator 3
 2892 0168 B368     		ldr	r3, [r6, #8]
 2893              	.LVL480:
 2894 016a 5344     		add	r3, r3, r10
 2895 016c B360     		str	r3, [r6, #8]
 601:./mqtt/source/cJSON.c **** 		}
 2896              		.loc 1 601 0 discriminator 3
 2897 016e 2468     		ldr	r4, [r4]
 2898              	.LVL481:
 2899              	.L253:
 577:./mqtt/source/cJSON.c **** 		{
 2900              		.loc 1 577 0
 2901 0170 002C     		cmp	r4, #0
 2902 0172 A0D1     		bne	.L261
 2903 0174 3C46     		mov	r4, r7
 2904              	.LVL482:
 2905 0176 4746     		mov	r7, r8
 2906              	.LVL483:
 603:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 2907              		.loc 1 603 0
 2908 0178 0CB1     		cbz	r4, .L301
 603:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 2909              		.loc 1 603 0 is_stmt 0 discriminator 1
 2910 017a B91C     		adds	r1, r7, #2
 2911 017c 00E0     		b	.L262
 2912              	.L301:
 603:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 2913              		.loc 1 603 0
 2914 017e 0221     		movs	r1, #2
 2915              	.L262:
 603:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 2916              		.loc 1 603 0 discriminator 4
 2917 0180 3046     		mov	r0, r6
 2918 0182 FFF7FEFF 		bl	ensure
 2919              	.LVL484:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 70


 2920 0186 0346     		mov	r3, r0
 2921 0188 0028     		cmp	r0, #0
 2922 018a 00F02A81 		beq	.L302
 604:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr=0;
 2923              		.loc 1 604 0 is_stmt 1
 2924 018e 34B9     		cbnz	r4, .L303
 2925 0190 09E0     		b	.L264
 2926              	.LVL485:
 2927              	.L265:
 604:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr=0;
 2928              		.loc 1 604 0 is_stmt 0 discriminator 4
 2929 0192 0922     		movs	r2, #9
 2930 0194 1A70     		strb	r2, [r3]
 2931 0196 09F10109 		add	r9, r9, #1
 2932              	.LVL486:
 2933 019a 0133     		adds	r3, r3, #1
 2934              	.LVL487:
 2935 019c 01E0     		b	.L263
 2936              	.LVL488:
 2937              	.L303:
 2938 019e 4FF00009 		mov	r9, #0
 2939              	.LVL489:
 2940              	.L263:
 604:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr=0;
 2941              		.loc 1 604 0 discriminator 2
 2942 01a2 B945     		cmp	r9, r7
 2943 01a4 F5DB     		blt	.L265
 2944              	.L264:
 2945              	.LVL490:
 605:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 2946              		.loc 1 605 0 is_stmt 1
 2947 01a6 7D22     		movs	r2, #125
 2948 01a8 1A70     		strb	r2, [r3]
 2949 01aa 0022     		movs	r2, #0
 2950 01ac 5A70     		strb	r2, [r3, #1]
 606:./mqtt/source/cJSON.c **** 	}
 2951              		.loc 1 606 0
 2952 01ae 3068     		ldr	r0, [r6]
 2953 01b0 4844     		add	r0, r0, r9
 2954              	.LVL491:
 2955 01b2 19E1     		b	.L246
 2956              	.LVL492:
 2957              	.L250:
 611:./mqtt/source/cJSON.c **** 		if (!entries) return 0;
 2958              		.loc 1 611 0
 2959 01b4 434B     		ldr	r3, .L317
 2960              	.LVL493:
 2961 01b6 1B68     		ldr	r3, [r3]
 2962 01b8 AE00     		lsls	r6, r5, #2
 2963              	.LVL494:
 2964 01ba 3046     		mov	r0, r6
 2965              	.LVL495:
 2966 01bc 9847     		blx	r3
 2967              	.LVL496:
 612:./mqtt/source/cJSON.c **** 		names=(char**)cJSON_malloc(numentries*sizeof(char*));
 2968              		.loc 1 612 0
 2969 01be 0390     		str	r0, [sp, #12]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 71


 2970 01c0 0028     		cmp	r0, #0
 2971 01c2 00F01081 		beq	.L304
 613:./mqtt/source/cJSON.c **** 		if (!names) {cJSON_free(entries);return 0;}
 2972              		.loc 1 613 0
 2973 01c6 3F4B     		ldr	r3, .L317
 2974 01c8 1B68     		ldr	r3, [r3]
 2975 01ca 3046     		mov	r0, r6
 2976              	.LVL497:
 2977 01cc 9847     		blx	r3
 2978              	.LVL498:
 614:./mqtt/source/cJSON.c **** 		memset(entries,0,sizeof(char*)*numentries);
 2979              		.loc 1 614 0
 2980 01ce 0090     		str	r0, [sp]
 2981 01d0 28B9     		cbnz	r0, .L266
 614:./mqtt/source/cJSON.c **** 		memset(entries,0,sizeof(char*)*numentries);
 2982              		.loc 1 614 0 is_stmt 0 discriminator 1
 2983 01d2 3D4B     		ldr	r3, .L317+4
 2984 01d4 1B68     		ldr	r3, [r3]
 2985 01d6 0398     		ldr	r0, [sp, #12]
 2986              	.LVL499:
 2987 01d8 9847     		blx	r3
 2988              	.LVL500:
 2989 01da 0020     		movs	r0, #0
 2990 01dc 04E1     		b	.L246
 2991              	.LVL501:
 2992              	.L266:
 615:./mqtt/source/cJSON.c **** 		memset(names,0,sizeof(char*)*numentries);
 2993              		.loc 1 615 0 is_stmt 1
 2994 01de 3246     		mov	r2, r6
 2995 01e0 0021     		movs	r1, #0
 2996 01e2 0398     		ldr	r0, [sp, #12]
 2997              	.LVL502:
 2998 01e4 FFF7FEFF 		bl	memset
 2999              	.LVL503:
 616:./mqtt/source/cJSON.c **** 
 3000              		.loc 1 616 0
 3001 01e8 3246     		mov	r2, r6
 3002 01ea 0021     		movs	r1, #0
 3003 01ec 0098     		ldr	r0, [sp]
 3004 01ee FFF7FEFF 		bl	memset
 3005              	.LVL504:
 619:./mqtt/source/cJSON.c **** 		while (child)
 3006              		.loc 1 619 0
 3007 01f2 D8F80880 		ldr	r8, [r8, #8]
 3008              	.LVL505:
 3009 01f6 7B1C     		adds	r3, r7, #1
 3010 01f8 0293     		str	r3, [sp, #8]
 3011              	.LVL506:
 3012 01fa 14B1     		cbz	r4, .L305
 619:./mqtt/source/cJSON.c **** 		while (child)
 3013              		.loc 1 619 0 is_stmt 0 discriminator 1
 3014 01fc 07F1080B 		add	fp, r7, #8
 3015              	.LVL507:
 3016 0200 01E0     		b	.L267
 3017              	.LVL508:
 3018              	.L305:
 553:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 72


 3019              		.loc 1 553 0 is_stmt 1
 3020 0202 4FF0070B 		mov	fp, #7
 3021              	.LVL509:
 3022              	.L267:
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3023              		.loc 1 624 0
 3024 0206 0023     		movs	r3, #0
 3025              	.LVL510:
 3026 0208 0193     		str	r3, [sp, #4]
 3027 020a 9946     		mov	r9, r3
 3028 020c 4646     		mov	r6, r8
 3029 020e 0595     		str	r5, [sp, #20]
 3030 0210 DDF80CA0 		ldr	r10, [sp, #12]
 3031 0214 DDF80080 		ldr	r8, [sp]
 3032              	.LVL511:
 3033 0218 0497     		str	r7, [sp, #16]
 3034 021a 2746     		mov	r7, r4
 3035 021c 2BE0     		b	.L268
 3036              	.LVL512:
 3037              	.L271:
 622:./mqtt/source/cJSON.c **** 			entries[i++]=ret=print_value(child,depth,fmt,0);
 3038              		.loc 1 622 0
 3039 021e 4FEA8905 		lsl	r5, r9, #2
 3040 0222 0021     		movs	r1, #0
 3041 0224 306A     		ldr	r0, [r6, #32]
 3042 0226 FFF7FEFF 		bl	print_string_ptr
 3043              	.LVL513:
 3044 022a 0446     		mov	r4, r0
 3045              	.LVL514:
 3046 022c 48F82900 		str	r0, [r8, r9, lsl #2]
 623:./mqtt/source/cJSON.c **** 			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
 3047              		.loc 1 623 0
 3048 0230 0023     		movs	r3, #0
 3049 0232 3A46     		mov	r2, r7
 3050 0234 0299     		ldr	r1, [sp, #8]
 3051 0236 3046     		mov	r0, r6
 3052              	.LVL515:
 3053 0238 FFF7FEFF 		bl	print_value
 3054              	.LVL516:
 3055 023c 4AF80500 		str	r0, [r10, r5]
 3056 0240 09F10109 		add	r9, r9, #1
 3057              	.LVL517:
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3058              		.loc 1 624 0
 3059 0244 8CB1     		cbz	r4, .L306
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3060              		.loc 1 624 0 is_stmt 0 discriminator 1
 3061 0246 98B1     		cbz	r0, .L307
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3062              		.loc 1 624 0 discriminator 3
 3063 0248 FFF7FEFF 		bl	strlen
 3064              	.LVL518:
 3065 024c 0546     		mov	r5, r0
 3066 024e 2046     		mov	r0, r4
 3067 0250 FFF7FEFF 		bl	strlen
 3068              	.LVL519:
 3069 0254 2844     		add	r0, r0, r5
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 73


 3070 0256 17B1     		cbz	r7, .L308
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3071              		.loc 1 624 0 discriminator 5
 3072 0258 049B     		ldr	r3, [sp, #16]
 3073 025a 0333     		adds	r3, r3, #3
 3074 025c 00E0     		b	.L270
 3075              	.L308:
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3076              		.loc 1 624 0
 3077 025e 0023     		movs	r3, #0
 3078              	.L270:
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3079              		.loc 1 624 0 discriminator 8
 3080 0260 0344     		add	r3, r3, r0
 3081 0262 9B44     		add	fp, fp, r3
 3082              	.LVL520:
 3083 0264 0BF1020B 		add	fp, fp, #2
 3084              	.LVL521:
 3085 0268 04E0     		b	.L269
 3086              	.LVL522:
 3087              	.L306:
 624:./mqtt/source/cJSON.c **** 			child=child->next;
 3088              		.loc 1 624 0
 3089 026a 0123     		movs	r3, #1
 3090 026c 0193     		str	r3, [sp, #4]
 3091              	.LVL523:
 3092 026e 01E0     		b	.L269
 3093              	.LVL524:
 3094              	.L307:
 3095 0270 0123     		movs	r3, #1
 3096 0272 0193     		str	r3, [sp, #4]
 3097              	.LVL525:
 3098              	.L269:
 625:./mqtt/source/cJSON.c **** 		}
 3099              		.loc 1 625 0 is_stmt 1
 3100 0274 3668     		ldr	r6, [r6]
 3101              	.LVL526:
 3102              	.L268:
 620:./mqtt/source/cJSON.c **** 		{
 3103              		.loc 1 620 0
 3104 0276 002E     		cmp	r6, #0
 3105 0278 D1D1     		bne	.L271
 3106 027a 059D     		ldr	r5, [sp, #20]
 3107 027c 3C46     		mov	r4, r7
 3108 027e 049F     		ldr	r7, [sp, #16]
 3109              	.LVL527:
 629:./mqtt/source/cJSON.c **** 		if (!out) fail=1;
 3110              		.loc 1 629 0
 3111 0280 019B     		ldr	r3, [sp, #4]
 3112 0282 2BB9     		cbnz	r3, .L309
 629:./mqtt/source/cJSON.c **** 		if (!out) fail=1;
 3113              		.loc 1 629 0 is_stmt 0 discriminator 1
 3114 0284 0F4B     		ldr	r3, .L317
 3115 0286 1B68     		ldr	r3, [r3]
 3116 0288 5846     		mov	r0, fp
 3117 028a 9847     		blx	r3
 3118              	.LVL528:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 74


 3119 028c 0490     		str	r0, [sp, #16]
 3120              	.LVL529:
 3121 028e 01E0     		b	.L272
 3122              	.LVL530:
 3123              	.L309:
 553:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
 3124              		.loc 1 553 0 is_stmt 1
 3125 0290 0023     		movs	r3, #0
 3126              	.LVL531:
 3127 0292 0493     		str	r3, [sp, #16]
 3128              	.LVL532:
 3129              	.L272:
 630:./mqtt/source/cJSON.c **** 
 3130              		.loc 1 630 0
 3131 0294 049B     		ldr	r3, [sp, #16]
 3132 0296 0BB9     		cbnz	r3, .L273
 3133 0298 0123     		movs	r3, #1
 3134 029a 0193     		str	r3, [sp, #4]
 3135              	.LVL533:
 3136              	.L273:
 633:./mqtt/source/cJSON.c **** 		{
 3137              		.loc 1 633 0
 3138 029c 019B     		ldr	r3, [sp, #4]
 3139 029e 0BB3     		cbz	r3, .L315
 3140 02a0 14E0     		b	.L311
 3141              	.LVL534:
 3142              	.L278:
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3143              		.loc 1 635 0 discriminator 9
 3144 02a2 A600     		lsls	r6, r4, #2
 3145 02a4 009B     		ldr	r3, [sp]
 3146 02a6 53F82400 		ldr	r0, [r3, r4, lsl #2]
 3147 02aa 10B1     		cbz	r0, .L276
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3148              		.loc 1 635 0 is_stmt 0 discriminator 2
 3149 02ac 064B     		ldr	r3, .L317+4
 3150 02ae 1B68     		ldr	r3, [r3]
 3151 02b0 9847     		blx	r3
 3152              	.LVL535:
 3153              	.L276:
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3154              		.loc 1 635 0 discriminator 4
 3155 02b2 039B     		ldr	r3, [sp, #12]
 3156 02b4 9859     		ldr	r0, [r3, r6]
 3157 02b6 10B1     		cbz	r0, .L277
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3158              		.loc 1 635 0 discriminator 5
 3159 02b8 034B     		ldr	r3, .L317+4
 3160 02ba 1B68     		ldr	r3, [r3]
 3161 02bc 9847     		blx	r3
 3162              	.LVL536:
 3163              	.L277:
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3164              		.loc 1 635 0 discriminator 7
 3165 02be 0134     		adds	r4, r4, #1
 3166              	.LVL537:
 3167 02c0 05E0     		b	.L274
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 75


 3168              	.L318:
 3169 02c2 00BF     		.align	2
 3170              	.L317:
 3171 02c4 00000000 		.word	.LANCHOR1
 3172 02c8 00000000 		.word	.LANCHOR3
 3173              	.LVL538:
 3174              	.L311:
 3175 02cc 0024     		movs	r4, #0
 3176              	.LVL539:
 3177              	.L274:
 635:./mqtt/source/cJSON.c **** 			cJSON_free(names);cJSON_free(entries);
 3178              		.loc 1 635 0 discriminator 8
 3179 02ce AC42     		cmp	r4, r5
 3180 02d0 E7DB     		blt	.L278
 636:./mqtt/source/cJSON.c **** 			return 0;
 3181              		.loc 1 636 0 is_stmt 1
 3182 02d2 474C     		ldr	r4, .L319
 3183              	.LVL540:
 3184 02d4 2368     		ldr	r3, [r4]
 3185 02d6 0098     		ldr	r0, [sp]
 3186 02d8 9847     		blx	r3
 3187              	.LVL541:
 3188 02da 2368     		ldr	r3, [r4]
 3189 02dc 0398     		ldr	r0, [sp, #12]
 3190 02de 9847     		blx	r3
 3191              	.LVL542:
 637:./mqtt/source/cJSON.c **** 		}
 3192              		.loc 1 637 0
 3193 02e0 0020     		movs	r0, #0
 3194 02e2 81E0     		b	.L246
 3195              	.LVL543:
 3196              	.L315:
 641:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 3197              		.loc 1 641 0
 3198 02e4 049A     		ldr	r2, [sp, #16]
 3199 02e6 1646     		mov	r6, r2
 3200              	.LVL544:
 3201 02e8 7B23     		movs	r3, #123
 3202              	.LVL545:
 3203 02ea 06F8013B 		strb	r3, [r6], #1
 3204              	.LVL546:
 3205 02ee 14B1     		cbz	r4, .L279
 641:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 3206              		.loc 1 641 0 is_stmt 0 discriminator 1
 3207 02f0 961C     		adds	r6, r2, #2
 3208              	.LVL547:
 3209 02f2 0A23     		movs	r3, #10
 3210 02f4 5370     		strb	r3, [r2, #1]
 3211              	.L279:
 641:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 3212              		.loc 1 641 0 discriminator 3
 3213 02f6 4FF00008 		mov	r8, #0
 3214 02fa 86F80080 		strb	r8, [r6]
 3215              	.LVL548:
 3216 02fe 0195     		str	r5, [sp, #4]
 3217              	.LVL549:
 3218 0300 DDF80CB0 		ldr	fp, [sp, #12]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 76


 3219              	.LVL550:
 3220 0304 0597     		str	r7, [sp, #20]
 3221              	.LVL551:
 3222 0306 029F     		ldr	r7, [sp, #8]
 642:./mqtt/source/cJSON.c **** 		{
 3223              		.loc 1 642 0 is_stmt 1 discriminator 3
 3224 0308 46E0     		b	.L280
 3225              	.LVL552:
 3226              	.L287:
 644:./mqtt/source/cJSON.c **** 			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 3227              		.loc 1 644 0
 3228 030a 2CB9     		cbnz	r4, .L312
 3229 030c 07E0     		b	.L282
 3230              	.LVL553:
 3231              	.L283:
 644:./mqtt/source/cJSON.c **** 			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 3232              		.loc 1 644 0 is_stmt 0 discriminator 4
 3233 030e 0922     		movs	r2, #9
 3234 0310 3270     		strb	r2, [r6]
 3235 0312 0133     		adds	r3, r3, #1
 3236              	.LVL554:
 3237 0314 0136     		adds	r6, r6, #1
 3238              	.LVL555:
 3239 0316 00E0     		b	.L281
 3240              	.LVL556:
 3241              	.L312:
 3242 0318 0023     		movs	r3, #0
 3243              	.L281:
 3244              	.LVL557:
 644:./mqtt/source/cJSON.c **** 			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 3245              		.loc 1 644 0 discriminator 2
 3246 031a BB42     		cmp	r3, r7
 3247 031c F7DB     		blt	.L283
 3248              	.LVL558:
 3249              	.L282:
 645:./mqtt/source/cJSON.c **** 			*ptr++=':';if (fmt) *ptr++='\t';
 3250              		.loc 1 645 0 is_stmt 1
 3251 031e 4FEA8809 		lsl	r9, r8, #2
 3252 0322 009B     		ldr	r3, [sp]
 3253 0324 53F82850 		ldr	r5, [r3, r8, lsl #2]
 3254 0328 2846     		mov	r0, r5
 3255 032a FFF7FEFF 		bl	strlen
 3256              	.LVL559:
 3257 032e 8246     		mov	r10, r0
 3258              	.LVL560:
 3259 0330 0246     		mov	r2, r0
 3260 0332 2946     		mov	r1, r5
 3261 0334 3046     		mov	r0, r6
 3262              	.LVL561:
 3263 0336 FFF7FEFF 		bl	memcpy
 3264              	.LVL562:
 3265 033a 06EB0A02 		add	r2, r6, r10
 3266              	.LVL563:
 646:./mqtt/source/cJSON.c **** 			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
 3267              		.loc 1 646 0
 3268 033e 0AF10105 		add	r5, r10, #1
 3269 0342 3544     		add	r5, r5, r6
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 77


 3270              	.LVL564:
 3271 0344 3A23     		movs	r3, #58
 3272 0346 06F80A30 		strb	r3, [r6, r10]
 3273 034a 14B1     		cbz	r4, .L284
 646:./mqtt/source/cJSON.c **** 			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
 3274              		.loc 1 646 0 is_stmt 0 discriminator 1
 3275 034c 951C     		adds	r5, r2, #2
 3276              	.LVL565:
 3277 034e 0923     		movs	r3, #9
 3278 0350 5370     		strb	r3, [r2, #1]
 3279              	.L284:
 647:./mqtt/source/cJSON.c **** 			if (i!=numentries-1) *ptr++=',';
 3280              		.loc 1 647 0 is_stmt 1
 3281 0352 5BF80910 		ldr	r1, [fp, r9]
 3282 0356 2846     		mov	r0, r5
 3283 0358 FFF7FEFF 		bl	strcpy
 3284              	.LVL566:
 3285 035c 5BF80900 		ldr	r0, [fp, r9]
 3286 0360 FFF7FEFF 		bl	strlen
 3287              	.LVL567:
 3288 0364 2E18     		adds	r6, r5, r0
 3289              	.LVL568:
 648:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 3290              		.loc 1 648 0
 3291 0366 019B     		ldr	r3, [sp, #4]
 3292 0368 013B     		subs	r3, r3, #1
 3293 036a 9845     		cmp	r8, r3
 3294 036c 02D0     		beq	.L285
 648:./mqtt/source/cJSON.c **** 			if (fmt) *ptr++='\n';*ptr=0;
 3295              		.loc 1 648 0 is_stmt 0 discriminator 1
 3296 036e 0136     		adds	r6, r6, #1
 3297              	.LVL569:
 3298 0370 2C23     		movs	r3, #44
 3299 0372 2B54     		strb	r3, [r5, r0]
 3300              	.L285:
 649:./mqtt/source/cJSON.c **** 			cJSON_free(names[i]);cJSON_free(entries[i]);
 3301              		.loc 1 649 0 is_stmt 1
 3302 0374 14B1     		cbz	r4, .L286
 3303              	.LVL570:
 649:./mqtt/source/cJSON.c **** 			cJSON_free(names[i]);cJSON_free(entries[i]);
 3304              		.loc 1 649 0 is_stmt 0 discriminator 1
 3305 0376 0A23     		movs	r3, #10
 3306 0378 3370     		strb	r3, [r6]
 3307 037a 0136     		adds	r6, r6, #1
 3308              	.LVL571:
 3309              	.L286:
 649:./mqtt/source/cJSON.c **** 			cJSON_free(names[i]);cJSON_free(entries[i]);
 3310              		.loc 1 649 0 discriminator 3
 3311 037c 0023     		movs	r3, #0
 3312 037e 3370     		strb	r3, [r6]
 650:./mqtt/source/cJSON.c **** 		}
 3313              		.loc 1 650 0 is_stmt 1 discriminator 3
 3314 0380 1B4D     		ldr	r5, .L319
 3315 0382 2B68     		ldr	r3, [r5]
 3316 0384 009A     		ldr	r2, [sp]
 3317 0386 52F80900 		ldr	r0, [r2, r9]
 3318 038a 9847     		blx	r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 78


 3319              	.LVL572:
 3320 038c 2B68     		ldr	r3, [r5]
 3321 038e 5BF80900 		ldr	r0, [fp, r9]
 3322 0392 9847     		blx	r3
 3323              	.LVL573:
 642:./mqtt/source/cJSON.c **** 		{
 3324              		.loc 1 642 0 discriminator 3
 3325 0394 08F10108 		add	r8, r8, #1
 3326              	.LVL574:
 3327              	.L280:
 642:./mqtt/source/cJSON.c **** 		{
 3328              		.loc 1 642 0 is_stmt 0 discriminator 2
 3329 0398 019B     		ldr	r3, [sp, #4]
 3330 039a 9845     		cmp	r8, r3
 3331 039c B5DB     		blt	.L287
 3332 039e 059F     		ldr	r7, [sp, #20]
 653:./mqtt/source/cJSON.c **** 		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
 3333              		.loc 1 653 0 is_stmt 1
 3334 03a0 134D     		ldr	r5, .L319
 3335 03a2 2B68     		ldr	r3, [r5]
 3336 03a4 0098     		ldr	r0, [sp]
 3337 03a6 9847     		blx	r3
 3338              	.LVL575:
 3339 03a8 2B68     		ldr	r3, [r5]
 3340 03aa 0398     		ldr	r0, [sp, #12]
 3341 03ac 9847     		blx	r3
 3342              	.LVL576:
 654:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 3343              		.loc 1 654 0
 3344 03ae 2CB9     		cbnz	r4, .L314
 3345 03b0 07E0     		b	.L289
 3346              	.LVL577:
 3347              	.L290:
 654:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 3348              		.loc 1 654 0 is_stmt 0 discriminator 4
 3349 03b2 0922     		movs	r2, #9
 3350 03b4 3270     		strb	r2, [r6]
 3351 03b6 0133     		adds	r3, r3, #1
 3352              	.LVL578:
 3353 03b8 0136     		adds	r6, r6, #1
 3354              	.LVL579:
 3355 03ba 00E0     		b	.L288
 3356              	.LVL580:
 3357              	.L314:
 3358 03bc 0023     		movs	r3, #0
 3359              	.LVL581:
 3360              	.L288:
 654:./mqtt/source/cJSON.c **** 		*ptr++='}';*ptr++=0;
 3361              		.loc 1 654 0 discriminator 2
 3362 03be BB42     		cmp	r3, r7
 3363 03c0 F7DB     		blt	.L290
 3364              	.LVL582:
 3365              	.L289:
 655:./mqtt/source/cJSON.c **** 	}
 3366              		.loc 1 655 0 is_stmt 1
 3367 03c2 7D23     		movs	r3, #125
 3368 03c4 3370     		strb	r3, [r6]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 79


 3369              	.LVL583:
 3370 03c6 0023     		movs	r3, #0
 3371 03c8 7370     		strb	r3, [r6, #1]
 3372 03ca 0498     		ldr	r0, [sp, #16]
 3373 03cc 0CE0     		b	.L246
 3374              	.LVL584:
 3375              	.L293:
 564:./mqtt/source/cJSON.c **** 		ptr=out;*ptr++='{';
 3376              		.loc 1 564 0
 3377 03ce 0020     		movs	r0, #0
 3378              	.LVL585:
 3379 03d0 0AE0     		b	.L246
 3380              	.LVL586:
 3381              	.L295:
 574:./mqtt/source/cJSON.c **** 		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 3382              		.loc 1 574 0
 3383 03d2 0020     		movs	r0, #0
 3384              	.LVL587:
 3385 03d4 08E0     		b	.L246
 3386              	.LVL588:
 3387              	.L296:
 581:./mqtt/source/cJSON.c **** 				for (j=0;j<depth;j++) *ptr++='\t';
 3388              		.loc 1 581 0
 3389 03d6 0020     		movs	r0, #0
 3390              	.LVL589:
 3391 03d8 06E0     		b	.L246
 3392              	.LVL590:
 3393              	.L298:
 589:./mqtt/source/cJSON.c **** 			*ptr++=':';if (fmt) *ptr++='\t';
 3394              		.loc 1 589 0
 3395 03da 0020     		movs	r0, #0
 3396              	.LVL591:
 3397 03dc 04E0     		b	.L246
 3398              	.LVL592:
 3399              	.L299:
 597:./mqtt/source/cJSON.c **** 			if (child->next) *ptr++=',';
 3400              		.loc 1 597 0
 3401 03de 0020     		movs	r0, #0
 3402              	.LVL593:
 3403 03e0 02E0     		b	.L246
 3404              	.LVL594:
 3405              	.L302:
 603:./mqtt/source/cJSON.c **** 		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 3406              		.loc 1 603 0
 3407 03e2 0020     		movs	r0, #0
 3408              	.LVL595:
 3409 03e4 00E0     		b	.L246
 3410              	.LVL596:
 3411              	.L304:
 612:./mqtt/source/cJSON.c **** 		names=(char**)cJSON_malloc(numentries*sizeof(char*));
 3412              		.loc 1 612 0
 3413 03e6 0020     		movs	r0, #0
 3414              	.LVL597:
 3415              	.L246:
 658:./mqtt/source/cJSON.c **** 
 3416              		.loc 1 658 0
 3417 03e8 07B0     		add	sp, sp, #28
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 80


 3418              	.LCFI22:
 3419              		.cfi_def_cfa_offset 36
 3420              		@ sp needed
 3421 03ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3422              	.L320:
 3423 03ee 00BF     		.align	2
 3424              	.L319:
 3425 03f0 00000000 		.word	.LANCHOR3
 3426              		.cfi_endproc
 3427              	.LFE27:
 3429              		.section	.text.print_value,"ax",%progbits
 3430              		.align	2
 3431              		.thumb
 3432              		.thumb_func
 3434              	print_value:
 3435              	.LFB23:
 373:./mqtt/source/cJSON.c **** 	char *out=0;
 3436              		.loc 1 373 0
 3437              		.cfi_startproc
 3438              		@ args = 0, pretend = 0, frame = 0
 3439              		@ frame_needed = 0, uses_anonymous_args = 0
 3440              	.LVL598:
 375:./mqtt/source/cJSON.c **** 	if (p)
 3441              		.loc 1 375 0
 3442 0000 0028     		cmp	r0, #0
 3443 0002 68D0     		beq	.L340
 373:./mqtt/source/cJSON.c **** 	char *out=0;
 3444              		.loc 1 373 0
 3445 0004 10B5     		push	{r4, lr}
 3446              	.LCFI23:
 3447              		.cfi_def_cfa_offset 8
 3448              		.cfi_offset 4, -8
 3449              		.cfi_offset 14, -4
 376:./mqtt/source/cJSON.c **** 	{
 3450              		.loc 1 376 0
 3451 0006 002B     		cmp	r3, #0
 3452 0008 40D0     		beq	.L323
 378:./mqtt/source/cJSON.c **** 		{
 3453              		.loc 1 378 0
 3454 000a 047B     		ldrb	r4, [r0, #12]	@ zero_extendqisi2
 3455 000c 062C     		cmp	r4, #6
 3456 000e 64D8     		bhi	.L341
 3457 0010 DFE804F0 		tbb	[pc, r4]
 3458              	.L325:
 3459 0014 12       		.byte	(.L324-.L325)/2
 3460 0015 20       		.byte	(.L326-.L325)/2
 3461 0016 04       		.byte	(.L327-.L325)/2
 3462 0017 2E       		.byte	(.L328-.L325)/2
 3463 0018 32       		.byte	(.L329-.L325)/2
 3464 0019 36       		.byte	(.L330-.L325)/2
 3465 001a 39       		.byte	(.L331-.L325)/2
 3466 001b 00       		.p2align 1
 3467              	.L327:
 380:./mqtt/source/cJSON.c **** 			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 3468              		.loc 1 380 0
 3469 001c 0521     		movs	r1, #5
 3470              	.LVL599:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 81


 3471 001e 1846     		mov	r0, r3
 3472              	.LVL600:
 3473 0020 FFF7FEFF 		bl	ensure
 3474              	.LVL601:
 3475 0024 0346     		mov	r3, r0
 3476 0026 0028     		cmp	r0, #0
 3477 0028 59D0     		beq	.L342
 380:./mqtt/source/cJSON.c **** 			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 3478              		.loc 1 380 0 is_stmt 0 discriminator 1
 3479 002a 2F4A     		ldr	r2, .L347
 3480 002c 1068     		ldr	r0, [r2]	@ unaligned
 3481              	.LVL602:
 3482 002e 1860     		str	r0, [r3]	@ unaligned
 3483 0030 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 3484 0032 1A71     		strb	r2, [r3, #4]
 3485 0034 1846     		mov	r0, r3
 3486 0036 10BD     		pop	{r4, pc}
 3487              	.LVL603:
 3488              	.L324:
 381:./mqtt/source/cJSON.c **** 			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 3489              		.loc 1 381 0 is_stmt 1
 3490 0038 0621     		movs	r1, #6
 3491              	.LVL604:
 3492 003a 1846     		mov	r0, r3
 3493              	.LVL605:
 3494 003c FFF7FEFF 		bl	ensure
 3495              	.LVL606:
 3496 0040 0346     		mov	r3, r0
 3497 0042 0028     		cmp	r0, #0
 3498 0044 4CD0     		beq	.L343
 381:./mqtt/source/cJSON.c **** 			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 3499              		.loc 1 381 0 is_stmt 0 discriminator 1
 3500 0046 294A     		ldr	r2, .L347+4
 3501 0048 1068     		ldr	r0, [r2]	@ unaligned
 3502              	.LVL607:
 3503 004a 1860     		str	r0, [r3]	@ unaligned
 3504 004c 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3505 004e 9A80     		strh	r2, [r3, #4]	@ unaligned
 3506 0050 1846     		mov	r0, r3
 3507 0052 10BD     		pop	{r4, pc}
 3508              	.LVL608:
 3509              	.L326:
 382:./mqtt/source/cJSON.c **** 			case cJSON_Number:	out=print_number(item,p);break;
 3510              		.loc 1 382 0 is_stmt 1
 3511 0054 0521     		movs	r1, #5
 3512              	.LVL609:
 3513 0056 1846     		mov	r0, r3
 3514              	.LVL610:
 3515 0058 FFF7FEFF 		bl	ensure
 3516              	.LVL611:
 3517 005c 0346     		mov	r3, r0
 3518 005e 0028     		cmp	r0, #0
 3519 0060 3FD0     		beq	.L344
 382:./mqtt/source/cJSON.c **** 			case cJSON_Number:	out=print_number(item,p);break;
 3520              		.loc 1 382 0 is_stmt 0 discriminator 1
 3521 0062 234A     		ldr	r2, .L347+8
 3522 0064 1068     		ldr	r0, [r2]	@ unaligned
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 82


 3523              	.LVL612:
 3524 0066 1860     		str	r0, [r3]	@ unaligned
 3525 0068 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 3526 006a 1A71     		strb	r2, [r3, #4]
 3527 006c 1846     		mov	r0, r3
 3528 006e 10BD     		pop	{r4, pc}
 3529              	.LVL613:
 3530              	.L328:
 383:./mqtt/source/cJSON.c **** 			case cJSON_String:	out=print_string(item,p);break;
 3531              		.loc 1 383 0 is_stmt 1
 3532 0070 1946     		mov	r1, r3
 3533              	.LVL614:
 3534 0072 FFF7FEFF 		bl	print_number
 3535              	.LVL615:
 3536 0076 10BD     		pop	{r4, pc}
 3537              	.LVL616:
 3538              	.L329:
 384:./mqtt/source/cJSON.c **** 			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
 3539              		.loc 1 384 0
 3540 0078 1946     		mov	r1, r3
 3541              	.LVL617:
 3542 007a FFF7FEFF 		bl	print_string
 3543              	.LVL618:
 3544 007e 10BD     		pop	{r4, pc}
 3545              	.LVL619:
 3546              	.L330:
 385:./mqtt/source/cJSON.c **** 			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
 3547              		.loc 1 385 0
 3548 0080 FFF7FEFF 		bl	print_array
 3549              	.LVL620:
 3550 0084 10BD     		pop	{r4, pc}
 3551              	.LVL621:
 3552              	.L331:
 386:./mqtt/source/cJSON.c **** 		}
 3553              		.loc 1 386 0
 3554 0086 FFF7FEFF 		bl	print_object
 3555              	.LVL622:
 3556 008a 10BD     		pop	{r4, pc}
 3557              	.LVL623:
 3558              	.L323:
 391:./mqtt/source/cJSON.c **** 		{
 3559              		.loc 1 391 0
 3560 008c 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 3561              	.LVL624:
 3562 008e 062B     		cmp	r3, #6
 3563 0090 28D8     		bhi	.L345
 3564 0092 DFE803F0 		tbb	[pc, r3]
 3565              	.L333:
 3566 0096 08       		.byte	(.L332-.L333)/2
 3567 0097 0C       		.byte	(.L334-.L333)/2
 3568 0098 04       		.byte	(.L335-.L333)/2
 3569 0099 10       		.byte	(.L336-.L333)/2
 3570 009a 14       		.byte	(.L337-.L333)/2
 3571 009b 18       		.byte	(.L338-.L333)/2
 3572 009c 1C       		.byte	(.L339-.L333)/2
 3573 009d 00       		.p2align 1
 3574              	.L335:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 83


 393:./mqtt/source/cJSON.c **** 			case cJSON_False:	out=cJSON_strdup("false");break;
 3575              		.loc 1 393 0
 3576 009e 1248     		ldr	r0, .L347
 3577              	.LVL625:
 3578 00a0 FFF7FEFF 		bl	cJSON_strdup
 3579              	.LVL626:
 3580 00a4 10BD     		pop	{r4, pc}
 3581              	.LVL627:
 3582              	.L332:
 394:./mqtt/source/cJSON.c **** 			case cJSON_True:	out=cJSON_strdup("true"); break;
 3583              		.loc 1 394 0
 3584 00a6 1148     		ldr	r0, .L347+4
 3585              	.LVL628:
 3586 00a8 FFF7FEFF 		bl	cJSON_strdup
 3587              	.LVL629:
 3588 00ac 10BD     		pop	{r4, pc}
 3589              	.LVL630:
 3590              	.L334:
 395:./mqtt/source/cJSON.c **** 			case cJSON_Number:	out=print_number(item,0);break;
 3591              		.loc 1 395 0
 3592 00ae 1048     		ldr	r0, .L347+8
 3593              	.LVL631:
 3594 00b0 FFF7FEFF 		bl	cJSON_strdup
 3595              	.LVL632:
 3596 00b4 10BD     		pop	{r4, pc}
 3597              	.LVL633:
 3598              	.L336:
 396:./mqtt/source/cJSON.c **** 			case cJSON_String:	out=print_string(item,0);break;
 3599              		.loc 1 396 0
 3600 00b6 0021     		movs	r1, #0
 3601              	.LVL634:
 3602 00b8 FFF7FEFF 		bl	print_number
 3603              	.LVL635:
 3604 00bc 10BD     		pop	{r4, pc}
 3605              	.LVL636:
 3606              	.L337:
 397:./mqtt/source/cJSON.c **** 			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
 3607              		.loc 1 397 0
 3608 00be 0021     		movs	r1, #0
 3609              	.LVL637:
 3610 00c0 FFF7FEFF 		bl	print_string
 3611              	.LVL638:
 3612 00c4 10BD     		pop	{r4, pc}
 3613              	.LVL639:
 3614              	.L338:
 398:./mqtt/source/cJSON.c **** 			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
 3615              		.loc 1 398 0
 3616 00c6 0023     		movs	r3, #0
 3617 00c8 FFF7FEFF 		bl	print_array
 3618              	.LVL640:
 3619 00cc 10BD     		pop	{r4, pc}
 3620              	.LVL641:
 3621              	.L339:
 399:./mqtt/source/cJSON.c **** 		}
 3622              		.loc 1 399 0
 3623 00ce 0023     		movs	r3, #0
 3624 00d0 FFF7FEFF 		bl	print_object
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 84


 3625              	.LVL642:
 3626 00d4 10BD     		pop	{r4, pc}
 3627              	.LVL643:
 3628              	.L340:
 3629              	.LCFI24:
 3630              		.cfi_def_cfa_offset 0
 3631              		.cfi_restore 4
 3632              		.cfi_restore 14
 375:./mqtt/source/cJSON.c **** 	if (p)
 3633              		.loc 1 375 0
 3634 00d6 0020     		movs	r0, #0
 3635              	.LVL644:
 403:./mqtt/source/cJSON.c **** 
 3636              		.loc 1 403 0
 3637 00d8 7047     		bx	lr
 3638              	.LVL645:
 3639              	.L341:
 374:./mqtt/source/cJSON.c **** 	if (!item) return 0;
 3640              		.loc 1 374 0
 3641 00da 0020     		movs	r0, #0
 3642              	.LVL646:
 3643 00dc 10BD     		pop	{r4, pc}
 3644              	.LVL647:
 3645              	.L342:
 3646              	.LCFI25:
 3647              		.cfi_def_cfa_offset 8
 3648              		.cfi_offset 4, -8
 3649              		.cfi_offset 14, -4
 3650 00de 10BD     		pop	{r4, pc}
 3651              	.L343:
 3652 00e0 10BD     		pop	{r4, pc}
 3653              	.L344:
 3654 00e2 10BD     		pop	{r4, pc}
 3655              	.LVL648:
 3656              	.L345:
 3657 00e4 0020     		movs	r0, #0
 3658              	.LVL649:
 403:./mqtt/source/cJSON.c **** 
 3659              		.loc 1 403 0
 3660 00e6 10BD     		pop	{r4, pc}
 3661              	.L348:
 3662              		.align	2
 3663              	.L347:
 3664 00e8 00000000 		.word	.LC0
 3665 00ec 08000000 		.word	.LC1
 3666 00f0 10000000 		.word	.LC2
 3667              		.cfi_endproc
 3668              	.LFE23:
 3670              		.section	.text.print_array,"ax",%progbits
 3671              		.align	2
 3672              		.thumb
 3673              		.thumb_func
 3675              	print_array:
 3676              	.LFB25:
 435:./mqtt/source/cJSON.c **** 	char **entries;
 3677              		.loc 1 435 0
 3678              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 85


 3679              		@ args = 0, pretend = 0, frame = 8
 3680              		@ frame_needed = 0, uses_anonymous_args = 0
 3681              	.LVL650:
 3682 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3683              	.LCFI26:
 3684              		.cfi_def_cfa_offset 36
 3685              		.cfi_offset 4, -36
 3686              		.cfi_offset 5, -32
 3687              		.cfi_offset 6, -28
 3688              		.cfi_offset 7, -24
 3689              		.cfi_offset 8, -20
 3690              		.cfi_offset 9, -16
 3691              		.cfi_offset 10, -12
 3692              		.cfi_offset 11, -8
 3693              		.cfi_offset 14, -4
 3694 0004 83B0     		sub	sp, sp, #12
 3695              	.LCFI27:
 3696              		.cfi_def_cfa_offset 48
 3697 0006 8246     		mov	r10, r0
 3698 0008 0E46     		mov	r6, r1
 3699 000a 1546     		mov	r5, r2
 3700 000c 1F46     		mov	r7, r3
 3701              	.LVL651:
 438:./mqtt/source/cJSON.c **** 	int numentries=0,i=0,fail=0;
 3702              		.loc 1 438 0
 3703 000e 8368     		ldr	r3, [r0, #8]
 3704              	.LVL652:
 439:./mqtt/source/cJSON.c **** 	size_t tmplen=0;
 3705              		.loc 1 439 0
 3706 0010 0024     		movs	r4, #0
 443:./mqtt/source/cJSON.c **** 	/* Explicitly handle numentries==0 */
 3707              		.loc 1 443 0
 3708 0012 01E0     		b	.L350
 3709              	.LVL653:
 3710              	.L351:
 443:./mqtt/source/cJSON.c **** 	/* Explicitly handle numentries==0 */
 3711              		.loc 1 443 0 is_stmt 0 discriminator 2
 3712 0014 0134     		adds	r4, r4, #1
 3713              	.LVL654:
 3714 0016 1B68     		ldr	r3, [r3]
 3715              	.LVL655:
 3716              	.L350:
 443:./mqtt/source/cJSON.c **** 	/* Explicitly handle numentries==0 */
 3717              		.loc 1 443 0 discriminator 1
 3718 0018 002B     		cmp	r3, #0
 3719 001a FBD1     		bne	.L351
 445:./mqtt/source/cJSON.c **** 	{
 3720              		.loc 1 445 0 is_stmt 1
 3721 001c 94B9     		cbnz	r4, .L352
 447:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 3722              		.loc 1 447 0
 3723 001e 27B1     		cbz	r7, .L353
 447:./mqtt/source/cJSON.c **** 		else	out=(char*)cJSON_malloc(3);
 3724              		.loc 1 447 0 is_stmt 0 discriminator 1
 3725 0020 0321     		movs	r1, #3
 3726              	.LVL656:
 3727 0022 3846     		mov	r0, r7
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 86


 3728              	.LVL657:
 3729 0024 FFF7FEFF 		bl	ensure
 3730              	.LVL658:
 3731 0028 03E0     		b	.L354
 3732              	.LVL659:
 3733              	.L353:
 448:./mqtt/source/cJSON.c **** 		if (out) strcpy(out,"[]");
 3734              		.loc 1 448 0 is_stmt 1
 3735 002a 7A4B     		ldr	r3, .L391
 3736              	.LVL660:
 3737 002c 1B68     		ldr	r3, [r3]
 3738 002e 0320     		movs	r0, #3
 3739              	.LVL661:
 3740 0030 9847     		blx	r3
 3741              	.LVL662:
 3742              	.L354:
 449:./mqtt/source/cJSON.c **** 		return out;
 3743              		.loc 1 449 0
 3744 0032 0028     		cmp	r0, #0
 3745 0034 00F0EB80 		beq	.L355
 449:./mqtt/source/cJSON.c **** 		return out;
 3746              		.loc 1 449 0 is_stmt 0 discriminator 1
 3747 0038 774B     		ldr	r3, .L391+4
 3748 003a 1A88     		ldrh	r2, [r3]	@ unaligned
 3749 003c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3750 003e 0280     		strh	r2, [r0]	@ unaligned
 3751 0040 8370     		strb	r3, [r0, #2]
 3752 0042 E4E0     		b	.L355
 3753              	.LVL663:
 3754              	.L352:
 453:./mqtt/source/cJSON.c **** 	{
 3755              		.loc 1 453 0 is_stmt 1
 3756 0044 002F     		cmp	r7, #0
 3757 0046 47D0     		beq	.L356
 456:./mqtt/source/cJSON.c **** 		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
 3758              		.loc 1 456 0
 3759 0048 D7F80890 		ldr	r9, [r7, #8]
 3760              	.LVL664:
 457:./mqtt/source/cJSON.c **** 		child=item->child;
 3761              		.loc 1 457 0
 3762 004c 0121     		movs	r1, #1
 3763              	.LVL665:
 3764 004e 3846     		mov	r0, r7
 3765              	.LVL666:
 3766 0050 FFF7FEFF 		bl	ensure
 3767              	.LVL667:
 3768 0054 0028     		cmp	r0, #0
 3769 0056 00F0D380 		beq	.L378
 457:./mqtt/source/cJSON.c **** 		child=item->child;
 3770              		.loc 1 457 0 is_stmt 0 discriminator 2
 3771 005a 5B22     		movs	r2, #91
 3772 005c 0270     		strb	r2, [r0]
 3773 005e BB68     		ldr	r3, [r7, #8]
 3774 0060 0133     		adds	r3, r3, #1
 3775 0062 BB60     		str	r3, [r7, #8]
 458:./mqtt/source/cJSON.c **** 		while (child && !fail)
 3776              		.loc 1 458 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 87


 3777 0064 DAF80840 		ldr	r4, [r10, #8]
 3778              	.LVL668:
 459:./mqtt/source/cJSON.c **** 		{
 3779              		.loc 1 459 0 discriminator 2
 3780 0068 26E0     		b	.L357
 3781              	.LVL669:
 3782              	.L361:
 461:./mqtt/source/cJSON.c **** 			p->offset=update(p);
 3783              		.loc 1 461 0
 3784 006a 3B46     		mov	r3, r7
 3785 006c 2A46     		mov	r2, r5
 3786 006e 711C     		adds	r1, r6, #1
 3787 0070 2046     		mov	r0, r4
 3788 0072 FFF7FEFF 		bl	print_value
 3789              	.LVL670:
 462:./mqtt/source/cJSON.c **** 			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' 
 3790              		.loc 1 462 0
 3791 0076 3846     		mov	r0, r7
 3792 0078 FFF7FEFF 		bl	update
 3793              	.LVL671:
 3794 007c B860     		str	r0, [r7, #8]
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3795              		.loc 1 463 0
 3796 007e 2368     		ldr	r3, [r4]
 3797 0080 CBB1     		cbz	r3, .L358
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3798              		.loc 1 463 0 is_stmt 0 discriminator 1
 3799 0082 15B1     		cbz	r5, .L379
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3800              		.loc 1 463 0
 3801 0084 4FF00208 		mov	r8, #2
 3802 0088 01E0     		b	.L359
 3803              	.L379:
 3804 008a 4FF00108 		mov	r8, #1
 3805              	.L359:
 3806              	.LVL672:
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3807              		.loc 1 463 0 discriminator 5
 3808 008e 08F10101 		add	r1, r8, #1
 3809 0092 3846     		mov	r0, r7
 3810 0094 FFF7FEFF 		bl	ensure
 3811              	.LVL673:
 3812 0098 0028     		cmp	r0, #0
 3813 009a 00F0B380 		beq	.L380
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3814              		.loc 1 463 0 discriminator 7
 3815 009e 421C     		adds	r2, r0, #1
 3816              	.LVL674:
 3817 00a0 2C21     		movs	r1, #44
 3818 00a2 0170     		strb	r1, [r0]
 3819 00a4 15B1     		cbz	r5, .L360
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3820              		.loc 1 463 0 discriminator 8
 3821 00a6 821C     		adds	r2, r0, #2
 3822              	.LVL675:
 3823 00a8 2021     		movs	r1, #32
 3824 00aa 4170     		strb	r1, [r0, #1]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 88


 3825              	.L360:
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 3826              		.loc 1 463 0 discriminator 10
 3827 00ac 0023     		movs	r3, #0
 3828 00ae 1370     		strb	r3, [r2]
 3829 00b0 BB68     		ldr	r3, [r7, #8]
 3830 00b2 4344     		add	r3, r3, r8
 3831 00b4 BB60     		str	r3, [r7, #8]
 3832              	.LVL676:
 3833              	.L358:
 464:./mqtt/source/cJSON.c **** 		}
 3834              		.loc 1 464 0 is_stmt 1
 3835 00b6 2468     		ldr	r4, [r4]
 3836              	.LVL677:
 3837              	.L357:
 459:./mqtt/source/cJSON.c **** 		{
 3838              		.loc 1 459 0
 3839 00b8 002C     		cmp	r4, #0
 3840 00ba D6D1     		bne	.L361
 466:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 3841              		.loc 1 466 0
 3842 00bc 0221     		movs	r1, #2
 3843 00be 3846     		mov	r0, r7
 3844 00c0 FFF7FEFF 		bl	ensure
 3845              	.LVL678:
 3846 00c4 0028     		cmp	r0, #0
 3847 00c6 00F09F80 		beq	.L381
 3848              	.LVL679:
 466:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 3849              		.loc 1 466 0 is_stmt 0 discriminator 2
 3850 00ca 5D22     		movs	r2, #93
 3851 00cc 0270     		strb	r2, [r0]
 3852 00ce 0022     		movs	r2, #0
 3853 00d0 4270     		strb	r2, [r0, #1]
 467:./mqtt/source/cJSON.c **** 	}
 3854              		.loc 1 467 0 is_stmt 1 discriminator 2
 3855 00d2 3868     		ldr	r0, [r7]
 3856              	.LVL680:
 3857 00d4 4844     		add	r0, r0, r9
 3858              	.LVL681:
 3859 00d6 9AE0     		b	.L355
 3860              	.LVL682:
 3861              	.L356:
 472:./mqtt/source/cJSON.c **** 		if (!entries) return 0;
 3862              		.loc 1 472 0
 3863 00d8 4E4B     		ldr	r3, .L391
 3864              	.LVL683:
 3865 00da 1B68     		ldr	r3, [r3]
 3866 00dc A700     		lsls	r7, r4, #2
 3867              	.LVL684:
 3868 00de 3846     		mov	r0, r7
 3869              	.LVL685:
 3870 00e0 9847     		blx	r3
 3871              	.LVL686:
 473:./mqtt/source/cJSON.c **** 		memset(entries,0,numentries*sizeof(char*));
 3872              		.loc 1 473 0
 3873 00e2 8046     		mov	r8, r0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 89


 3874 00e4 0028     		cmp	r0, #0
 3875 00e6 00F09180 		beq	.L382
 474:./mqtt/source/cJSON.c **** 		/* Retrieve all the results: */
 3876              		.loc 1 474 0
 3877 00ea 3A46     		mov	r2, r7
 3878 00ec 0021     		movs	r1, #0
 3879 00ee FFF7FEFF 		bl	memset
 3880              	.LVL687:
 476:./mqtt/source/cJSON.c **** 		while (child && !fail)
 3881              		.loc 1 476 0
 3882 00f2 DAF80870 		ldr	r7, [r10, #8]
 3883              	.LVL688:
 439:./mqtt/source/cJSON.c **** 	size_t tmplen=0;
 3884              		.loc 1 439 0
 3885 00f6 4FF0000B 		mov	fp, #0
 3886 00fa D946     		mov	r9, fp
 437:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
 3887              		.loc 1 437 0
 3888 00fc 4FF0050A 		mov	r10, #5
 3889              	.LVL689:
 477:./mqtt/source/cJSON.c **** 		{
 3890              		.loc 1 477 0
 3891 0100 1BE0     		b	.L362
 3892              	.LVL690:
 3893              	.L366:
 479:./mqtt/source/cJSON.c **** 			entries[i++]=ret;
 3894              		.loc 1 479 0
 3895 0102 0023     		movs	r3, #0
 3896 0104 2A46     		mov	r2, r5
 3897 0106 711C     		adds	r1, r6, #1
 3898 0108 3846     		mov	r0, r7
 3899 010a FFF7FEFF 		bl	print_value
 3900              	.LVL691:
 480:./mqtt/source/cJSON.c **** 			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
 3901              		.loc 1 480 0
 3902 010e 09F10103 		add	r3, r9, #1
 3903 0112 0193     		str	r3, [sp, #4]
 3904              	.LVL692:
 3905 0114 48F82900 		str	r0, [r8, r9, lsl #2]
 481:./mqtt/source/cJSON.c **** 			child=child->next;
 3906              		.loc 1 481 0
 3907 0118 50B1     		cbz	r0, .L383
 481:./mqtt/source/cJSON.c **** 			child=child->next;
 3908              		.loc 1 481 0 is_stmt 0 discriminator 1
 3909 011a FFF7FEFF 		bl	strlen
 3910              	.LVL693:
 3911 011e 0DB1     		cbz	r5, .L384
 481:./mqtt/source/cJSON.c **** 			child=child->next;
 3912              		.loc 1 481 0
 3913 0120 0123     		movs	r3, #1
 3914 0122 00E0     		b	.L364
 3915              	.L384:
 3916 0124 0023     		movs	r3, #0
 3917              	.L364:
 481:./mqtt/source/cJSON.c **** 			child=child->next;
 3918              		.loc 1 481 0 discriminator 6
 3919 0126 1844     		add	r0, r0, r3
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 90


 3920 0128 8244     		add	r10, r10, r0
 3921              	.LVL694:
 3922 012a 0AF1020A 		add	r10, r10, #2
 3923              	.LVL695:
 3924 012e 01E0     		b	.L363
 3925              	.LVL696:
 3926              	.L383:
 481:./mqtt/source/cJSON.c **** 			child=child->next;
 3927              		.loc 1 481 0
 3928 0130 4FF0010B 		mov	fp, #1
 3929              	.LVL697:
 3930              	.L363:
 482:./mqtt/source/cJSON.c **** 		}
 3931              		.loc 1 482 0 is_stmt 1
 3932 0134 3F68     		ldr	r7, [r7]
 3933              	.LVL698:
 480:./mqtt/source/cJSON.c **** 			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
 3934              		.loc 1 480 0
 3935 0136 DDF80490 		ldr	r9, [sp, #4]
 3936              	.LVL699:
 3937              	.L362:
 477:./mqtt/source/cJSON.c **** 		{
 3938              		.loc 1 477 0
 3939 013a 17B1     		cbz	r7, .L365
 477:./mqtt/source/cJSON.c **** 		{
 3940              		.loc 1 477 0 is_stmt 0 discriminator 1
 3941 013c BBF1000F 		cmp	fp, #0
 3942 0140 DFD0     		beq	.L366
 3943              	.L365:
 486:./mqtt/source/cJSON.c **** 		/* If that fails, we fail. */
 3944              		.loc 1 486 0 is_stmt 1
 3945 0142 BBF1000F 		cmp	fp, #0
 3946 0146 05D1     		bne	.L385
 486:./mqtt/source/cJSON.c **** 		/* If that fails, we fail. */
 3947              		.loc 1 486 0 is_stmt 0 discriminator 1
 3948 0148 324B     		ldr	r3, .L391
 3949 014a 1B68     		ldr	r3, [r3]
 3950 014c 5046     		mov	r0, r10
 3951 014e 9847     		blx	r3
 3952              	.LVL700:
 3953 0150 0190     		str	r0, [sp, #4]
 3954              	.LVL701:
 3955 0152 01E0     		b	.L367
 3956              	.LVL702:
 3957              	.L385:
 437:./mqtt/source/cJSON.c **** 	cJSON *child=item->child;
 3958              		.loc 1 437 0 is_stmt 1
 3959 0154 0023     		movs	r3, #0
 3960 0156 0193     		str	r3, [sp, #4]
 3961              	.LVL703:
 3962              	.L367:
 488:./mqtt/source/cJSON.c **** 
 3963              		.loc 1 488 0
 3964 0158 019B     		ldr	r3, [sp, #4]
 3965 015a 0BB9     		cbnz	r3, .L368
 3966 015c 4FF0010B 		mov	fp, #1
 3967              	.LVL704:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 91


 3968              	.L368:
 491:./mqtt/source/cJSON.c **** 		{
 3969              		.loc 1 491 0
 3970 0160 BBF1000F 		cmp	fp, #0
 3971 0164 11D0     		beq	.L389
 3972 0166 07E0     		b	.L387
 3973              	.LVL705:
 3974              	.L372:
 493:./mqtt/source/cJSON.c **** 			cJSON_free(entries);
 3975              		.loc 1 493 0 discriminator 6
 3976 0168 58F82500 		ldr	r0, [r8, r5, lsl #2]
 3977 016c 10B1     		cbz	r0, .L371
 493:./mqtt/source/cJSON.c **** 			cJSON_free(entries);
 3978              		.loc 1 493 0 is_stmt 0 discriminator 2
 3979 016e 2B4B     		ldr	r3, .L391+8
 3980 0170 1B68     		ldr	r3, [r3]
 3981 0172 9847     		blx	r3
 3982              	.LVL706:
 3983              	.L371:
 493:./mqtt/source/cJSON.c **** 			cJSON_free(entries);
 3984              		.loc 1 493 0 discriminator 4
 3985 0174 0135     		adds	r5, r5, #1
 3986              	.LVL707:
 3987 0176 00E0     		b	.L369
 3988              	.LVL708:
 3989              	.L387:
 3990 0178 0025     		movs	r5, #0
 3991              	.LVL709:
 3992              	.L369:
 493:./mqtt/source/cJSON.c **** 			cJSON_free(entries);
 3993              		.loc 1 493 0 discriminator 5
 3994 017a AC42     		cmp	r4, r5
 3995 017c F4DC     		bgt	.L372
 494:./mqtt/source/cJSON.c **** 			return 0;
 3996              		.loc 1 494 0 is_stmt 1
 3997 017e 274B     		ldr	r3, .L391+8
 3998 0180 1B68     		ldr	r3, [r3]
 3999 0182 4046     		mov	r0, r8
 4000 0184 9847     		blx	r3
 4001              	.LVL710:
 495:./mqtt/source/cJSON.c **** 		}
 4002              		.loc 1 495 0
 4003 0186 0020     		movs	r0, #0
 4004 0188 41E0     		b	.L355
 4005              	.LVL711:
 4006              	.L389:
 499:./mqtt/source/cJSON.c **** 		ptr=out+1;*ptr=0;
 4007              		.loc 1 499 0
 4008 018a 019A     		ldr	r2, [sp, #4]
 4009 018c 9146     		mov	r9, r2
 4010              	.LVL712:
 4011 018e 5B23     		movs	r3, #91
 4012              	.LVL713:
 4013 0190 09F8013B 		strb	r3, [r9], #1
 4014              	.LVL714:
 500:./mqtt/source/cJSON.c **** 		for (i=0;i<numentries;i++)
 4015              		.loc 1 500 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 92


 4016 0194 0027     		movs	r7, #0
 4017              	.LVL715:
 4018 0196 5770     		strb	r7, [r2, #1]
 4019              	.LVL716:
 501:./mqtt/source/cJSON.c **** 		{
 4020              		.loc 1 501 0
 4021 0198 24E0     		b	.L373
 4022              	.LVL717:
 4023              	.L376:
 503:./mqtt/source/cJSON.c **** 			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
 4024              		.loc 1 503 0
 4025 019a 4FEA870B 		lsl	fp, r7, #2
 4026 019e 58F827A0 		ldr	r10, [r8, r7, lsl #2]
 4027 01a2 5046     		mov	r0, r10
 4028 01a4 FFF7FEFF 		bl	strlen
 4029              	.LVL718:
 4030 01a8 0646     		mov	r6, r0
 4031              	.LVL719:
 4032 01aa 0246     		mov	r2, r0
 4033 01ac 5146     		mov	r1, r10
 4034 01ae 4846     		mov	r0, r9
 4035              	.LVL720:
 4036 01b0 FFF7FEFF 		bl	memcpy
 4037              	.LVL721:
 4038 01b4 4E44     		add	r6, r6, r9
 4039              	.LVL722:
 504:./mqtt/source/cJSON.c **** 			cJSON_free(entries[i]);
 4040              		.loc 1 504 0
 4041 01b6 631E     		subs	r3, r4, #1
 4042 01b8 9F42     		cmp	r7, r3
 4043 01ba 0CD0     		beq	.L388
 504:./mqtt/source/cJSON.c **** 			cJSON_free(entries[i]);
 4044              		.loc 1 504 0 is_stmt 0 discriminator 1
 4045 01bc 06F10109 		add	r9, r6, #1
 4046              	.LVL723:
 4047 01c0 2C23     		movs	r3, #44
 4048 01c2 3370     		strb	r3, [r6]
 4049 01c4 1DB1     		cbz	r5, .L375
 504:./mqtt/source/cJSON.c **** 			cJSON_free(entries[i]);
 4050              		.loc 1 504 0 discriminator 2
 4051 01c6 06F10209 		add	r9, r6, #2
 4052              	.LVL724:
 4053 01ca 2023     		movs	r3, #32
 4054 01cc 7370     		strb	r3, [r6, #1]
 4055              	.L375:
 504:./mqtt/source/cJSON.c **** 			cJSON_free(entries[i]);
 4056              		.loc 1 504 0 discriminator 4
 4057 01ce 0023     		movs	r3, #0
 4058 01d0 89F80030 		strb	r3, [r9]
 4059 01d4 00E0     		b	.L374
 4060              	.LVL725:
 4061              	.L388:
 503:./mqtt/source/cJSON.c **** 			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
 4062              		.loc 1 503 0 is_stmt 1
 4063 01d6 B146     		mov	r9, r6
 4064              	.LVL726:
 4065              	.L374:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 93


 505:./mqtt/source/cJSON.c **** 		}
 4066              		.loc 1 505 0 discriminator 2
 4067 01d8 104B     		ldr	r3, .L391+8
 4068 01da 1B68     		ldr	r3, [r3]
 4069 01dc 58F80B00 		ldr	r0, [r8, fp]
 4070 01e0 9847     		blx	r3
 4071              	.LVL727:
 501:./mqtt/source/cJSON.c **** 		{
 4072              		.loc 1 501 0 discriminator 2
 4073 01e2 0137     		adds	r7, r7, #1
 4074              	.LVL728:
 4075              	.L373:
 501:./mqtt/source/cJSON.c **** 		{
 4076              		.loc 1 501 0 is_stmt 0 discriminator 1
 4077 01e4 BC42     		cmp	r4, r7
 4078 01e6 D8DC     		bgt	.L376
 507:./mqtt/source/cJSON.c **** 		*ptr++=']';*ptr++=0;
 4079              		.loc 1 507 0 is_stmt 1
 4080 01e8 0C4B     		ldr	r3, .L391+8
 4081 01ea 1B68     		ldr	r3, [r3]
 4082 01ec 4046     		mov	r0, r8
 4083 01ee 9847     		blx	r3
 4084              	.LVL729:
 508:./mqtt/source/cJSON.c **** 	}
 4085              		.loc 1 508 0
 4086 01f0 5D23     		movs	r3, #93
 4087 01f2 89F80030 		strb	r3, [r9]
 4088              	.LVL730:
 4089 01f6 0023     		movs	r3, #0
 4090 01f8 89F80130 		strb	r3, [r9, #1]
 4091 01fc 0198     		ldr	r0, [sp, #4]
 4092 01fe 06E0     		b	.L355
 4093              	.LVL731:
 4094              	.L378:
 457:./mqtt/source/cJSON.c **** 		child=item->child;
 4095              		.loc 1 457 0
 4096 0200 0020     		movs	r0, #0
 4097              	.LVL732:
 4098 0202 04E0     		b	.L355
 4099              	.LVL733:
 4100              	.L380:
 463:./mqtt/source/cJSON.c **** 			child=child->next;
 4101              		.loc 1 463 0
 4102 0204 0020     		movs	r0, #0
 4103              	.LVL734:
 4104 0206 02E0     		b	.L355
 4105              	.LVL735:
 4106              	.L381:
 466:./mqtt/source/cJSON.c **** 		out=(p->buffer)+i;
 4107              		.loc 1 466 0
 4108 0208 0020     		movs	r0, #0
 4109              	.LVL736:
 4110 020a 00E0     		b	.L355
 4111              	.LVL737:
 4112              	.L382:
 473:./mqtt/source/cJSON.c **** 		memset(entries,0,numentries*sizeof(char*));
 4113              		.loc 1 473 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 94


 4114 020c 0020     		movs	r0, #0
 4115              	.LVL738:
 4116              	.L355:
 511:./mqtt/source/cJSON.c **** 
 4117              		.loc 1 511 0
 4118 020e 03B0     		add	sp, sp, #12
 4119              	.LCFI28:
 4120              		.cfi_def_cfa_offset 36
 4121              		@ sp needed
 4122 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4123              	.L392:
 4124              		.align	2
 4125              	.L391:
 4126 0214 00000000 		.word	.LANCHOR1
 4127 0218 44000000 		.word	.LC11
 4128 021c 00000000 		.word	.LANCHOR3
 4129              		.cfi_endproc
 4130              	.LFE25:
 4132              		.section	.text.cJSON_strcasecmp,"ax",%progbits
 4133              		.align	2
 4134              		.thumb
 4135              		.thumb_func
 4137              	cJSON_strcasecmp:
 4138              	.LFB2:
  40:./mqtt/source/cJSON.c **** 	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 4139              		.loc 1 40 0
 4140              		.cfi_startproc
 4141              		@ args = 0, pretend = 0, frame = 0
 4142              		@ frame_needed = 0, uses_anonymous_args = 0
 4143              	.LVL739:
 4144 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4145              	.LCFI29:
 4146              		.cfi_def_cfa_offset 24
 4147              		.cfi_offset 3, -24
 4148              		.cfi_offset 4, -20
 4149              		.cfi_offset 5, -16
 4150              		.cfi_offset 6, -12
 4151              		.cfi_offset 7, -8
 4152              		.cfi_offset 14, -4
 4153 0002 0F46     		mov	r7, r1
  41:./mqtt/source/cJSON.c **** 	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 4154              		.loc 1 41 0
 4155 0004 0646     		mov	r6, r0
 4156 0006 18B9     		cbnz	r0, .L394
  41:./mqtt/source/cJSON.c **** 	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 4157              		.loc 1 41 0 is_stmt 0 discriminator 1
 4158 0008 401A     		subs	r0, r0, r1
 4159              	.LVL740:
 4160 000a 18BF     		it	ne
 4161 000c 0120     		movne	r0, #1
 4162 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4163              	.LVL741:
 4164              	.L394:
  41:./mqtt/source/cJSON.c **** 	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 4165              		.loc 1 41 0 discriminator 2
 4166 0010 21B9     		cbnz	r1, .L396
 4167 0012 32E0     		b	.L406
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 95


 4168              	.LVL742:
 4169              	.L401:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4170              		.loc 1 42 0 is_stmt 1 discriminator 12
 4171 0014 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4172 0016 93B3     		cbz	r3, .L407
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4173              		.loc 1 42 0 is_stmt 0 discriminator 2
 4174 0018 0136     		adds	r6, r6, #1
 4175              	.LVL743:
 4176 001a 0137     		adds	r7, r7, #1
 4177              	.LVL744:
 4178              	.L396:
 4179              	.LBB6:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4180              		.loc 1 42 0 discriminator 3
 4181 001c 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 4182              	.LVL745:
 4183 001e FFF7FEFF 		bl	__locale_ctype_ptr
 4184              	.LVL746:
 4185 0022 2044     		add	r0, r0, r4
 4186 0024 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 4187 0026 03F00303 		and	r3, r3, #3
 4188 002a 012B     		cmp	r3, #1
 4189 002c 02D1     		bne	.L397
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4190              		.loc 1 42 0 discriminator 4
 4191 002e 04F12005 		add	r5, r4, #32
 4192 0032 00E0     		b	.L398
 4193              	.L397:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4194              		.loc 1 42 0 discriminator 5
 4195 0034 2546     		mov	r5, r4
 4196              	.L398:
 4197              	.LBE6:
 4198              	.LBB7:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4199              		.loc 1 42 0 discriminator 7
 4200 0036 3C78     		ldrb	r4, [r7]	@ zero_extendqisi2
 4201              	.LVL747:
 4202 0038 FFF7FEFF 		bl	__locale_ctype_ptr
 4203              	.LVL748:
 4204 003c 2044     		add	r0, r0, r4
 4205 003e 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 4206 0040 03F00303 		and	r3, r3, #3
 4207 0044 012B     		cmp	r3, #1
 4208 0046 00D1     		bne	.L400
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4209              		.loc 1 42 0 discriminator 8
 4210 0048 2034     		adds	r4, r4, #32
 4211              	.LVL749:
 4212              	.L400:
 4213              	.LBE7:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4214              		.loc 1 42 0 discriminator 11
 4215 004a A542     		cmp	r5, r4
 4216 004c E2D0     		beq	.L401
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 96


 4217              	.LBB8:
  43:./mqtt/source/cJSON.c **** }
 4218              		.loc 1 43 0 is_stmt 1
 4219 004e 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
 4220              	.LVL750:
 4221 0050 FFF7FEFF 		bl	__locale_ctype_ptr
 4222              	.LVL751:
 4223 0054 3044     		add	r0, r0, r6
 4224 0056 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 4225 0058 03F00303 		and	r3, r3, #3
 4226 005c 012B     		cmp	r3, #1
 4227 005e 00D1     		bne	.L403
  43:./mqtt/source/cJSON.c **** }
 4228              		.loc 1 43 0 is_stmt 0 discriminator 1
 4229 0060 2036     		adds	r6, r6, #32
 4230              	.LVL752:
 4231              	.L403:
 4232              	.LBE8:
 4233              	.LBB9:
  43:./mqtt/source/cJSON.c **** }
 4234              		.loc 1 43 0 discriminator 4
 4235 0062 3C78     		ldrb	r4, [r7]	@ zero_extendqisi2
 4236              	.LVL753:
 4237 0064 FFF7FEFF 		bl	__locale_ctype_ptr
 4238              	.LVL754:
 4239 0068 2044     		add	r0, r0, r4
 4240 006a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 4241 006c 03F00303 		and	r3, r3, #3
 4242 0070 012B     		cmp	r3, #1
 4243 0072 00D1     		bne	.L405
  43:./mqtt/source/cJSON.c **** }
 4244              		.loc 1 43 0 discriminator 5
 4245 0074 2034     		adds	r4, r4, #32
 4246              	.LVL755:
 4247              	.L405:
 4248              	.LBE9:
  43:./mqtt/source/cJSON.c **** }
 4249              		.loc 1 43 0 discriminator 8
 4250 0076 301B     		subs	r0, r6, r4
 4251 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4252              	.LVL756:
 4253              	.L406:
  41:./mqtt/source/cJSON.c **** 	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 4254              		.loc 1 41 0 is_stmt 1
 4255 007a 0120     		movs	r0, #1
 4256              	.LVL757:
 4257 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4258              	.LVL758:
 4259              	.L407:
  42:./mqtt/source/cJSON.c **** 	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 4260              		.loc 1 42 0
 4261 007e 0020     		movs	r0, #0
  44:./mqtt/source/cJSON.c **** 
 4262              		.loc 1 44 0
 4263 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4264              		.cfi_endproc
 4265              	.LFE2:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 97


 4267 0082 00BF     		.section	.text.cJSON_GetErrorPtr,"ax",%progbits
 4268              		.align	2
 4269              		.global	cJSON_GetErrorPtr
 4270              		.thumb
 4271              		.thumb_func
 4273              	cJSON_GetErrorPtr:
 4274              	.LFB1:
  37:./mqtt/source/cJSON.c **** 
 4275              		.loc 1 37 0
 4276              		.cfi_startproc
 4277              		@ args = 0, pretend = 0, frame = 0
 4278              		@ frame_needed = 0, uses_anonymous_args = 0
 4279              		@ link register save eliminated.
  37:./mqtt/source/cJSON.c **** 
 4280              		.loc 1 37 0
 4281 0000 014B     		ldr	r3, .L410
 4282 0002 1868     		ldr	r0, [r3]
 4283 0004 7047     		bx	lr
 4284              	.L411:
 4285 0006 00BF     		.align	2
 4286              	.L410:
 4287 0008 00000000 		.word	.LANCHOR0
 4288              		.cfi_endproc
 4289              	.LFE1:
 4291              		.section	.text.cJSON_InitHooks,"ax",%progbits
 4292              		.align	2
 4293              		.global	cJSON_InitHooks
 4294              		.thumb
 4295              		.thumb_func
 4297              	cJSON_InitHooks:
 4298              	.LFB4:
  61:./mqtt/source/cJSON.c ****     if (!hooks) { /* Reset hooks */
 4299              		.loc 1 61 0
 4300              		.cfi_startproc
 4301              		@ args = 0, pretend = 0, frame = 0
 4302              		@ frame_needed = 0, uses_anonymous_args = 0
 4303              		@ link register save eliminated.
 4304              	.LVL759:
  62:./mqtt/source/cJSON.c ****         cJSON_malloc = malloc;
 4305              		.loc 1 62 0
 4306 0000 0246     		mov	r2, r0
 4307 0002 30B9     		cbnz	r0, .L413
  63:./mqtt/source/cJSON.c ****         cJSON_free = free;
 4308              		.loc 1 63 0
 4309 0004 084A     		ldr	r2, .L417
 4310 0006 094B     		ldr	r3, .L417+4
 4311 0008 1A60     		str	r2, [r3]
  64:./mqtt/source/cJSON.c ****         return;
 4312              		.loc 1 64 0
 4313 000a 094A     		ldr	r2, .L417+8
 4314 000c 094B     		ldr	r3, .L417+12
 4315 000e 1A60     		str	r2, [r3]
  65:./mqtt/source/cJSON.c ****     }
 4316              		.loc 1 65 0
 4317 0010 7047     		bx	lr
 4318              	.L413:
  68:./mqtt/source/cJSON.c **** 	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 98


 4319              		.loc 1 68 0
 4320 0012 0368     		ldr	r3, [r0]
 4321 0014 03B9     		cbnz	r3, .L415
 4322 0016 044B     		ldr	r3, .L417
 4323              	.L415:
  68:./mqtt/source/cJSON.c **** 	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
 4324              		.loc 1 68 0 is_stmt 0 discriminator 4
 4325 0018 0449     		ldr	r1, .L417+4
 4326 001a 0B60     		str	r3, [r1]
  69:./mqtt/source/cJSON.c **** }
 4327              		.loc 1 69 0 is_stmt 1 discriminator 4
 4328 001c 5368     		ldr	r3, [r2, #4]
 4329 001e 03B9     		cbnz	r3, .L416
  69:./mqtt/source/cJSON.c **** }
 4330              		.loc 1 69 0 is_stmt 0
 4331 0020 034B     		ldr	r3, .L417+8
 4332              	.L416:
  69:./mqtt/source/cJSON.c **** }
 4333              		.loc 1 69 0 discriminator 4
 4334 0022 044A     		ldr	r2, .L417+12
 4335 0024 1360     		str	r3, [r2]
 4336 0026 7047     		bx	lr
 4337              	.L418:
 4338              		.align	2
 4339              	.L417:
 4340 0028 00000000 		.word	malloc
 4341 002c 00000000 		.word	.LANCHOR1
 4342 0030 00000000 		.word	free
 4343 0034 00000000 		.word	.LANCHOR3
 4344              		.cfi_endproc
 4345              	.LFE4:
 4347              		.section	.text.cJSON_Delete,"ax",%progbits
 4348              		.align	2
 4349              		.global	cJSON_Delete
 4350              		.thumb
 4351              		.thumb_func
 4353              	cJSON_Delete:
 4354              	.LFB6:
  82:./mqtt/source/cJSON.c **** 	cJSON *next;
 4355              		.loc 1 82 0 is_stmt 1
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 0
 4358              		@ frame_needed = 0, uses_anonymous_args = 0
 4359              	.LVL760:
 4360 0000 38B5     		push	{r3, r4, r5, lr}
 4361              	.LCFI30:
 4362              		.cfi_def_cfa_offset 16
 4363              		.cfi_offset 3, -16
 4364              		.cfi_offset 4, -12
 4365              		.cfi_offset 5, -8
 4366              		.cfi_offset 14, -4
 4367 0002 0446     		mov	r4, r0
  84:./mqtt/source/cJSON.c **** 	{
 4368              		.loc 1 84 0
 4369 0004 1FE0     		b	.L420
 4370              	.LVL761:
 4371              	.L424:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 99


  86:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 4372              		.loc 1 86 0
 4373 0006 2568     		ldr	r5, [r4]
 4374              	.LVL762:
  87:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 4375              		.loc 1 87 0
 4376 0008 E368     		ldr	r3, [r4, #12]
 4377 000a 13F4807F 		tst	r3, #256
 4378 000e 03D1     		bne	.L421
  87:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 4379              		.loc 1 87 0 is_stmt 0 discriminator 1
 4380 0010 A068     		ldr	r0, [r4, #8]
 4381 0012 08B1     		cbz	r0, .L421
  87:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 4382              		.loc 1 87 0 discriminator 2
 4383 0014 FFF7FEFF 		bl	cJSON_Delete
 4384              	.LVL763:
 4385              	.L421:
  88:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 4386              		.loc 1 88 0 is_stmt 1
 4387 0018 E368     		ldr	r3, [r4, #12]
 4388 001a 13F4807F 		tst	r3, #256
 4389 001e 04D1     		bne	.L422
  88:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 4390              		.loc 1 88 0 is_stmt 0 discriminator 1
 4391 0020 2069     		ldr	r0, [r4, #16]
 4392 0022 10B1     		cbz	r0, .L422
  88:./mqtt/source/cJSON.c **** 		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 4393              		.loc 1 88 0 discriminator 2
 4394 0024 094B     		ldr	r3, .L426
 4395 0026 1B68     		ldr	r3, [r3]
 4396 0028 9847     		blx	r3
 4397              	.LVL764:
 4398              	.L422:
  89:./mqtt/source/cJSON.c **** 		cJSON_free(c);
 4399              		.loc 1 89 0 is_stmt 1
 4400 002a E368     		ldr	r3, [r4, #12]
 4401 002c 13F4007F 		tst	r3, #512
 4402 0030 04D1     		bne	.L423
  89:./mqtt/source/cJSON.c **** 		cJSON_free(c);
 4403              		.loc 1 89 0 is_stmt 0 discriminator 1
 4404 0032 206A     		ldr	r0, [r4, #32]
 4405 0034 10B1     		cbz	r0, .L423
  89:./mqtt/source/cJSON.c **** 		cJSON_free(c);
 4406              		.loc 1 89 0 discriminator 2
 4407 0036 054B     		ldr	r3, .L426
 4408 0038 1B68     		ldr	r3, [r3]
 4409 003a 9847     		blx	r3
 4410              	.LVL765:
 4411              	.L423:
  90:./mqtt/source/cJSON.c **** 		c=next;
 4412              		.loc 1 90 0 is_stmt 1
 4413 003c 034B     		ldr	r3, .L426
 4414 003e 1B68     		ldr	r3, [r3]
 4415 0040 2046     		mov	r0, r4
 4416 0042 9847     		blx	r3
 4417              	.LVL766:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 100


  91:./mqtt/source/cJSON.c **** 	}
 4418              		.loc 1 91 0
 4419 0044 2C46     		mov	r4, r5
 4420              	.LVL767:
 4421              	.L420:
  84:./mqtt/source/cJSON.c **** 	{
 4422              		.loc 1 84 0
 4423 0046 002C     		cmp	r4, #0
 4424 0048 DDD1     		bne	.L424
  93:./mqtt/source/cJSON.c **** 
 4425              		.loc 1 93 0
 4426 004a 38BD     		pop	{r3, r4, r5, pc}
 4427              	.LVL768:
 4428              	.L427:
 4429              		.align	2
 4430              	.L426:
 4431 004c 00000000 		.word	.LANCHOR3
 4432              		.cfi_endproc
 4433              	.LFE6:
 4435              		.section	.text.cJSON_ParseWithOpts,"ax",%progbits
 4436              		.align	2
 4437              		.global	cJSON_ParseWithOpts
 4438              		.thumb
 4439              		.thumb_func
 4441              	cJSON_ParseWithOpts:
 4442              	.LFB17:
 324:./mqtt/source/cJSON.c **** 	const char *end=0;
 4443              		.loc 1 324 0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 0
 4446              		@ frame_needed = 0, uses_anonymous_args = 0
 4447              	.LVL769:
 4448 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4449              	.LCFI31:
 4450              		.cfi_def_cfa_offset 24
 4451              		.cfi_offset 3, -24
 4452              		.cfi_offset 4, -20
 4453              		.cfi_offset 5, -16
 4454              		.cfi_offset 6, -12
 4455              		.cfi_offset 7, -8
 4456              		.cfi_offset 14, -4
 4457 0002 0546     		mov	r5, r0
 4458 0004 0E46     		mov	r6, r1
 4459 0006 1746     		mov	r7, r2
 4460              	.LVL770:
 326:./mqtt/source/cJSON.c **** 	ep=0;
 4461              		.loc 1 326 0
 4462 0008 FFF7FEFF 		bl	cJSON_New_Item
 4463              	.LVL771:
 327:./mqtt/source/cJSON.c **** 	if (!c) return 0;       /* memory fail */
 4464              		.loc 1 327 0
 4465 000c 0022     		movs	r2, #0
 4466 000e 134B     		ldr	r3, .L435
 4467 0010 1A60     		str	r2, [r3]
 328:./mqtt/source/cJSON.c **** 
 4468              		.loc 1 328 0
 4469 0012 F8B1     		cbz	r0, .L432
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 101


 4470 0014 0446     		mov	r4, r0
 330:./mqtt/source/cJSON.c **** 	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 4471              		.loc 1 330 0
 4472 0016 2846     		mov	r0, r5
 4473              	.LVL772:
 4474 0018 FFF7FEFF 		bl	skip
 4475              	.LVL773:
 4476 001c 0146     		mov	r1, r0
 4477 001e 2046     		mov	r0, r4
 4478 0020 FFF7FEFF 		bl	parse_value
 4479              	.LVL774:
 331:./mqtt/source/cJSON.c **** 
 4480              		.loc 1 331 0
 4481 0024 0546     		mov	r5, r0
 4482              	.LVL775:
 4483 0026 20B9     		cbnz	r0, .L430
 331:./mqtt/source/cJSON.c **** 
 4484              		.loc 1 331 0 is_stmt 0 discriminator 1
 4485 0028 2046     		mov	r0, r4
 4486              	.LVL776:
 4487 002a FFF7FEFF 		bl	cJSON_Delete
 4488              	.LVL777:
 4489 002e 0020     		movs	r0, #0
 4490 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4491              	.LVL778:
 4492              	.L430:
 334:./mqtt/source/cJSON.c **** 	if (return_parse_end) *return_parse_end=end;
 4493              		.loc 1 334 0 is_stmt 1
 4494 0032 5FB1     		cbz	r7, .L431
 334:./mqtt/source/cJSON.c **** 	if (return_parse_end) *return_parse_end=end;
 4495              		.loc 1 334 0 is_stmt 0 discriminator 1
 4496 0034 FFF7FEFF 		bl	skip
 4497              	.LVL779:
 4498 0038 0546     		mov	r5, r0
 4499              	.LVL780:
 4500 003a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 4501 003c 33B1     		cbz	r3, .L431
 334:./mqtt/source/cJSON.c **** 	if (return_parse_end) *return_parse_end=end;
 4502              		.loc 1 334 0 discriminator 2
 4503 003e 2046     		mov	r0, r4
 4504              	.LVL781:
 4505 0040 FFF7FEFF 		bl	cJSON_Delete
 4506              	.LVL782:
 4507 0044 054B     		ldr	r3, .L435
 4508 0046 1D60     		str	r5, [r3]
 4509 0048 0020     		movs	r0, #0
 4510 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4511              	.LVL783:
 4512              	.L431:
 335:./mqtt/source/cJSON.c **** 	return c;
 4513              		.loc 1 335 0 is_stmt 1
 4514 004c 26B1     		cbz	r6, .L433
 335:./mqtt/source/cJSON.c **** 	return c;
 4515              		.loc 1 335 0 is_stmt 0 discriminator 1
 4516 004e 3560     		str	r5, [r6]
 336:./mqtt/source/cJSON.c **** }
 4517              		.loc 1 336 0 is_stmt 1 discriminator 1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 102


 4518 0050 2046     		mov	r0, r4
 4519              	.LVL784:
 4520 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4521              	.LVL785:
 4522              	.L432:
 328:./mqtt/source/cJSON.c **** 
 4523              		.loc 1 328 0
 4524 0054 0020     		movs	r0, #0
 4525              	.LVL786:
 4526 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4527              	.LVL787:
 4528              	.L433:
 336:./mqtt/source/cJSON.c **** }
 4529              		.loc 1 336 0
 4530 0058 2046     		mov	r0, r4
 4531              	.LVL788:
 337:./mqtt/source/cJSON.c **** /* Default options for cJSON_Parse */
 4532              		.loc 1 337 0
 4533 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4534              	.LVL789:
 4535              	.L436:
 4536              		.align	2
 4537              	.L435:
 4538 005c 00000000 		.word	.LANCHOR0
 4539              		.cfi_endproc
 4540              	.LFE17:
 4542              		.section	.text.cJSON_Parse,"ax",%progbits
 4543              		.align	2
 4544              		.global	cJSON_Parse
 4545              		.thumb
 4546              		.thumb_func
 4548              	cJSON_Parse:
 4549              	.LFB18:
 339:./mqtt/source/cJSON.c **** 
 4550              		.loc 1 339 0
 4551              		.cfi_startproc
 4552              		@ args = 0, pretend = 0, frame = 0
 4553              		@ frame_needed = 0, uses_anonymous_args = 0
 4554              	.LVL790:
 4555 0000 08B5     		push	{r3, lr}
 4556              	.LCFI32:
 4557              		.cfi_def_cfa_offset 8
 4558              		.cfi_offset 3, -8
 4559              		.cfi_offset 14, -4
 339:./mqtt/source/cJSON.c **** 
 4560              		.loc 1 339 0
 4561 0002 0022     		movs	r2, #0
 4562 0004 1146     		mov	r1, r2
 4563 0006 FFF7FEFF 		bl	cJSON_ParseWithOpts
 4564              	.LVL791:
 4565 000a 08BD     		pop	{r3, pc}
 4566              		.cfi_endproc
 4567              	.LFE18:
 4569              		.section	.text.cJSON_Print,"ax",%progbits
 4570              		.align	2
 4571              		.global	cJSON_Print
 4572              		.thumb
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 103


 4573              		.thumb_func
 4575              	cJSON_Print:
 4576              	.LFB19:
 342:./mqtt/source/cJSON.c **** char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}
 4577              		.loc 1 342 0
 4578              		.cfi_startproc
 4579              		@ args = 0, pretend = 0, frame = 0
 4580              		@ frame_needed = 0, uses_anonymous_args = 0
 4581              	.LVL792:
 4582 0000 08B5     		push	{r3, lr}
 4583              	.LCFI33:
 4584              		.cfi_def_cfa_offset 8
 4585              		.cfi_offset 3, -8
 4586              		.cfi_offset 14, -4
 342:./mqtt/source/cJSON.c **** char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}
 4587              		.loc 1 342 0
 4588 0002 0023     		movs	r3, #0
 4589 0004 0122     		movs	r2, #1
 4590 0006 1946     		mov	r1, r3
 4591 0008 FFF7FEFF 		bl	print_value
 4592              	.LVL793:
 4593 000c 08BD     		pop	{r3, pc}
 4594              		.cfi_endproc
 4595              	.LFE19:
 4597 000e 00BF     		.section	.text.cJSON_PrintUnformatted,"ax",%progbits
 4598              		.align	2
 4599              		.global	cJSON_PrintUnformatted
 4600              		.thumb
 4601              		.thumb_func
 4603              	cJSON_PrintUnformatted:
 4604              	.LFB20:
 343:./mqtt/source/cJSON.c **** 
 4605              		.loc 1 343 0
 4606              		.cfi_startproc
 4607              		@ args = 0, pretend = 0, frame = 0
 4608              		@ frame_needed = 0, uses_anonymous_args = 0
 4609              	.LVL794:
 4610 0000 08B5     		push	{r3, lr}
 4611              	.LCFI34:
 4612              		.cfi_def_cfa_offset 8
 4613              		.cfi_offset 3, -8
 4614              		.cfi_offset 14, -4
 343:./mqtt/source/cJSON.c **** 
 4615              		.loc 1 343 0
 4616 0002 0023     		movs	r3, #0
 4617 0004 1A46     		mov	r2, r3
 4618 0006 1946     		mov	r1, r3
 4619 0008 FFF7FEFF 		bl	print_value
 4620              	.LVL795:
 4621 000c 08BD     		pop	{r3, pc}
 4622              		.cfi_endproc
 4623              	.LFE20:
 4625 000e 00BF     		.section	.text.cJSON_PrintBuffered,"ax",%progbits
 4626              		.align	2
 4627              		.global	cJSON_PrintBuffered
 4628              		.thumb
 4629              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 104


 4631              	cJSON_PrintBuffered:
 4632              	.LFB21:
 346:./mqtt/source/cJSON.c **** 	printbuffer p;
 4633              		.loc 1 346 0
 4634              		.cfi_startproc
 4635              		@ args = 0, pretend = 0, frame = 16
 4636              		@ frame_needed = 0, uses_anonymous_args = 0
 4637              	.LVL796:
 4638 0000 70B5     		push	{r4, r5, r6, lr}
 4639              	.LCFI35:
 4640              		.cfi_def_cfa_offset 16
 4641              		.cfi_offset 4, -16
 4642              		.cfi_offset 5, -12
 4643              		.cfi_offset 6, -8
 4644              		.cfi_offset 14, -4
 4645 0002 84B0     		sub	sp, sp, #16
 4646              	.LCFI36:
 4647              		.cfi_def_cfa_offset 32
 4648 0004 0546     		mov	r5, r0
 4649 0006 0C46     		mov	r4, r1
 4650 0008 1646     		mov	r6, r2
 348:./mqtt/source/cJSON.c **** 	p.length=prebuffer;
 4651              		.loc 1 348 0
 4652 000a 074B     		ldr	r3, .L445
 4653 000c 1B68     		ldr	r3, [r3]
 4654 000e 0846     		mov	r0, r1
 4655              	.LVL797:
 4656 0010 9847     		blx	r3
 4657              	.LVL798:
 4658 0012 0190     		str	r0, [sp, #4]
 349:./mqtt/source/cJSON.c **** 	p.offset=0;
 4659              		.loc 1 349 0
 4660 0014 0294     		str	r4, [sp, #8]
 350:./mqtt/source/cJSON.c **** 	return print_value(item,0,fmt,&p);
 4661              		.loc 1 350 0
 4662 0016 0021     		movs	r1, #0
 4663 0018 0391     		str	r1, [sp, #12]
 351:./mqtt/source/cJSON.c **** 	return p.buffer;
 4664              		.loc 1 351 0
 4665 001a 01AB     		add	r3, sp, #4
 4666 001c 3246     		mov	r2, r6
 4667 001e 2846     		mov	r0, r5
 4668 0020 FFF7FEFF 		bl	print_value
 4669              	.LVL799:
 353:./mqtt/source/cJSON.c **** 
 4670              		.loc 1 353 0
 4671 0024 04B0     		add	sp, sp, #16
 4672              	.LCFI37:
 4673              		.cfi_def_cfa_offset 16
 4674              		@ sp needed
 4675 0026 70BD     		pop	{r4, r5, r6, pc}
 4676              	.LVL800:
 4677              	.L446:
 4678              		.align	2
 4679              	.L445:
 4680 0028 00000000 		.word	.LANCHOR1
 4681              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 105


 4682              	.LFE21:
 4684              		.section	.text.cJSON_GetArraySize,"ax",%progbits
 4685              		.align	2
 4686              		.global	cJSON_GetArraySize
 4687              		.thumb
 4688              		.thumb_func
 4690              	cJSON_GetArraySize:
 4691              	.LFB28:
 661:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 4692              		.loc 1 661 0
 4693              		.cfi_startproc
 4694              		@ args = 0, pretend = 0, frame = 0
 4695              		@ frame_needed = 0, uses_anonymous_args = 0
 4696              		@ link register save eliminated.
 4697              	.LVL801:
 661:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 4698              		.loc 1 661 0
 4699 0000 8368     		ldr	r3, [r0, #8]
 4700              	.LVL802:
 4701 0002 0020     		movs	r0, #0
 4702              	.LVL803:
 4703 0004 01E0     		b	.L448
 4704              	.LVL804:
 4705              	.L449:
 661:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 4706              		.loc 1 661 0 is_stmt 0 discriminator 3
 4707 0006 0130     		adds	r0, r0, #1
 4708              	.LVL805:
 4709 0008 1B68     		ldr	r3, [r3]
 4710              	.LVL806:
 4711              	.L448:
 661:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 4712              		.loc 1 661 0 discriminator 1
 4713 000a 002B     		cmp	r3, #0
 4714 000c FBD1     		bne	.L449
 661:./mqtt/source/cJSON.c **** cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) it
 4715              		.loc 1 661 0
 4716 000e 7047     		bx	lr
 4717              		.cfi_endproc
 4718              	.LFE28:
 4720              		.section	.text.cJSON_GetArrayItem,"ax",%progbits
 4721              		.align	2
 4722              		.global	cJSON_GetArrayItem
 4723              		.thumb
 4724              		.thumb_func
 4726              	cJSON_GetArrayItem:
 4727              	.LFB29:
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4728              		.loc 1 662 0 is_stmt 1
 4729              		.cfi_startproc
 4730              		@ args = 0, pretend = 0, frame = 0
 4731              		@ frame_needed = 0, uses_anonymous_args = 0
 4732              		@ link register save eliminated.
 4733              	.LVL807:
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4734              		.loc 1 662 0
 4735 0000 8068     		ldr	r0, [r0, #8]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 106


 4736              	.LVL808:
 4737 0002 01E0     		b	.L451
 4738              	.L453:
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4739              		.loc 1 662 0 is_stmt 0 discriminator 5
 4740 0004 0139     		subs	r1, r1, #1
 4741              	.LVL809:
 4742 0006 0068     		ldr	r0, [r0]
 4743              	.LVL810:
 4744              	.L451:
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4745              		.loc 1 662 0 discriminator 1
 4746 0008 08B1     		cbz	r0, .L452
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4747              		.loc 1 662 0 discriminator 3
 4748 000a 0029     		cmp	r1, #0
 4749 000c FADC     		bgt	.L453
 4750              	.L452:
 662:./mqtt/source/cJSON.c **** cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && c
 4751              		.loc 1 662 0 discriminator 6
 4752 000e 7047     		bx	lr
 4753              		.cfi_endproc
 4754              	.LFE29:
 4756              		.section	.text.cJSON_GetObjectItem,"ax",%progbits
 4757              		.align	2
 4758              		.global	cJSON_GetObjectItem
 4759              		.thumb
 4760              		.thumb_func
 4762              	cJSON_GetObjectItem:
 4763              	.LFB30:
 663:./mqtt/source/cJSON.c **** 
 4764              		.loc 1 663 0 is_stmt 1
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              	.LVL811:
 4769 0000 38B5     		push	{r3, r4, r5, lr}
 4770              	.LCFI38:
 4771              		.cfi_def_cfa_offset 16
 4772              		.cfi_offset 3, -16
 4773              		.cfi_offset 4, -12
 4774              		.cfi_offset 5, -8
 4775              		.cfi_offset 14, -4
 4776 0002 0D46     		mov	r5, r1
 663:./mqtt/source/cJSON.c **** 
 4777              		.loc 1 663 0
 4778 0004 8468     		ldr	r4, [r0, #8]
 4779              	.LVL812:
 4780 0006 00E0     		b	.L455
 4781              	.LVL813:
 4782              	.L457:
 663:./mqtt/source/cJSON.c **** 
 4783              		.loc 1 663 0 is_stmt 0 discriminator 5
 4784 0008 2468     		ldr	r4, [r4]
 4785              	.LVL814:
 4786              	.L455:
 663:./mqtt/source/cJSON.c **** 
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 107


 4787              		.loc 1 663 0 discriminator 1
 4788 000a 2CB1     		cbz	r4, .L456
 663:./mqtt/source/cJSON.c **** 
 4789              		.loc 1 663 0 discriminator 3
 4790 000c 2946     		mov	r1, r5
 4791 000e 206A     		ldr	r0, [r4, #32]
 4792 0010 FFF7FEFF 		bl	cJSON_strcasecmp
 4793              	.LVL815:
 4794 0014 0028     		cmp	r0, #0
 4795 0016 F7D1     		bne	.L457
 4796              	.L456:
 663:./mqtt/source/cJSON.c **** 
 4797              		.loc 1 663 0 discriminator 6
 4798 0018 2046     		mov	r0, r4
 4799 001a 38BD     		pop	{r3, r4, r5, pc}
 4800              		.cfi_endproc
 4801              	.LFE30:
 4803              		.section	.text.cJSON_AddItemToArray,"ax",%progbits
 4804              		.align	2
 4805              		.global	cJSON_AddItemToArray
 4806              		.thumb
 4807              		.thumb_func
 4809              	cJSON_AddItemToArray:
 4810              	.LFB33:
 669:./mqtt/source/cJSON.c **** 
 670:./mqtt/source/cJSON.c **** /* Add item to array/object. */
 671:./mqtt/source/cJSON.c **** void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) retur
 4811              		.loc 1 671 0 is_stmt 1
 4812              		.cfi_startproc
 4813              		@ args = 0, pretend = 0, frame = 0
 4814              		@ frame_needed = 0, uses_anonymous_args = 0
 4815              	.LVL816:
 4816 0000 8368     		ldr	r3, [r0, #8]
 4817              	.LVL817:
 4818 0002 71B1     		cbz	r1, .L465
 4819              		.loc 1 671 0 is_stmt 0 discriminator 1
 4820 0004 10B5     		push	{r4, lr}
 4821              	.LCFI39:
 4822              		.cfi_def_cfa_offset 8
 4823              		.cfi_offset 4, -8
 4824              		.cfi_offset 14, -4
 4825 0006 0C46     		mov	r4, r1
 4826              		.loc 1 671 0 is_stmt 1 discriminator 1
 4827 0008 13B9     		cbnz	r3, .L461
 4828              		.loc 1 671 0 is_stmt 0 discriminator 2
 4829 000a 8160     		str	r1, [r0, #8]
 4830 000c 10BD     		pop	{r4, pc}
 4831              	.L463:
 4832              		.loc 1 671 0
 4833 000e 1346     		mov	r3, r2
 4834              	.LVL818:
 4835              	.L461:
 4836              		.loc 1 671 0 discriminator 3
 4837 0010 13B1     		cbz	r3, .L462
 4838              		.loc 1 671 0 discriminator 4
 4839 0012 1A68     		ldr	r2, [r3]
 4840 0014 002A     		cmp	r2, #0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 108


 4841 0016 FAD1     		bne	.L463
 4842              	.L462:
 4843 0018 2146     		mov	r1, r4
 4844              	.LVL819:
 4845              		.loc 1 671 0 discriminator 7
 4846 001a 1846     		mov	r0, r3
 4847              	.LVL820:
 4848 001c FFF7FEFF 		bl	suffix_object
 4849              	.LVL821:
 4850 0020 10BD     		pop	{r4, pc}
 4851              	.LVL822:
 4852              	.L465:
 4853              	.LCFI40:
 4854              		.cfi_def_cfa_offset 0
 4855              		.cfi_restore 4
 4856              		.cfi_restore 14
 4857 0022 7047     		bx	lr
 4858              		.cfi_endproc
 4859              	.LFE33:
 4861              		.section	.text.cJSON_AddItemToObject,"ax",%progbits
 4862              		.align	2
 4863              		.global	cJSON_AddItemToObject
 4864              		.thumb
 4865              		.thumb_func
 4867              	cJSON_AddItemToObject:
 4868              	.LFB34:
 672:./mqtt/source/cJSON.c **** void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (
 4869              		.loc 1 672 0 is_stmt 1
 4870              		.cfi_startproc
 4871              		@ args = 0, pretend = 0, frame = 0
 4872              		@ frame_needed = 0, uses_anonymous_args = 0
 4873              	.LVL823:
 4874 0000 8AB1     		cbz	r2, .L470
 4875              		.loc 1 672 0 is_stmt 0 discriminator 1
 4876 0002 70B5     		push	{r4, r5, r6, lr}
 4877              	.LCFI41:
 4878              		.cfi_def_cfa_offset 16
 4879              		.cfi_offset 4, -16
 4880              		.cfi_offset 5, -12
 4881              		.cfi_offset 6, -8
 4882              		.cfi_offset 14, -4
 4883 0004 1446     		mov	r4, r2
 4884 0006 0E46     		mov	r6, r1
 4885 0008 0546     		mov	r5, r0
 4886              		.loc 1 672 0 is_stmt 1 discriminator 1
 4887 000a 106A     		ldr	r0, [r2, #32]
 4888              	.LVL824:
 4889 000c 10B1     		cbz	r0, .L468
 4890              		.loc 1 672 0 is_stmt 0 discriminator 2
 4891 000e 064B     		ldr	r3, .L471
 4892 0010 1B68     		ldr	r3, [r3]
 4893 0012 9847     		blx	r3
 4894              	.LVL825:
 4895              	.L468:
 4896              		.loc 1 672 0 discriminator 4
 4897 0014 3046     		mov	r0, r6
 4898 0016 FFF7FEFF 		bl	cJSON_strdup
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 109


 4899              	.LVL826:
 4900 001a 2062     		str	r0, [r4, #32]
 4901 001c 2146     		mov	r1, r4
 4902 001e 2846     		mov	r0, r5
 4903 0020 FFF7FEFF 		bl	cJSON_AddItemToArray
 4904              	.LVL827:
 4905 0024 70BD     		pop	{r4, r5, r6, pc}
 4906              	.LVL828:
 4907              	.L470:
 4908              	.LCFI42:
 4909              		.cfi_def_cfa_offset 0
 4910              		.cfi_restore 4
 4911              		.cfi_restore 5
 4912              		.cfi_restore 6
 4913              		.cfi_restore 14
 4914 0026 7047     		bx	lr
 4915              	.L472:
 4916              		.align	2
 4917              	.L471:
 4918 0028 00000000 		.word	.LANCHOR3
 4919              		.cfi_endproc
 4920              	.LFE34:
 4922              		.section	.text.cJSON_AddItemToObjectCS,"ax",%progbits
 4923              		.align	2
 4924              		.global	cJSON_AddItemToObjectCS
 4925              		.thumb
 4926              		.thumb_func
 4928              	cJSON_AddItemToObjectCS:
 4929              	.LFB35:
 673:./mqtt/source/cJSON.c **** void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if
 4930              		.loc 1 673 0 is_stmt 1
 4931              		.cfi_startproc
 4932              		@ args = 0, pretend = 0, frame = 0
 4933              		@ frame_needed = 0, uses_anonymous_args = 0
 4934              	.LVL829:
 4935 0000 B2B1     		cbz	r2, .L477
 4936              		.loc 1 673 0 is_stmt 0 discriminator 1
 4937 0002 70B5     		push	{r4, r5, r6, lr}
 4938              	.LCFI43:
 4939              		.cfi_def_cfa_offset 16
 4940              		.cfi_offset 4, -16
 4941              		.cfi_offset 5, -12
 4942              		.cfi_offset 6, -8
 4943              		.cfi_offset 14, -4
 4944 0004 1446     		mov	r4, r2
 4945 0006 0D46     		mov	r5, r1
 4946 0008 0646     		mov	r6, r0
 4947              		.loc 1 673 0 is_stmt 1 discriminator 1
 4948 000a D368     		ldr	r3, [r2, #12]
 4949 000c 13F4007F 		tst	r3, #512
 4950 0010 04D1     		bne	.L475
 4951              		.loc 1 673 0 is_stmt 0 discriminator 2
 4952 0012 106A     		ldr	r0, [r2, #32]
 4953              	.LVL830:
 4954 0014 10B1     		cbz	r0, .L475
 4955              		.loc 1 673 0 discriminator 4
 4956 0016 074B     		ldr	r3, .L478
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 110


 4957 0018 1B68     		ldr	r3, [r3]
 4958 001a 9847     		blx	r3
 4959              	.LVL831:
 4960              	.L475:
 4961              		.loc 1 673 0 discriminator 6
 4962 001c 2562     		str	r5, [r4, #32]
 4963 001e E368     		ldr	r3, [r4, #12]
 4964 0020 43F40073 		orr	r3, r3, #512
 4965 0024 E360     		str	r3, [r4, #12]
 4966 0026 2146     		mov	r1, r4
 4967 0028 3046     		mov	r0, r6
 4968 002a FFF7FEFF 		bl	cJSON_AddItemToArray
 4969              	.LVL832:
 4970 002e 70BD     		pop	{r4, r5, r6, pc}
 4971              	.LVL833:
 4972              	.L477:
 4973              	.LCFI44:
 4974              		.cfi_def_cfa_offset 0
 4975              		.cfi_restore 4
 4976              		.cfi_restore 5
 4977              		.cfi_restore 6
 4978              		.cfi_restore 14
 4979 0030 7047     		bx	lr
 4980              	.L479:
 4981 0032 00BF     		.align	2
 4982              	.L478:
 4983 0034 00000000 		.word	.LANCHOR3
 4984              		.cfi_endproc
 4985              	.LFE35:
 4987              		.section	.text.cJSON_AddItemReferenceToArray,"ax",%progbits
 4988              		.align	2
 4989              		.global	cJSON_AddItemReferenceToArray
 4990              		.thumb
 4991              		.thumb_func
 4993              	cJSON_AddItemReferenceToArray:
 4994              	.LFB36:
 674:./mqtt/source/cJSON.c **** void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,crea
 4995              		.loc 1 674 0 is_stmt 1
 4996              		.cfi_startproc
 4997              		@ args = 0, pretend = 0, frame = 0
 4998              		@ frame_needed = 0, uses_anonymous_args = 0
 4999              	.LVL834:
 5000 0000 10B5     		push	{r4, lr}
 5001              	.LCFI45:
 5002              		.cfi_def_cfa_offset 8
 5003              		.cfi_offset 4, -8
 5004              		.cfi_offset 14, -4
 5005 0002 0446     		mov	r4, r0
 5006              		.loc 1 674 0
 5007 0004 0846     		mov	r0, r1
 5008              	.LVL835:
 5009 0006 FFF7FEFF 		bl	create_reference
 5010              	.LVL836:
 5011 000a 0146     		mov	r1, r0
 5012 000c 2046     		mov	r0, r4
 5013 000e FFF7FEFF 		bl	cJSON_AddItemToArray
 5014              	.LVL837:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 111


 5015 0012 10BD     		pop	{r4, pc}
 5016              		.cfi_endproc
 5017              	.LFE36:
 5019              		.section	.text.cJSON_AddItemReferenceToObject,"ax",%progbits
 5020              		.align	2
 5021              		.global	cJSON_AddItemReferenceToObject
 5022              		.thumb
 5023              		.thumb_func
 5025              	cJSON_AddItemReferenceToObject:
 5026              	.LFB37:
 675:./mqtt/source/cJSON.c **** void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToO
 5027              		.loc 1 675 0
 5028              		.cfi_startproc
 5029              		@ args = 0, pretend = 0, frame = 0
 5030              		@ frame_needed = 0, uses_anonymous_args = 0
 5031              	.LVL838:
 5032 0000 38B5     		push	{r3, r4, r5, lr}
 5033              	.LCFI46:
 5034              		.cfi_def_cfa_offset 16
 5035              		.cfi_offset 3, -16
 5036              		.cfi_offset 4, -12
 5037              		.cfi_offset 5, -8
 5038              		.cfi_offset 14, -4
 5039 0002 0446     		mov	r4, r0
 5040 0004 0D46     		mov	r5, r1
 5041              		.loc 1 675 0
 5042 0006 1046     		mov	r0, r2
 5043              	.LVL839:
 5044 0008 FFF7FEFF 		bl	create_reference
 5045              	.LVL840:
 5046 000c 0246     		mov	r2, r0
 5047 000e 2946     		mov	r1, r5
 5048 0010 2046     		mov	r0, r4
 5049 0012 FFF7FEFF 		bl	cJSON_AddItemToObject
 5050              	.LVL841:
 5051 0016 38BD     		pop	{r3, r4, r5, pc}
 5052              		.cfi_endproc
 5053              	.LFE37:
 5055              		.section	.text.cJSON_DetachItemFromArray,"ax",%progbits
 5056              		.align	2
 5057              		.global	cJSON_DetachItemFromArray
 5058              		.thumb
 5059              		.thumb_func
 5061              	cJSON_DetachItemFromArray:
 5062              	.LFB38:
 676:./mqtt/source/cJSON.c **** 
 677:./mqtt/source/cJSON.c **** cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which
 5063              		.loc 1 677 0
 5064              		.cfi_startproc
 5065              		@ args = 0, pretend = 0, frame = 0
 5066              		@ frame_needed = 0, uses_anonymous_args = 0
 5067              		@ link register save eliminated.
 5068              	.LVL842:
 5069              		.loc 1 677 0
 5070 0000 8368     		ldr	r3, [r0, #8]
 5071              	.LVL843:
 5072 0002 01E0     		b	.L485
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 112


 5073              	.L487:
 5074              		.loc 1 677 0 is_stmt 0 discriminator 5
 5075 0004 1B68     		ldr	r3, [r3]
 5076              	.LVL844:
 5077 0006 0139     		subs	r1, r1, #1
 5078              	.LVL845:
 5079              	.L485:
 5080              		.loc 1 677 0 discriminator 1
 5081 0008 0BB1     		cbz	r3, .L486
 5082              		.loc 1 677 0 discriminator 3
 5083 000a 0029     		cmp	r1, #0
 5084 000c FADC     		bgt	.L487
 5085              	.L486:
 5086              		.loc 1 677 0 discriminator 6
 5087 000e 8BB1     		cbz	r3, .L492
 678:./mqtt/source/cJSON.c **** 	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->
 5088              		.loc 1 678 0 is_stmt 1
 5089 0010 5A68     		ldr	r2, [r3, #4]
 5090 0012 0AB1     		cbz	r2, .L489
 5091              		.loc 1 678 0 is_stmt 0 discriminator 1
 5092 0014 1968     		ldr	r1, [r3]
 5093              	.LVL846:
 5094 0016 1160     		str	r1, [r2]
 5095              	.L489:
 5096              		.loc 1 678 0 discriminator 3
 5097 0018 1A68     		ldr	r2, [r3]
 5098 001a 0AB1     		cbz	r2, .L490
 5099              		.loc 1 678 0 discriminator 4
 5100 001c 5968     		ldr	r1, [r3, #4]
 5101 001e 5160     		str	r1, [r2, #4]
 5102              	.L490:
 5103              		.loc 1 678 0 discriminator 6
 5104 0020 8268     		ldr	r2, [r0, #8]
 5105 0022 9342     		cmp	r3, r2
 5106 0024 01D1     		bne	.L491
 5107              		.loc 1 678 0 discriminator 7
 5108 0026 1A68     		ldr	r2, [r3]
 5109 0028 8260     		str	r2, [r0, #8]
 5110              	.L491:
 5111              		.loc 1 678 0 discriminator 9
 5112 002a 0022     		movs	r2, #0
 5113 002c 1A60     		str	r2, [r3]
 5114 002e 5A60     		str	r2, [r3, #4]
 5115 0030 1846     		mov	r0, r3
 5116              	.LVL847:
 5117 0032 7047     		bx	lr
 5118              	.LVL848:
 5119              	.L492:
 677:./mqtt/source/cJSON.c **** 	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->
 5120              		.loc 1 677 0 is_stmt 1
 5121 0034 0020     		movs	r0, #0
 5122              	.LVL849:
 5123              		.loc 1 678 0
 5124 0036 7047     		bx	lr
 5125              		.cfi_endproc
 5126              	.LFE38:
 5128              		.section	.text.cJSON_DeleteItemFromArray,"ax",%progbits
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 113


 5129              		.align	2
 5130              		.global	cJSON_DeleteItemFromArray
 5131              		.thumb
 5132              		.thumb_func
 5134              	cJSON_DeleteItemFromArray:
 5135              	.LFB39:
 679:./mqtt/source/cJSON.c **** void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(
 5136              		.loc 1 679 0
 5137              		.cfi_startproc
 5138              		@ args = 0, pretend = 0, frame = 0
 5139              		@ frame_needed = 0, uses_anonymous_args = 0
 5140              	.LVL850:
 5141 0000 08B5     		push	{r3, lr}
 5142              	.LCFI47:
 5143              		.cfi_def_cfa_offset 8
 5144              		.cfi_offset 3, -8
 5145              		.cfi_offset 14, -4
 5146              		.loc 1 679 0
 5147 0002 FFF7FEFF 		bl	cJSON_DetachItemFromArray
 5148              	.LVL851:
 5149 0006 FFF7FEFF 		bl	cJSON_Delete
 5150              	.LVL852:
 5151 000a 08BD     		pop	{r3, pc}
 5152              		.cfi_endproc
 5153              	.LFE39:
 5155              		.section	.text.cJSON_DetachItemFromObject,"ax",%progbits
 5156              		.align	2
 5157              		.global	cJSON_DetachItemFromObject
 5158              		.thumb
 5159              		.thumb_func
 5161              	cJSON_DetachItemFromObject:
 5162              	.LFB40:
 680:./mqtt/source/cJSON.c **** cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child
 5163              		.loc 1 680 0
 5164              		.cfi_startproc
 5165              		@ args = 0, pretend = 0, frame = 0
 5166              		@ frame_needed = 0, uses_anonymous_args = 0
 5167              	.LVL853:
 5168 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5169              	.LCFI48:
 5170              		.cfi_def_cfa_offset 24
 5171              		.cfi_offset 3, -24
 5172              		.cfi_offset 4, -20
 5173              		.cfi_offset 5, -16
 5174              		.cfi_offset 6, -12
 5175              		.cfi_offset 7, -8
 5176              		.cfi_offset 14, -4
 5177 0002 0746     		mov	r7, r0
 5178 0004 0E46     		mov	r6, r1
 5179              	.LVL854:
 5180              		.loc 1 680 0
 5181 0006 8468     		ldr	r4, [r0, #8]
 5182              	.LVL855:
 5183 0008 0025     		movs	r5, #0
 5184 000a 01E0     		b	.L496
 5185              	.LVL856:
 5186              	.L498:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 114


 5187              		.loc 1 680 0 is_stmt 0 discriminator 5
 5188 000c 0135     		adds	r5, r5, #1
 5189              	.LVL857:
 5190 000e 2468     		ldr	r4, [r4]
 5191              	.LVL858:
 5192              	.L496:
 5193              		.loc 1 680 0 discriminator 1
 5194 0010 2CB1     		cbz	r4, .L497
 5195              		.loc 1 680 0 discriminator 3
 5196 0012 3146     		mov	r1, r6
 5197 0014 206A     		ldr	r0, [r4, #32]
 5198 0016 FFF7FEFF 		bl	cJSON_strcasecmp
 5199              	.LVL859:
 5200 001a 0028     		cmp	r0, #0
 5201 001c F6D1     		bne	.L498
 5202              	.L497:
 5203              		.loc 1 680 0 discriminator 6
 5204 001e 24B1     		cbz	r4, .L500
 5205              		.loc 1 680 0 discriminator 7
 5206 0020 2946     		mov	r1, r5
 5207 0022 3846     		mov	r0, r7
 5208 0024 FFF7FEFF 		bl	cJSON_DetachItemFromArray
 5209              	.LVL860:
 5210 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5211              	.LVL861:
 5212              	.L500:
 5213              		.loc 1 680 0
 5214 002a 0020     		movs	r0, #0
 5215 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5216              		.cfi_endproc
 5217              	.LFE40:
 5219 002e 00BF     		.section	.text.cJSON_DeleteItemFromObject,"ax",%progbits
 5220              		.align	2
 5221              		.global	cJSON_DeleteItemFromObject
 5222              		.thumb
 5223              		.thumb_func
 5225              	cJSON_DeleteItemFromObject:
 5226              	.LFB41:
 681:./mqtt/source/cJSON.c **** void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemF
 5227              		.loc 1 681 0 is_stmt 1
 5228              		.cfi_startproc
 5229              		@ args = 0, pretend = 0, frame = 0
 5230              		@ frame_needed = 0, uses_anonymous_args = 0
 5231              	.LVL862:
 5232 0000 08B5     		push	{r3, lr}
 5233              	.LCFI49:
 5234              		.cfi_def_cfa_offset 8
 5235              		.cfi_offset 3, -8
 5236              		.cfi_offset 14, -4
 5237              		.loc 1 681 0
 5238 0002 FFF7FEFF 		bl	cJSON_DetachItemFromObject
 5239              	.LVL863:
 5240 0006 FFF7FEFF 		bl	cJSON_Delete
 5241              	.LVL864:
 5242 000a 08BD     		pop	{r3, pc}
 5243              		.cfi_endproc
 5244              	.LFE41:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 115


 5246              		.section	.text.cJSON_InsertItemInArray,"ax",%progbits
 5247              		.align	2
 5248              		.global	cJSON_InsertItemInArray
 5249              		.thumb
 5250              		.thumb_func
 5252              	cJSON_InsertItemInArray:
 5253              	.LFB42:
 682:./mqtt/source/cJSON.c **** 
 683:./mqtt/source/cJSON.c **** /* Replace array/object items with new ones. */
 684:./mqtt/source/cJSON.c **** void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while
 5254              		.loc 1 684 0
 5255              		.cfi_startproc
 5256              		@ args = 0, pretend = 0, frame = 0
 5257              		@ frame_needed = 0, uses_anonymous_args = 0
 5258              	.LVL865:
 5259 0000 08B5     		push	{r3, lr}
 5260              	.LCFI50:
 5261              		.cfi_def_cfa_offset 8
 5262              		.cfi_offset 3, -8
 5263              		.cfi_offset 14, -4
 5264              		.loc 1 684 0
 5265 0002 8368     		ldr	r3, [r0, #8]
 5266              	.LVL866:
 5267 0004 01E0     		b	.L505
 5268              	.L507:
 5269              		.loc 1 684 0 is_stmt 0 discriminator 5
 5270 0006 1B68     		ldr	r3, [r3]
 5271              	.LVL867:
 5272 0008 0139     		subs	r1, r1, #1
 5273              	.LVL868:
 5274              	.L505:
 5275              		.loc 1 684 0 discriminator 1
 5276 000a 0BB1     		cbz	r3, .L506
 5277              		.loc 1 684 0 discriminator 3
 5278 000c 0029     		cmp	r1, #0
 5279 000e FADC     		bgt	.L507
 5280              	.L506:
 5281              		.loc 1 684 0 discriminator 6
 5282 0010 1BB9     		cbnz	r3, .L508
 5283              		.loc 1 684 0 discriminator 7
 5284 0012 1146     		mov	r1, r2
 5285              	.LVL869:
 5286 0014 FFF7FEFF 		bl	cJSON_AddItemToArray
 5287              	.LVL870:
 5288 0018 08BD     		pop	{r3, pc}
 5289              	.LVL871:
 5290              	.L508:
 685:./mqtt/source/cJSON.c **** 	newitem->next=c;newitem->prev=c->prev;c->prev=newitem;if (c==array->child) array->child=newitem; e
 5291              		.loc 1 685 0 is_stmt 1
 5292 001a 1360     		str	r3, [r2]
 5293 001c 5968     		ldr	r1, [r3, #4]
 5294              	.LVL872:
 5295 001e 5160     		str	r1, [r2, #4]
 5296 0020 5A60     		str	r2, [r3, #4]
 5297 0022 8168     		ldr	r1, [r0, #8]
 5298 0024 8B42     		cmp	r3, r1
 5299 0026 01D1     		bne	.L510
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 116


 5300              		.loc 1 685 0 is_stmt 0 discriminator 1
 5301 0028 8260     		str	r2, [r0, #8]
 5302 002a 08BD     		pop	{r3, pc}
 5303              	.LVL873:
 5304              	.L510:
 5305              		.loc 1 685 0 discriminator 2
 5306 002c 5368     		ldr	r3, [r2, #4]
 5307              	.LVL874:
 5308 002e 1A60     		str	r2, [r3]
 5309 0030 08BD     		pop	{r3, pc}
 5310              		.cfi_endproc
 5311              	.LFE42:
 5313 0032 00BF     		.section	.text.cJSON_ReplaceItemInArray,"ax",%progbits
 5314              		.align	2
 5315              		.global	cJSON_ReplaceItemInArray
 5316              		.thumb
 5317              		.thumb_func
 5319              	cJSON_ReplaceItemInArray:
 5320              	.LFB43:
 686:./mqtt/source/cJSON.c **** void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;whil
 5321              		.loc 1 686 0 is_stmt 1
 5322              		.cfi_startproc
 5323              		@ args = 0, pretend = 0, frame = 0
 5324              		@ frame_needed = 0, uses_anonymous_args = 0
 5325              	.LVL875:
 5326 0000 8368     		ldr	r3, [r0, #8]
 5327              	.LVL876:
 5328 0002 01E0     		b	.L513
 5329              	.L515:
 5330              		.loc 1 686 0 is_stmt 0 discriminator 5
 5331 0004 1B68     		ldr	r3, [r3]
 5332              	.LVL877:
 5333 0006 0139     		subs	r1, r1, #1
 5334              	.LVL878:
 5335              	.L513:
 5336              		.loc 1 686 0 discriminator 1
 5337 0008 0BB1     		cbz	r3, .L514
 5338              		.loc 1 686 0 discriminator 3
 5339 000a 0029     		cmp	r1, #0
 5340 000c FADC     		bgt	.L515
 5341              	.L514:
 5342              		.loc 1 686 0 discriminator 6
 5343 000e A3B1     		cbz	r3, .L521
 5344              		.loc 1 686 0
 5345 0010 10B5     		push	{r4, lr}
 5346              	.LCFI51:
 5347              		.cfi_def_cfa_offset 8
 5348              		.cfi_offset 4, -8
 5349              		.cfi_offset 14, -4
 687:./mqtt/source/cJSON.c **** 	newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
 5350              		.loc 1 687 0 is_stmt 1
 5351 0012 1968     		ldr	r1, [r3]
 5352              	.LVL879:
 5353 0014 1160     		str	r1, [r2]
 5354 0016 5C68     		ldr	r4, [r3, #4]
 5355 0018 5460     		str	r4, [r2, #4]
 5356 001a 01B1     		cbz	r1, .L517
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 117


 5357              		.loc 1 687 0 is_stmt 0 discriminator 1
 5358 001c 4A60     		str	r2, [r1, #4]
 5359              	.L517:
 688:./mqtt/source/cJSON.c **** 	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSO
 5360              		.loc 1 688 0 is_stmt 1
 5361 001e 8168     		ldr	r1, [r0, #8]
 5362 0020 8B42     		cmp	r3, r1
 5363 0022 01D1     		bne	.L518
 5364              		.loc 1 688 0 is_stmt 0 discriminator 1
 5365 0024 8260     		str	r2, [r0, #8]
 5366 0026 01E0     		b	.L519
 5367              	.L518:
 5368              		.loc 1 688 0 discriminator 2
 5369 0028 5168     		ldr	r1, [r2, #4]
 5370 002a 0A60     		str	r2, [r1]
 5371              	.L519:
 5372              		.loc 1 688 0 discriminator 4
 5373 002c 0022     		movs	r2, #0
 5374              	.LVL880:
 5375 002e 5A60     		str	r2, [r3, #4]
 5376 0030 1A60     		str	r2, [r3]
 5377 0032 1846     		mov	r0, r3
 5378              	.LVL881:
 5379 0034 FFF7FEFF 		bl	cJSON_Delete
 5380              	.LVL882:
 5381 0038 10BD     		pop	{r4, pc}
 5382              	.LVL883:
 5383              	.L521:
 5384              	.LCFI52:
 5385              		.cfi_def_cfa_offset 0
 5386              		.cfi_restore 4
 5387              		.cfi_restore 14
 5388 003a 7047     		bx	lr
 5389              		.cfi_endproc
 5390              	.LFE43:
 5392              		.section	.text.cJSON_ReplaceItemInObject,"ax",%progbits
 5393              		.align	2
 5394              		.global	cJSON_ReplaceItemInObject
 5395              		.thumb
 5396              		.thumb_func
 5398              	cJSON_ReplaceItemInObject:
 5399              	.LFB44:
 689:./mqtt/source/cJSON.c **** void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=
 5400              		.loc 1 689 0 is_stmt 1
 5401              		.cfi_startproc
 5402              		@ args = 0, pretend = 0, frame = 0
 5403              		@ frame_needed = 0, uses_anonymous_args = 0
 5404              	.LVL884:
 5405 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5406              	.LCFI53:
 5407              		.cfi_def_cfa_offset 24
 5408              		.cfi_offset 4, -24
 5409              		.cfi_offset 5, -20
 5410              		.cfi_offset 6, -16
 5411              		.cfi_offset 7, -12
 5412              		.cfi_offset 8, -8
 5413              		.cfi_offset 14, -4
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 118


 5414 0004 0746     		mov	r7, r0
 5415 0006 0E46     		mov	r6, r1
 5416 0008 9046     		mov	r8, r2
 5417              	.LVL885:
 5418              		.loc 1 689 0
 5419 000a 8468     		ldr	r4, [r0, #8]
 5420              	.LVL886:
 5421 000c 0025     		movs	r5, #0
 5422 000e 01E0     		b	.L523
 5423              	.LVL887:
 5424              	.L525:
 5425              		.loc 1 689 0 is_stmt 0 discriminator 5
 5426 0010 0135     		adds	r5, r5, #1
 5427              	.LVL888:
 5428 0012 2468     		ldr	r4, [r4]
 5429              	.LVL889:
 5430              	.L523:
 5431              		.loc 1 689 0 discriminator 1
 5432 0014 2CB1     		cbz	r4, .L524
 5433              		.loc 1 689 0 discriminator 3
 5434 0016 3146     		mov	r1, r6
 5435 0018 206A     		ldr	r0, [r4, #32]
 5436 001a FFF7FEFF 		bl	cJSON_strcasecmp
 5437              	.LVL890:
 5438 001e 0028     		cmp	r0, #0
 5439 0020 F6D1     		bne	.L525
 5440              	.L524:
 5441              		.loc 1 689 0 discriminator 6
 5442 0022 4CB1     		cbz	r4, .L522
 5443              		.loc 1 689 0 discriminator 7
 5444 0024 3046     		mov	r0, r6
 5445 0026 FFF7FEFF 		bl	cJSON_strdup
 5446              	.LVL891:
 5447 002a C8F82000 		str	r0, [r8, #32]
 5448 002e 4246     		mov	r2, r8
 5449 0030 2946     		mov	r1, r5
 5450 0032 3846     		mov	r0, r7
 5451 0034 FFF7FEFF 		bl	cJSON_ReplaceItemInArray
 5452              	.LVL892:
 5453              	.L522:
 5454 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5455              		.cfi_endproc
 5456              	.LFE44:
 5458              		.section	.text.cJSON_CreateNull,"ax",%progbits
 5459              		.align	2
 5460              		.global	cJSON_CreateNull
 5461              		.thumb
 5462              		.thumb_func
 5464              	cJSON_CreateNull:
 5465              	.LFB45:
 690:./mqtt/source/cJSON.c **** 
 691:./mqtt/source/cJSON.c **** /* Create basic types: */
 692:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;retur
 5466              		.loc 1 692 0 is_stmt 1
 5467              		.cfi_startproc
 5468              		@ args = 0, pretend = 0, frame = 0
 5469              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 119


 5470 0000 08B5     		push	{r3, lr}
 5471              	.LCFI54:
 5472              		.cfi_def_cfa_offset 8
 5473              		.cfi_offset 3, -8
 5474              		.cfi_offset 14, -4
 5475              		.loc 1 692 0
 5476 0002 FFF7FEFF 		bl	cJSON_New_Item
 5477              	.LVL893:
 5478 0006 0346     		mov	r3, r0
 5479 0008 08B1     		cbz	r0, .L529
 5480              		.loc 1 692 0 is_stmt 0 discriminator 1
 5481 000a 0222     		movs	r2, #2
 5482 000c C260     		str	r2, [r0, #12]
 5483              	.L529:
 5484              		.loc 1 692 0 discriminator 3
 5485 000e 1846     		mov	r0, r3
 5486              	.LVL894:
 5487 0010 08BD     		pop	{r3, pc}
 5488              		.cfi_endproc
 5489              	.LFE45:
 5491 0012 00BF     		.section	.text.cJSON_CreateTrue,"ax",%progbits
 5492              		.align	2
 5493              		.global	cJSON_CreateTrue
 5494              		.thumb
 5495              		.thumb_func
 5497              	cJSON_CreateTrue:
 5498              	.LFB46:
 693:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;retur
 5499              		.loc 1 693 0 is_stmt 1
 5500              		.cfi_startproc
 5501              		@ args = 0, pretend = 0, frame = 0
 5502              		@ frame_needed = 0, uses_anonymous_args = 0
 5503 0000 08B5     		push	{r3, lr}
 5504              	.LCFI55:
 5505              		.cfi_def_cfa_offset 8
 5506              		.cfi_offset 3, -8
 5507              		.cfi_offset 14, -4
 5508              		.loc 1 693 0
 5509 0002 FFF7FEFF 		bl	cJSON_New_Item
 5510              	.LVL895:
 5511 0006 0346     		mov	r3, r0
 5512 0008 08B1     		cbz	r0, .L532
 5513              		.loc 1 693 0 is_stmt 0 discriminator 1
 5514 000a 0122     		movs	r2, #1
 5515 000c C260     		str	r2, [r0, #12]
 5516              	.L532:
 5517              		.loc 1 693 0 discriminator 3
 5518 000e 1846     		mov	r0, r3
 5519              	.LVL896:
 5520 0010 08BD     		pop	{r3, pc}
 5521              		.cfi_endproc
 5522              	.LFE46:
 5524 0012 00BF     		.section	.text.cJSON_CreateFalse,"ax",%progbits
 5525              		.align	2
 5526              		.global	cJSON_CreateFalse
 5527              		.thumb
 5528              		.thumb_func
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 120


 5530              	cJSON_CreateFalse:
 5531              	.LFB47:
 694:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;ret
 5532              		.loc 1 694 0 is_stmt 1
 5533              		.cfi_startproc
 5534              		@ args = 0, pretend = 0, frame = 0
 5535              		@ frame_needed = 0, uses_anonymous_args = 0
 5536 0000 08B5     		push	{r3, lr}
 5537              	.LCFI56:
 5538              		.cfi_def_cfa_offset 8
 5539              		.cfi_offset 3, -8
 5540              		.cfi_offset 14, -4
 5541              		.loc 1 694 0
 5542 0002 FFF7FEFF 		bl	cJSON_New_Item
 5543              	.LVL897:
 5544 0006 0346     		mov	r3, r0
 5545 0008 08B1     		cbz	r0, .L535
 5546              		.loc 1 694 0 is_stmt 0 discriminator 1
 5547 000a 0022     		movs	r2, #0
 5548 000c C260     		str	r2, [r0, #12]
 5549              	.L535:
 5550              		.loc 1 694 0 discriminator 3
 5551 000e 1846     		mov	r0, r3
 5552              	.LVL898:
 5553 0010 08BD     		pop	{r3, pc}
 5554              		.cfi_endproc
 5555              	.LFE47:
 5557 0012 00BF     		.section	.text.cJSON_CreateBool,"ax",%progbits
 5558              		.align	2
 5559              		.global	cJSON_CreateBool
 5560              		.thumb
 5561              		.thumb_func
 5563              	cJSON_CreateBool:
 5564              	.LFB48:
 695:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJ
 5565              		.loc 1 695 0 is_stmt 1
 5566              		.cfi_startproc
 5567              		@ args = 0, pretend = 0, frame = 0
 5568              		@ frame_needed = 0, uses_anonymous_args = 0
 5569              	.LVL899:
 5570 0000 10B5     		push	{r4, lr}
 5571              	.LCFI57:
 5572              		.cfi_def_cfa_offset 8
 5573              		.cfi_offset 4, -8
 5574              		.cfi_offset 14, -4
 5575 0002 0446     		mov	r4, r0
 5576              		.loc 1 695 0
 5577 0004 FFF7FEFF 		bl	cJSON_New_Item
 5578              	.LVL900:
 5579 0008 0346     		mov	r3, r0
 5580 000a 18B1     		cbz	r0, .L538
 5581              		.loc 1 695 0 is_stmt 0 discriminator 1
 5582 000c 0034     		adds	r4, r4, #0
 5583 000e 18BF     		it	ne
 5584 0010 0124     		movne	r4, #1
 5585              	.LVL901:
 5586 0012 C460     		str	r4, [r0, #12]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 121


 5587              	.L538:
 5588              		.loc 1 695 0 discriminator 3
 5589 0014 1846     		mov	r0, r3
 5590              	.LVL902:
 5591 0016 10BD     		pop	{r4, pc}
 5592              		.cfi_endproc
 5593              	.LFE48:
 5595              		.section	.text.cJSON_CreateNumber,"ax",%progbits
 5596              		.align	2
 5597              		.global	cJSON_CreateNumber
 5598              		.thumb
 5599              		.thumb_func
 5601              	cJSON_CreateNumber:
 5602              	.LFB49:
 696:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Num
 5603              		.loc 1 696 0 is_stmt 1
 5604              		.cfi_startproc
 5605              		@ args = 0, pretend = 0, frame = 0
 5606              		@ frame_needed = 0, uses_anonymous_args = 0
 5607              	.LVL903:
 5608 0000 10B5     		push	{r4, lr}
 5609              	.LCFI58:
 5610              		.cfi_def_cfa_offset 8
 5611              		.cfi_offset 4, -8
 5612              		.cfi_offset 14, -4
 5613 0002 2DED028B 		vpush.64	{d8}
 5614              	.LCFI59:
 5615              		.cfi_def_cfa_offset 16
 5616              		.cfi_offset 80, -16
 5617              		.cfi_offset 81, -12
 5618 0006 B0EE408A 		vmov.f32	s16, s0
 5619 000a F0EE608A 		vmov.f32	s17, s1
 5620              		.loc 1 696 0
 5621 000e FFF7FEFF 		bl	cJSON_New_Item
 5622              	.LVL904:
 5623 0012 0446     		mov	r4, r0
 5624 0014 40B1     		cbz	r0, .L541
 5625              		.loc 1 696 0 is_stmt 0 discriminator 1
 5626 0016 0323     		movs	r3, #3
 5627 0018 C360     		str	r3, [r0, #12]
 5628 001a 80ED068B 		vstr.64	d8, [r0, #24]
 5629 001e 51EC180B 		vmov	r0, r1, d8
 5630              	.LVL905:
 5631 0022 FFF7FEFF 		bl	__aeabi_d2iz
 5632              	.LVL906:
 5633 0026 6061     		str	r0, [r4, #20]
 5634              	.L541:
 5635              		.loc 1 696 0 discriminator 3
 5636 0028 2046     		mov	r0, r4
 5637 002a BDEC028B 		vldm	sp!, {d8}
 5638              	.LCFI60:
 5639              		.cfi_restore 80
 5640              		.cfi_restore 81
 5641              		.cfi_def_cfa_offset 8
 5642              	.LVL907:
 5643 002e 10BD     		pop	{r4, pc}
 5644              		.cfi_endproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 122


 5645              	.LFE49:
 5647              		.section	.text.cJSON_CreateString,"ax",%progbits
 5648              		.align	2
 5649              		.global	cJSON_CreateString
 5650              		.thumb
 5651              		.thumb_func
 5653              	cJSON_CreateString:
 5654              	.LFB50:
 697:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJS
 5655              		.loc 1 697 0 is_stmt 1
 5656              		.cfi_startproc
 5657              		@ args = 0, pretend = 0, frame = 0
 5658              		@ frame_needed = 0, uses_anonymous_args = 0
 5659              	.LVL908:
 5660 0000 38B5     		push	{r3, r4, r5, lr}
 5661              	.LCFI61:
 5662              		.cfi_def_cfa_offset 16
 5663              		.cfi_offset 3, -16
 5664              		.cfi_offset 4, -12
 5665              		.cfi_offset 5, -8
 5666              		.cfi_offset 14, -4
 5667 0002 0546     		mov	r5, r0
 5668              		.loc 1 697 0
 5669 0004 FFF7FEFF 		bl	cJSON_New_Item
 5670              	.LVL909:
 5671 0008 0446     		mov	r4, r0
 5672 000a 28B1     		cbz	r0, .L544
 5673              		.loc 1 697 0 is_stmt 0 discriminator 1
 5674 000c 0423     		movs	r3, #4
 5675 000e C360     		str	r3, [r0, #12]
 5676 0010 2846     		mov	r0, r5
 5677              	.LVL910:
 5678 0012 FFF7FEFF 		bl	cJSON_strdup
 5679              	.LVL911:
 5680 0016 2061     		str	r0, [r4, #16]
 5681              	.L544:
 5682              		.loc 1 697 0 discriminator 3
 5683 0018 2046     		mov	r0, r4
 5684 001a 38BD     		pop	{r3, r4, r5, pc}
 5685              		.cfi_endproc
 5686              	.LFE50:
 5688              		.section	.text.cJSON_CreateArray,"ax",%progbits
 5689              		.align	2
 5690              		.global	cJSON_CreateArray
 5691              		.thumb
 5692              		.thumb_func
 5694              	cJSON_CreateArray:
 5695              	.LFB51:
 698:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;ret
 5696              		.loc 1 698 0 is_stmt 1
 5697              		.cfi_startproc
 5698              		@ args = 0, pretend = 0, frame = 0
 5699              		@ frame_needed = 0, uses_anonymous_args = 0
 5700 0000 08B5     		push	{r3, lr}
 5701              	.LCFI62:
 5702              		.cfi_def_cfa_offset 8
 5703              		.cfi_offset 3, -8
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 123


 5704              		.cfi_offset 14, -4
 5705              		.loc 1 698 0
 5706 0002 FFF7FEFF 		bl	cJSON_New_Item
 5707              	.LVL912:
 5708 0006 0346     		mov	r3, r0
 5709 0008 08B1     		cbz	r0, .L547
 5710              		.loc 1 698 0 is_stmt 0 discriminator 1
 5711 000a 0522     		movs	r2, #5
 5712 000c C260     		str	r2, [r0, #12]
 5713              	.L547:
 5714              		.loc 1 698 0 discriminator 3
 5715 000e 1846     		mov	r0, r3
 5716              	.LVL913:
 5717 0010 08BD     		pop	{r3, pc}
 5718              		.cfi_endproc
 5719              	.LFE51:
 5721 0012 00BF     		.section	.text.cJSON_CreateObject,"ax",%progbits
 5722              		.align	2
 5723              		.global	cJSON_CreateObject
 5724              		.thumb
 5725              		.thumb_func
 5727              	cJSON_CreateObject:
 5728              	.LFB52:
 699:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;r
 5729              		.loc 1 699 0 is_stmt 1
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
 5733 0000 08B5     		push	{r3, lr}
 5734              	.LCFI63:
 5735              		.cfi_def_cfa_offset 8
 5736              		.cfi_offset 3, -8
 5737              		.cfi_offset 14, -4
 5738              		.loc 1 699 0
 5739 0002 FFF7FEFF 		bl	cJSON_New_Item
 5740              	.LVL914:
 5741 0006 0346     		mov	r3, r0
 5742 0008 08B1     		cbz	r0, .L550
 5743              		.loc 1 699 0 is_stmt 0 discriminator 1
 5744 000a 0622     		movs	r2, #6
 5745 000c C260     		str	r2, [r0, #12]
 5746              	.L550:
 5747              		.loc 1 699 0 discriminator 3
 5748 000e 1846     		mov	r0, r3
 5749              	.LVL915:
 5750 0010 08BD     		pop	{r3, pc}
 5751              		.cfi_endproc
 5752              	.LFE52:
 5754 0012 00BF     		.section	.text.cJSON_CreateIntArray,"ax",%progbits
 5755              		.align	2
 5756              		.global	cJSON_CreateIntArray
 5757              		.thumb
 5758              		.thumb_func
 5760              	cJSON_CreateIntArray:
 5761              	.LFB53:
 700:./mqtt/source/cJSON.c **** 
 701:./mqtt/source/cJSON.c **** /* Create Arrays: */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 124


 702:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateAr
 5762              		.loc 1 702 0 is_stmt 1
 5763              		.cfi_startproc
 5764              		@ args = 0, pretend = 0, frame = 0
 5765              		@ frame_needed = 0, uses_anonymous_args = 0
 5766              	.LVL916:
 5767 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5768              	.LCFI64:
 5769              		.cfi_def_cfa_offset 32
 5770              		.cfi_offset 3, -32
 5771              		.cfi_offset 4, -28
 5772              		.cfi_offset 5, -24
 5773              		.cfi_offset 6, -20
 5774              		.cfi_offset 7, -16
 5775              		.cfi_offset 8, -12
 5776              		.cfi_offset 9, -8
 5777              		.cfi_offset 14, -4
 5778 0004 8146     		mov	r9, r0
 5779 0006 8846     		mov	r8, r1
 5780              	.LVL917:
 5781              		.loc 1 702 0
 5782 0008 FFF7FEFF 		bl	cJSON_CreateArray
 5783              	.LVL918:
 5784 000c 0646     		mov	r6, r0
 5785              	.LVL919:
 5786 000e 0027     		movs	r7, #0
 5787 0010 3C46     		mov	r4, r7
 5788 0012 11E0     		b	.L553
 5789              	.LVL920:
 5790              	.L557:
 5791              		.loc 1 702 0 is_stmt 0 discriminator 9
 5792 0014 59F82400 		ldr	r0, [r9, r4, lsl #2]
 5793 0018 FFF7FEFF 		bl	__aeabi_i2d
 5794              	.LVL921:
 5795 001c 41EC100B 		vmov	d0, r0, r1
 5796 0020 FFF7FEFF 		bl	cJSON_CreateNumber
 5797              	.LVL922:
 5798 0024 0546     		mov	r5, r0
 5799              	.LVL923:
 5800 0026 0CB9     		cbnz	r4, .L554
 5801              		.loc 1 702 0 discriminator 2
 5802 0028 B060     		str	r0, [r6, #8]
 5803 002a 03E0     		b	.L555
 5804              	.L554:
 5805              		.loc 1 702 0 discriminator 3
 5806 002c 0146     		mov	r1, r0
 5807 002e 3846     		mov	r0, r7
 5808              	.LVL924:
 5809 0030 FFF7FEFF 		bl	suffix_object
 5810              	.LVL925:
 5811              	.L555:
 5812              		.loc 1 702 0 discriminator 5
 5813 0034 0134     		adds	r4, r4, #1
 5814              	.LVL926:
 5815 0036 2F46     		mov	r7, r5
 5816              	.LVL927:
 5817              	.L553:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 125


 5818              		.loc 1 702 0 discriminator 6
 5819 0038 0EB1     		cbz	r6, .L556
 5820              		.loc 1 702 0 discriminator 7
 5821 003a 4445     		cmp	r4, r8
 5822 003c EADB     		blt	.L557
 5823              	.L556:
 5824              		.loc 1 702 0 discriminator 10
 5825 003e 3046     		mov	r0, r6
 5826 0040 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5827              		.cfi_endproc
 5828              	.LFE53:
 5830              		.global	__aeabi_f2d
 5831              		.section	.text.cJSON_CreateFloatArray,"ax",%progbits
 5832              		.align	2
 5833              		.global	cJSON_CreateFloatArray
 5834              		.thumb
 5835              		.thumb_func
 5837              	cJSON_CreateFloatArray:
 5838              	.LFB54:
 703:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_Creat
 5839              		.loc 1 703 0 is_stmt 1
 5840              		.cfi_startproc
 5841              		@ args = 0, pretend = 0, frame = 0
 5842              		@ frame_needed = 0, uses_anonymous_args = 0
 5843              	.LVL928:
 5844 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5845              	.LCFI65:
 5846              		.cfi_def_cfa_offset 32
 5847              		.cfi_offset 3, -32
 5848              		.cfi_offset 4, -28
 5849              		.cfi_offset 5, -24
 5850              		.cfi_offset 6, -20
 5851              		.cfi_offset 7, -16
 5852              		.cfi_offset 8, -12
 5853              		.cfi_offset 9, -8
 5854              		.cfi_offset 14, -4
 5855 0004 8146     		mov	r9, r0
 5856 0006 8846     		mov	r8, r1
 5857              	.LVL929:
 5858              		.loc 1 703 0
 5859 0008 FFF7FEFF 		bl	cJSON_CreateArray
 5860              	.LVL930:
 5861 000c 0646     		mov	r6, r0
 5862              	.LVL931:
 5863 000e 0027     		movs	r7, #0
 5864 0010 3C46     		mov	r4, r7
 5865 0012 12E0     		b	.L560
 5866              	.LVL932:
 5867              	.L564:
 5868              		.loc 1 703 0 is_stmt 0 discriminator 9
 5869 0014 09EB8403 		add	r3, r9, r4, lsl #2
 5870 0018 1868     		ldr	r0, [r3]	@ float
 5871 001a FFF7FEFF 		bl	__aeabi_f2d
 5872              	.LVL933:
 5873 001e 41EC100B 		vmov	d0, r0, r1
 5874 0022 FFF7FEFF 		bl	cJSON_CreateNumber
 5875              	.LVL934:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 126


 5876 0026 0546     		mov	r5, r0
 5877              	.LVL935:
 5878 0028 0CB9     		cbnz	r4, .L561
 5879              		.loc 1 703 0 discriminator 2
 5880 002a B060     		str	r0, [r6, #8]
 5881 002c 03E0     		b	.L562
 5882              	.L561:
 5883              		.loc 1 703 0 discriminator 3
 5884 002e 0146     		mov	r1, r0
 5885 0030 3846     		mov	r0, r7
 5886              	.LVL936:
 5887 0032 FFF7FEFF 		bl	suffix_object
 5888              	.LVL937:
 5889              	.L562:
 5890              		.loc 1 703 0 discriminator 5
 5891 0036 0134     		adds	r4, r4, #1
 5892              	.LVL938:
 5893 0038 2F46     		mov	r7, r5
 5894              	.LVL939:
 5895              	.L560:
 5896              		.loc 1 703 0 discriminator 6
 5897 003a 0EB1     		cbz	r6, .L563
 5898              		.loc 1 703 0 discriminator 7
 5899 003c 4445     		cmp	r4, r8
 5900 003e E9DB     		blt	.L564
 5901              	.L563:
 5902              		.loc 1 703 0 discriminator 10
 5903 0040 3046     		mov	r0, r6
 5904 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5905              		.cfi_endproc
 5906              	.LFE54:
 5908 0046 00BF     		.section	.text.cJSON_CreateDoubleArray,"ax",%progbits
 5909              		.align	2
 5910              		.global	cJSON_CreateDoubleArray
 5911              		.thumb
 5912              		.thumb_func
 5914              	cJSON_CreateDoubleArray:
 5915              	.LFB55:
 704:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_Cre
 5916              		.loc 1 704 0 is_stmt 1
 5917              		.cfi_startproc
 5918              		@ args = 0, pretend = 0, frame = 0
 5919              		@ frame_needed = 0, uses_anonymous_args = 0
 5920              	.LVL940:
 5921 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5922              	.LCFI66:
 5923              		.cfi_def_cfa_offset 32
 5924              		.cfi_offset 3, -32
 5925              		.cfi_offset 4, -28
 5926              		.cfi_offset 5, -24
 5927              		.cfi_offset 6, -20
 5928              		.cfi_offset 7, -16
 5929              		.cfi_offset 8, -12
 5930              		.cfi_offset 9, -8
 5931              		.cfi_offset 14, -4
 5932 0004 8146     		mov	r9, r0
 5933 0006 8846     		mov	r8, r1
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 127


 5934              	.LVL941:
 5935              		.loc 1 704 0
 5936 0008 FFF7FEFF 		bl	cJSON_CreateArray
 5937              	.LVL942:
 5938 000c 0646     		mov	r6, r0
 5939              	.LVL943:
 5940 000e 0027     		movs	r7, #0
 5941 0010 3C46     		mov	r4, r7
 5942 0012 0FE0     		b	.L567
 5943              	.LVL944:
 5944              	.L571:
 5945              		.loc 1 704 0 is_stmt 0 discriminator 9
 5946 0014 09EBC403 		add	r3, r9, r4, lsl #3
 5947 0018 93ED000B 		vldr.64	d0, [r3]
 5948 001c FFF7FEFF 		bl	cJSON_CreateNumber
 5949              	.LVL945:
 5950 0020 0546     		mov	r5, r0
 5951              	.LVL946:
 5952 0022 0CB9     		cbnz	r4, .L568
 5953              		.loc 1 704 0 discriminator 2
 5954 0024 B060     		str	r0, [r6, #8]
 5955 0026 03E0     		b	.L569
 5956              	.L568:
 5957              		.loc 1 704 0 discriminator 3
 5958 0028 0146     		mov	r1, r0
 5959 002a 3846     		mov	r0, r7
 5960              	.LVL947:
 5961 002c FFF7FEFF 		bl	suffix_object
 5962              	.LVL948:
 5963              	.L569:
 5964              		.loc 1 704 0 discriminator 5
 5965 0030 0134     		adds	r4, r4, #1
 5966              	.LVL949:
 5967 0032 2F46     		mov	r7, r5
 5968              	.LVL950:
 5969              	.L567:
 5970              		.loc 1 704 0 discriminator 6
 5971 0034 0EB1     		cbz	r6, .L570
 5972              		.loc 1 704 0 discriminator 7
 5973 0036 4445     		cmp	r4, r8
 5974 0038 ECDB     		blt	.L571
 5975              	.L570:
 5976              		.loc 1 704 0 discriminator 10
 5977 003a 3046     		mov	r0, r6
 5978 003c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5979              		.cfi_endproc
 5980              	.LFE55:
 5982              		.section	.text.cJSON_CreateStringArray,"ax",%progbits
 5983              		.align	2
 5984              		.global	cJSON_CreateStringArray
 5985              		.thumb
 5986              		.thumb_func
 5988              	cJSON_CreateStringArray:
 5989              	.LFB56:
 705:./mqtt/source/cJSON.c **** cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_Crea
 5990              		.loc 1 705 0 is_stmt 1
 5991              		.cfi_startproc
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 128


 5992              		@ args = 0, pretend = 0, frame = 0
 5993              		@ frame_needed = 0, uses_anonymous_args = 0
 5994              	.LVL951:
 5995 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5996              	.LCFI67:
 5997              		.cfi_def_cfa_offset 32
 5998              		.cfi_offset 3, -32
 5999              		.cfi_offset 4, -28
 6000              		.cfi_offset 5, -24
 6001              		.cfi_offset 6, -20
 6002              		.cfi_offset 7, -16
 6003              		.cfi_offset 8, -12
 6004              		.cfi_offset 9, -8
 6005              		.cfi_offset 14, -4
 6006 0004 8146     		mov	r9, r0
 6007 0006 8846     		mov	r8, r1
 6008              	.LVL952:
 6009              		.loc 1 705 0
 6010 0008 FFF7FEFF 		bl	cJSON_CreateArray
 6011              	.LVL953:
 6012 000c 0646     		mov	r6, r0
 6013              	.LVL954:
 6014 000e 0027     		movs	r7, #0
 6015 0010 3C46     		mov	r4, r7
 6016 0012 0DE0     		b	.L574
 6017              	.LVL955:
 6018              	.L578:
 6019              		.loc 1 705 0 is_stmt 0 discriminator 9
 6020 0014 59F82400 		ldr	r0, [r9, r4, lsl #2]
 6021 0018 FFF7FEFF 		bl	cJSON_CreateString
 6022              	.LVL956:
 6023 001c 0546     		mov	r5, r0
 6024              	.LVL957:
 6025 001e 0CB9     		cbnz	r4, .L575
 6026              		.loc 1 705 0 discriminator 2
 6027 0020 B060     		str	r0, [r6, #8]
 6028 0022 03E0     		b	.L576
 6029              	.L575:
 6030              		.loc 1 705 0 discriminator 3
 6031 0024 0146     		mov	r1, r0
 6032 0026 3846     		mov	r0, r7
 6033              	.LVL958:
 6034 0028 FFF7FEFF 		bl	suffix_object
 6035              	.LVL959:
 6036              	.L576:
 6037              		.loc 1 705 0 discriminator 5
 6038 002c 0134     		adds	r4, r4, #1
 6039              	.LVL960:
 6040 002e 2F46     		mov	r7, r5
 6041              	.LVL961:
 6042              	.L574:
 6043              		.loc 1 705 0 discriminator 6
 6044 0030 0EB1     		cbz	r6, .L577
 6045              		.loc 1 705 0 discriminator 7
 6046 0032 4445     		cmp	r4, r8
 6047 0034 EEDB     		blt	.L578
 6048              	.L577:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 129


 6049              		.loc 1 705 0 discriminator 10
 6050 0036 3046     		mov	r0, r6
 6051 0038 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 6052              		.cfi_endproc
 6053              	.LFE56:
 6055              		.section	.text.cJSON_Duplicate,"ax",%progbits
 6056              		.align	2
 6057              		.global	cJSON_Duplicate
 6058              		.thumb
 6059              		.thumb_func
 6061              	cJSON_Duplicate:
 6062              	.LFB57:
 706:./mqtt/source/cJSON.c **** 
 707:./mqtt/source/cJSON.c **** /* Duplication */
 708:./mqtt/source/cJSON.c **** cJSON *cJSON_Duplicate(cJSON *item,int recurse)
 709:./mqtt/source/cJSON.c **** {
 6063              		.loc 1 709 0 is_stmt 1
 6064              		.cfi_startproc
 6065              		@ args = 0, pretend = 0, frame = 0
 6066              		@ frame_needed = 0, uses_anonymous_args = 0
 6067              	.LVL962:
 710:./mqtt/source/cJSON.c **** 	cJSON *newitem,*cptr,*nptr=0,*newchild;
 711:./mqtt/source/cJSON.c **** 	/* Bail on bad ptr */
 712:./mqtt/source/cJSON.c **** 	if (!item) return 0;
 6068              		.loc 1 712 0
 6069 0000 0028     		cmp	r0, #0
 6070 0002 41D0     		beq	.L589
 709:./mqtt/source/cJSON.c **** 	cJSON *newitem,*cptr,*nptr=0,*newchild;
 6071              		.loc 1 709 0
 6072 0004 70B5     		push	{r4, r5, r6, lr}
 6073              	.LCFI68:
 6074              		.cfi_def_cfa_offset 16
 6075              		.cfi_offset 4, -16
 6076              		.cfi_offset 5, -12
 6077              		.cfi_offset 6, -8
 6078              		.cfi_offset 14, -4
 6079 0006 0446     		mov	r4, r0
 6080 0008 0D46     		mov	r5, r1
 713:./mqtt/source/cJSON.c **** 	/* Create new item */
 714:./mqtt/source/cJSON.c **** 	newitem=cJSON_New_Item();
 6081              		.loc 1 714 0
 6082 000a FFF7FEFF 		bl	cJSON_New_Item
 6083              	.LVL963:
 715:./mqtt/source/cJSON.c **** 	if (!newitem) return 0;
 6084              		.loc 1 715 0
 6085 000e 0646     		mov	r6, r0
 6086 0010 0028     		cmp	r0, #0
 6087 0012 3BD0     		beq	.L590
 716:./mqtt/source/cJSON.c **** 	/* Copy over all vars */
 717:./mqtt/source/cJSON.c **** 	newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuedoubl
 6088              		.loc 1 717 0
 6089 0014 E368     		ldr	r3, [r4, #12]
 6090 0016 23F48073 		bic	r3, r3, #256
 6091 001a C360     		str	r3, [r0, #12]
 6092 001c 6369     		ldr	r3, [r4, #20]
 6093 001e 4361     		str	r3, [r0, #20]
 6094 0020 D4E90623 		ldrd	r2, [r4, #24]
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 130


 6095 0024 C0E90623 		strd	r2, [r0, #24]
 718:./mqtt/source/cJSON.c **** 	if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->values
 6096              		.loc 1 718 0
 6097 0028 2069     		ldr	r0, [r4, #16]
 6098              	.LVL964:
 6099 002a 40B1     		cbz	r0, .L582
 6100              		.loc 1 718 0 is_stmt 0 discriminator 1
 6101 002c FFF7FEFF 		bl	cJSON_strdup
 6102              	.LVL965:
 6103 0030 3061     		str	r0, [r6, #16]
 6104 0032 20B9     		cbnz	r0, .L582
 6105              		.loc 1 718 0 discriminator 2
 6106 0034 3046     		mov	r0, r6
 6107 0036 FFF7FEFF 		bl	cJSON_Delete
 6108              	.LVL966:
 6109 003a 0020     		movs	r0, #0
 6110 003c 70BD     		pop	{r4, r5, r6, pc}
 6111              	.LVL967:
 6112              	.L582:
 719:./mqtt/source/cJSON.c **** 	if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_De
 6113              		.loc 1 719 0 is_stmt 1
 6114 003e 206A     		ldr	r0, [r4, #32]
 6115 0040 40B1     		cbz	r0, .L583
 6116              		.loc 1 719 0 is_stmt 0 discriminator 1
 6117 0042 FFF7FEFF 		bl	cJSON_strdup
 6118              	.LVL968:
 6119 0046 3062     		str	r0, [r6, #32]
 6120 0048 20B9     		cbnz	r0, .L583
 6121              		.loc 1 719 0 discriminator 2
 6122 004a 3046     		mov	r0, r6
 6123 004c FFF7FEFF 		bl	cJSON_Delete
 6124              	.LVL969:
 6125 0050 0020     		movs	r0, #0
 6126 0052 70BD     		pop	{r4, r5, r6, pc}
 6127              	.LVL970:
 6128              	.L583:
 720:./mqtt/source/cJSON.c **** 	/* If non-recursive, then we're done! */
 721:./mqtt/source/cJSON.c **** 	if (!recurse) return newitem;
 6129              		.loc 1 721 0 is_stmt 1
 6130 0054 E5B1     		cbz	r5, .L591
 722:./mqtt/source/cJSON.c **** 	/* Walk the ->next chain for the child. */
 723:./mqtt/source/cJSON.c **** 	cptr=item->child;
 6131              		.loc 1 723 0
 6132 0056 A468     		ldr	r4, [r4, #8]
 6133              	.LVL971:
 710:./mqtt/source/cJSON.c **** 	/* Bail on bad ptr */
 6134              		.loc 1 710 0
 6135 0058 0025     		movs	r5, #0
 6136              	.LVL972:
 724:./mqtt/source/cJSON.c **** 	while (cptr)
 6137              		.loc 1 724 0
 6138 005a 11E0     		b	.L584
 6139              	.LVL973:
 6140              	.L588:
 725:./mqtt/source/cJSON.c **** 	{
 726:./mqtt/source/cJSON.c **** 		newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
 6141              		.loc 1 726 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 131


 6142 005c 0121     		movs	r1, #1
 6143 005e 2046     		mov	r0, r4
 6144 0060 FFF7FEFF 		bl	cJSON_Duplicate
 6145              	.LVL974:
 727:./mqtt/source/cJSON.c **** 		if (!newchild) {cJSON_Delete(newitem);return 0;}
 6146              		.loc 1 727 0
 6147 0064 0346     		mov	r3, r0
 6148 0066 20B9     		cbnz	r0, .L585
 6149              		.loc 1 727 0 is_stmt 0 discriminator 1
 6150 0068 3046     		mov	r0, r6
 6151              	.LVL975:
 6152 006a FFF7FEFF 		bl	cJSON_Delete
 6153              	.LVL976:
 6154 006e 0020     		movs	r0, #0
 6155 0070 70BD     		pop	{r4, r5, r6, pc}
 6156              	.LVL977:
 6157              	.L585:
 728:./mqtt/source/cJSON.c **** 		if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already s
 6158              		.loc 1 728 0 is_stmt 1
 6159 0072 15B1     		cbz	r5, .L586
 6160              		.loc 1 728 0 is_stmt 0 discriminator 1
 6161 0074 2860     		str	r0, [r5]
 6162 0076 4560     		str	r5, [r0, #4]
 6163              	.LVL978:
 6164 0078 00E0     		b	.L587
 6165              	.LVL979:
 6166              	.L586:
 729:./mqtt/source/cJSON.c **** 		else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
 6167              		.loc 1 729 0 is_stmt 1
 6168 007a B060     		str	r0, [r6, #8]
 6169              	.LVL980:
 6170              	.L587:
 730:./mqtt/source/cJSON.c **** 		cptr=cptr->next;
 6171              		.loc 1 730 0
 6172 007c 2468     		ldr	r4, [r4]
 6173              	.LVL981:
 6174 007e 1D46     		mov	r5, r3
 6175              	.LVL982:
 6176              	.L584:
 724:./mqtt/source/cJSON.c **** 	{
 6177              		.loc 1 724 0
 6178 0080 002C     		cmp	r4, #0
 6179 0082 EBD1     		bne	.L588
 731:./mqtt/source/cJSON.c **** 	}
 732:./mqtt/source/cJSON.c **** 	return newitem;
 6180              		.loc 1 732 0
 6181 0084 3046     		mov	r0, r6
 6182 0086 70BD     		pop	{r4, r5, r6, pc}
 6183              	.LVL983:
 6184              	.L589:
 6185              	.LCFI69:
 6186              		.cfi_def_cfa_offset 0
 6187              		.cfi_restore 4
 6188              		.cfi_restore 5
 6189              		.cfi_restore 6
 6190              		.cfi_restore 14
 712:./mqtt/source/cJSON.c **** 	/* Create new item */
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 132


 6191              		.loc 1 712 0
 6192 0088 0020     		movs	r0, #0
 6193              	.LVL984:
 733:./mqtt/source/cJSON.c **** }
 6194              		.loc 1 733 0
 6195 008a 7047     		bx	lr
 6196              	.LVL985:
 6197              	.L590:
 6198              	.LCFI70:
 6199              		.cfi_def_cfa_offset 16
 6200              		.cfi_offset 4, -16
 6201              		.cfi_offset 5, -12
 6202              		.cfi_offset 6, -8
 6203              		.cfi_offset 14, -4
 715:./mqtt/source/cJSON.c **** 	/* Copy over all vars */
 6204              		.loc 1 715 0
 6205 008c 0020     		movs	r0, #0
 6206              	.LVL986:
 6207 008e 70BD     		pop	{r4, r5, r6, pc}
 6208              	.LVL987:
 6209              	.L591:
 721:./mqtt/source/cJSON.c **** 	/* Walk the ->next chain for the child. */
 6210              		.loc 1 721 0
 6211 0090 3046     		mov	r0, r6
 6212              		.loc 1 733 0
 6213 0092 70BD     		pop	{r4, r5, r6, pc}
 6214              		.cfi_endproc
 6215              	.LFE57:
 6217              		.section	.text.cJSON_Minify,"ax",%progbits
 6218              		.align	2
 6219              		.global	cJSON_Minify
 6220              		.thumb
 6221              		.thumb_func
 6223              	cJSON_Minify:
 6224              	.LFB58:
 734:./mqtt/source/cJSON.c **** 
 735:./mqtt/source/cJSON.c **** void cJSON_Minify(char *json)
 736:./mqtt/source/cJSON.c **** {
 6225              		.loc 1 736 0
 6226              		.cfi_startproc
 6227              		@ args = 0, pretend = 0, frame = 0
 6228              		@ frame_needed = 0, uses_anonymous_args = 0
 6229              		@ link register save eliminated.
 6230              	.LVL988:
 737:./mqtt/source/cJSON.c **** 	char *into=json;
 6231              		.loc 1 737 0
 6232 0000 0146     		mov	r1, r0
 738:./mqtt/source/cJSON.c **** 	while (*json)
 6233              		.loc 1 738 0
 6234 0002 45E0     		b	.L594
 6235              	.LVL989:
 6236              	.L612:
 739:./mqtt/source/cJSON.c **** 	{
 740:./mqtt/source/cJSON.c **** 		if (*json==' ') json++;
 6237              		.loc 1 740 0
 6238 0004 202B     		cmp	r3, #32
 6239 0006 01D1     		bne	.L595
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 133


 6240              		.loc 1 740 0 is_stmt 0 discriminator 1
 6241 0008 0130     		adds	r0, r0, #1
 6242              	.LVL990:
 6243 000a 41E0     		b	.L594
 6244              	.L595:
 741:./mqtt/source/cJSON.c **** 		else if (*json=='\t') json++;	/* Whitespace characters. */
 6245              		.loc 1 741 0 is_stmt 1
 6246 000c 092B     		cmp	r3, #9
 6247 000e 01D1     		bne	.L597
 6248              		.loc 1 741 0 is_stmt 0 discriminator 1
 6249 0010 0130     		adds	r0, r0, #1
 6250              	.LVL991:
 6251 0012 3DE0     		b	.L594
 6252              	.L597:
 742:./mqtt/source/cJSON.c **** 		else if (*json=='\r') json++;
 6253              		.loc 1 742 0 is_stmt 1
 6254 0014 0D2B     		cmp	r3, #13
 6255 0016 01D1     		bne	.L598
 6256              		.loc 1 742 0 is_stmt 0 discriminator 1
 6257 0018 0130     		adds	r0, r0, #1
 6258              	.LVL992:
 6259 001a 39E0     		b	.L594
 6260              	.L598:
 743:./mqtt/source/cJSON.c **** 		else if (*json=='\n') json++;
 6261              		.loc 1 743 0 is_stmt 1
 6262 001c 0A2B     		cmp	r3, #10
 6263 001e 01D1     		bne	.L599
 6264              		.loc 1 743 0 is_stmt 0 discriminator 1
 6265 0020 0130     		adds	r0, r0, #1
 6266              	.LVL993:
 6267 0022 35E0     		b	.L594
 6268              	.L599:
 744:./mqtt/source/cJSON.c **** 		else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	/* double-slash commen
 6269              		.loc 1 744 0 is_stmt 1
 6270 0024 2F2B     		cmp	r3, #47
 6271 0026 09D1     		bne	.L600
 6272              		.loc 1 744 0 is_stmt 0 discriminator 1
 6273 0028 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 6274 002a 2F2A     		cmp	r2, #47
 6275 002c 06D1     		bne	.L600
 6276 002e 00E0     		b	.L601
 6277              	.L602:
 6278              		.loc 1 744 0 discriminator 4
 6279 0030 0130     		adds	r0, r0, #1
 6280              	.LVL994:
 6281              	.L601:
 6282              		.loc 1 744 0 discriminator 2
 6283 0032 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6284 0034 63B3     		cbz	r3, .L594
 6285              		.loc 1 744 0 discriminator 3
 6286 0036 0A2B     		cmp	r3, #10
 6287 0038 FAD1     		bne	.L602
 6288 003a 29E0     		b	.L594
 6289              	.L600:
 745:./mqtt/source/cJSON.c **** 		else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+
 6290              		.loc 1 745 0 is_stmt 1
 6291 003c 2F2B     		cmp	r3, #47
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 134


 6292 003e 0DD1     		bne	.L603
 6293              		.loc 1 745 0 is_stmt 0 discriminator 1
 6294 0040 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 6295 0042 2A2A     		cmp	r2, #42
 6296 0044 0AD1     		bne	.L603
 6297 0046 00E0     		b	.L604
 6298              	.L606:
 6299              		.loc 1 745 0 discriminator 7
 6300 0048 0130     		adds	r0, r0, #1
 6301              	.LVL995:
 6302              	.L604:
 6303              		.loc 1 745 0 discriminator 2
 6304 004a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6305 004c 23B1     		cbz	r3, .L605
 6306              		.loc 1 745 0 discriminator 3
 6307 004e 2A2B     		cmp	r3, #42
 6308 0050 FAD1     		bne	.L606
 6309              		.loc 1 745 0 discriminator 6
 6310 0052 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 6311 0054 2F2B     		cmp	r3, #47
 6312 0056 F7D1     		bne	.L606
 6313              	.L605:
 6314              		.loc 1 745 0 discriminator 8
 6315 0058 0230     		adds	r0, r0, #2
 6316              	.LVL996:
 6317 005a 19E0     		b	.L594
 6318              	.L603:
 746:./mqtt/source/cJSON.c **** 		else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json
 6319              		.loc 1 746 0 is_stmt 1
 6320 005c 222B     		cmp	r3, #34
 6321 005e 14D1     		bne	.L607
 6322              		.loc 1 746 0 is_stmt 0 discriminator 1
 6323 0060 4A1C     		adds	r2, r1, #1
 6324              	.LVL997:
 6325 0062 0130     		adds	r0, r0, #1
 6326              	.LVL998:
 6327 0064 0B70     		strb	r3, [r1]
 6328 0066 08E0     		b	.L608
 6329              	.L611:
 6330              		.loc 1 746 0 discriminator 9
 6331 0068 5C2B     		cmp	r3, #92
 6332 006a 02D1     		bne	.L609
 6333              	.LVL999:
 6334              		.loc 1 746 0 discriminator 3
 6335 006c 0130     		adds	r0, r0, #1
 6336              	.LVL1000:
 6337 006e 1370     		strb	r3, [r2]
 6338 0070 0132     		adds	r2, r2, #1
 6339              	.LVL1001:
 6340              	.L609:
 6341              		.loc 1 746 0 discriminator 5
 6342 0072 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6343 0074 1370     		strb	r3, [r2]
 6344 0076 0132     		adds	r2, r2, #1
 6345              	.LVL1002:
 6346 0078 0130     		adds	r0, r0, #1
 6347              	.LVL1003:
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 135


 6348              	.L608:
 6349              		.loc 1 746 0 discriminator 6
 6350 007a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6351 007c 0BB1     		cbz	r3, .L610
 6352              		.loc 1 746 0 discriminator 7
 6353 007e 222B     		cmp	r3, #34
 6354 0080 F2D1     		bne	.L611
 6355              	.L610:
 6356              		.loc 1 746 0 discriminator 10
 6357 0082 511C     		adds	r1, r2, #1
 6358              	.LVL1004:
 6359 0084 0130     		adds	r0, r0, #1
 6360              	.LVL1005:
 6361 0086 1370     		strb	r3, [r2]
 6362 0088 02E0     		b	.L594
 6363              	.L607:
 6364              	.LVL1006:
 747:./mqtt/source/cJSON.c **** 		else *into++=*json++;			/* All other characters. */
 6365              		.loc 1 747 0 is_stmt 1
 6366 008a 0130     		adds	r0, r0, #1
 6367              	.LVL1007:
 6368 008c 0B70     		strb	r3, [r1]
 6369 008e 0131     		adds	r1, r1, #1
 6370              	.LVL1008:
 6371              	.L594:
 738:./mqtt/source/cJSON.c **** 	{
 6372              		.loc 1 738 0
 6373 0090 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6374 0092 002B     		cmp	r3, #0
 6375 0094 B6D1     		bne	.L612
 748:./mqtt/source/cJSON.c **** 	}
 749:./mqtt/source/cJSON.c **** 	*into=0;	/* and null-terminate. */
 6376              		.loc 1 749 0
 6377 0096 0B70     		strb	r3, [r1]
 6378 0098 7047     		bx	lr
 6379              		.cfi_endproc
 6380              	.LFE58:
 6382 009a 00BF     		.section	.rodata.firstByteMark,"a",%progbits
 6383              		.align	2
 6384              		.set	.LANCHOR2,. + 0
 6387              	firstByteMark:
 6388 0000 00       		.byte	0
 6389 0001 00       		.byte	0
 6390 0002 C0       		.byte	-64
 6391 0003 E0       		.byte	-32
 6392 0004 F0       		.byte	-16
 6393 0005 F8       		.byte	-8
 6394 0006 FC       		.byte	-4
 6395              		.section	.data.cJSON_free,"aw",%progbits
 6396              		.align	2
 6397              		.set	.LANCHOR3,. + 0
 6400              	cJSON_free:
 6401 0000 00000000 		.word	free
 6402              		.section	.rodata.str1.4,"aMS",%progbits,1
 6403              		.align	2
 6404              	.LC0:
 6405 0000 6E756C6C 		.ascii	"null\000"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 136


 6405      00
 6406 0005 000000   		.space	3
 6407              	.LC1:
 6408 0008 66616C73 		.ascii	"false\000"
 6408      6500
 6409 000e 0000     		.space	2
 6410              	.LC2:
 6411 0010 74727565 		.ascii	"true\000"
 6411      00
 6412 0015 000000   		.space	3
 6413              	.LC3:
 6414 0018 3000     		.ascii	"0\000"
 6415 001a 0000     		.space	2
 6416              	.LC4:
 6417 001c 256400   		.ascii	"%d\000"
 6418 001f 00       		.space	1
 6419              	.LC5:
 6420 0020 252E3066 		.ascii	"%.0f\000"
 6420      00
 6421 0025 000000   		.space	3
 6422              	.LC6:
 6423 0028 256500   		.ascii	"%e\000"
 6424 002b 00       		.space	1
 6425              	.LC7:
 6426 002c 256600   		.ascii	"%f\000"
 6427 002f 00       		.space	1
 6428              	.LC8:
 6429 0030 222200   		.ascii	"\"\"\000"
 6430 0033 00       		.space	1
 6431              	.LC9:
 6432 0034 225C080C 		.ascii	"\"\\\010\014\012\015\011\000"
 6432      0A0D0900 
 6433              	.LC10:
 6434 003c 75253034 		.ascii	"u%04x\000"
 6434      7800
 6435 0042 0000     		.space	2
 6436              	.LC11:
 6437 0044 5B5D00   		.ascii	"[]\000"
 6438              		.section	.bss.ep,"aw",%nobits
 6439              		.align	2
 6440              		.set	.LANCHOR0,. + 0
 6443              	ep:
 6444 0000 00000000 		.space	4
 6445              		.section	.data.cJSON_malloc,"aw",%progbits
 6446              		.align	2
 6447              		.set	.LANCHOR1,. + 0
 6450              	cJSON_malloc:
 6451 0000 00000000 		.word	malloc
 6452              		.text
 6453              	.Letext0:
 6454              		.file 2 "mqtt/include/cJSON.h"
 6455              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\
 6456              		.file 4 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\string.h"
 6457              		.file 5 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\stdio.h"
 6458              		.file 6 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\math.h"
 6459              		.file 7 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\ctype.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 137


DEFINED SYMBOLS
                            *ABS*:00000000 cJSON.c
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:22     .text.pow2gt:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:26     .text.pow2gt:00000000 pow2gt
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:55     .text.parse_hex4:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:59     .text.parse_hex4:00000000 parse_hex4
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:244    .text.parse_string:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:248    .text.parse_string:00000000 parse_string
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:362    .text.parse_string:00000064 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:382    .text.parse_string:00000078 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:504    .text.parse_string:00000124 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:508    .text.parse_string:00000128 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:608    .text.parse_string:000001a4 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:616    .text.skip:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:620    .text.skip:00000000 skip
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:650    .text.suffix_object:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:654    .text.suffix_object:00000000 suffix_object
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:670    .text.cJSON_New_Item:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:674    .text.cJSON_New_Item:00000000 cJSON_New_Item
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:707    .text.cJSON_New_Item:0000001c $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:717    .text.parse_number:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:721    .text.parse_number:00000000 parse_number
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1011   .text.parse_number:00000198 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1023   .text.parse_value:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1027   .text.parse_value:00000000 parse_value
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1175   .text.parse_array:00000000 parse_array
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1337   .text.parse_object:00000000 parse_object
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1163   .text.parse_value:00000098 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1171   .text.parse_array:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1328   .text.parse_array:00000094 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1333   .text.parse_object:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1565   .text.parse_object:000000f8 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1570   .text.ensure:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1574   .text.ensure:00000000 ensure
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1680   .text.ensure:00000064 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1686   .text.create_reference:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1690   .text.create_reference:00000000 create_reference
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1753   .text.cJSON_strdup:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1757   .text.cJSON_strdup:00000000 cJSON_strdup
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1804   .text.cJSON_strdup:00000028 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1809   .text.update:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1813   .text.update:00000000 update
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1866   .text.print_number:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:1870   .text.print_number:00000000 print_number
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2102   .text.print_number:00000150 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2122   .text.print_string_ptr:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2126   .text.print_string_ptr:00000000 print_string_ptr
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2534   .text.print_string_ptr:000001b0 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2542   .text.print_string:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2546   .text.print_string:00000000 print_string
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2568   .text.print_object:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:2572   .text.print_object:00000000 print_object
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3434   .text.print_value:00000000 print_value
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3171   .text.print_object:000002c4 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3175   .text.print_object:000002cc $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3425   .text.print_object:000003f0 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3430   .text.print_value:00000000 $t
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 138


C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3459   .text.print_value:00000014 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3675   .text.print_array:00000000 print_array
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3566   .text.print_value:00000096 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3664   .text.print_value:000000e8 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3671   .text.print_array:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4126   .text.print_array:00000214 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4133   .text.cJSON_strcasecmp:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4137   .text.cJSON_strcasecmp:00000000 cJSON_strcasecmp
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4268   .text.cJSON_GetErrorPtr:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4273   .text.cJSON_GetErrorPtr:00000000 cJSON_GetErrorPtr
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4287   .text.cJSON_GetErrorPtr:00000008 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4292   .text.cJSON_InitHooks:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4297   .text.cJSON_InitHooks:00000000 cJSON_InitHooks
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4340   .text.cJSON_InitHooks:00000028 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4348   .text.cJSON_Delete:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4353   .text.cJSON_Delete:00000000 cJSON_Delete
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4431   .text.cJSON_Delete:0000004c $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4436   .text.cJSON_ParseWithOpts:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4441   .text.cJSON_ParseWithOpts:00000000 cJSON_ParseWithOpts
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4538   .text.cJSON_ParseWithOpts:0000005c $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4543   .text.cJSON_Parse:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4548   .text.cJSON_Parse:00000000 cJSON_Parse
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4570   .text.cJSON_Print:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4575   .text.cJSON_Print:00000000 cJSON_Print
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4598   .text.cJSON_PrintUnformatted:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4603   .text.cJSON_PrintUnformatted:00000000 cJSON_PrintUnformatted
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4626   .text.cJSON_PrintBuffered:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4631   .text.cJSON_PrintBuffered:00000000 cJSON_PrintBuffered
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4680   .text.cJSON_PrintBuffered:00000028 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4685   .text.cJSON_GetArraySize:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4690   .text.cJSON_GetArraySize:00000000 cJSON_GetArraySize
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4721   .text.cJSON_GetArrayItem:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4726   .text.cJSON_GetArrayItem:00000000 cJSON_GetArrayItem
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4757   .text.cJSON_GetObjectItem:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4762   .text.cJSON_GetObjectItem:00000000 cJSON_GetObjectItem
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4804   .text.cJSON_AddItemToArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4809   .text.cJSON_AddItemToArray:00000000 cJSON_AddItemToArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4862   .text.cJSON_AddItemToObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4867   .text.cJSON_AddItemToObject:00000000 cJSON_AddItemToObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4918   .text.cJSON_AddItemToObject:00000028 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4923   .text.cJSON_AddItemToObjectCS:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4928   .text.cJSON_AddItemToObjectCS:00000000 cJSON_AddItemToObjectCS
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4983   .text.cJSON_AddItemToObjectCS:00000034 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4988   .text.cJSON_AddItemReferenceToArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:4993   .text.cJSON_AddItemReferenceToArray:00000000 cJSON_AddItemReferenceToArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5020   .text.cJSON_AddItemReferenceToObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5025   .text.cJSON_AddItemReferenceToObject:00000000 cJSON_AddItemReferenceToObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5056   .text.cJSON_DetachItemFromArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5061   .text.cJSON_DetachItemFromArray:00000000 cJSON_DetachItemFromArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5129   .text.cJSON_DeleteItemFromArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5134   .text.cJSON_DeleteItemFromArray:00000000 cJSON_DeleteItemFromArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5156   .text.cJSON_DetachItemFromObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5161   .text.cJSON_DetachItemFromObject:00000000 cJSON_DetachItemFromObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5220   .text.cJSON_DeleteItemFromObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5225   .text.cJSON_DeleteItemFromObject:00000000 cJSON_DeleteItemFromObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5247   .text.cJSON_InsertItemInArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5252   .text.cJSON_InsertItemInArray:00000000 cJSON_InsertItemInArray
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 139


C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5314   .text.cJSON_ReplaceItemInArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5319   .text.cJSON_ReplaceItemInArray:00000000 cJSON_ReplaceItemInArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5393   .text.cJSON_ReplaceItemInObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5398   .text.cJSON_ReplaceItemInObject:00000000 cJSON_ReplaceItemInObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5459   .text.cJSON_CreateNull:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5464   .text.cJSON_CreateNull:00000000 cJSON_CreateNull
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5492   .text.cJSON_CreateTrue:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5497   .text.cJSON_CreateTrue:00000000 cJSON_CreateTrue
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5525   .text.cJSON_CreateFalse:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5530   .text.cJSON_CreateFalse:00000000 cJSON_CreateFalse
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5558   .text.cJSON_CreateBool:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5563   .text.cJSON_CreateBool:00000000 cJSON_CreateBool
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5596   .text.cJSON_CreateNumber:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5601   .text.cJSON_CreateNumber:00000000 cJSON_CreateNumber
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5648   .text.cJSON_CreateString:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5653   .text.cJSON_CreateString:00000000 cJSON_CreateString
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5689   .text.cJSON_CreateArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5694   .text.cJSON_CreateArray:00000000 cJSON_CreateArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5722   .text.cJSON_CreateObject:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5727   .text.cJSON_CreateObject:00000000 cJSON_CreateObject
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5755   .text.cJSON_CreateIntArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5760   .text.cJSON_CreateIntArray:00000000 cJSON_CreateIntArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5832   .text.cJSON_CreateFloatArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5837   .text.cJSON_CreateFloatArray:00000000 cJSON_CreateFloatArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5909   .text.cJSON_CreateDoubleArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5914   .text.cJSON_CreateDoubleArray:00000000 cJSON_CreateDoubleArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5983   .text.cJSON_CreateStringArray:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:5988   .text.cJSON_CreateStringArray:00000000 cJSON_CreateStringArray
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6056   .text.cJSON_Duplicate:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6061   .text.cJSON_Duplicate:00000000 cJSON_Duplicate
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6218   .text.cJSON_Minify:00000000 $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6223   .text.cJSON_Minify:00000000 cJSON_Minify
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6383   .rodata.firstByteMark:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6387   .rodata.firstByteMark:00000000 firstByteMark
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6396   .data.cJSON_free:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6400   .data.cJSON_free:00000000 cJSON_free
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6403   .rodata.str1.4:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6439   .bss.ep:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6443   .bss.ep:00000000 ep
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6446   .data.cJSON_malloc:00000000 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:6450   .data.cJSON_malloc:00000000 cJSON_malloc
                     .debug_frame:00000010 $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3466   .text.print_value:0000001b $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3466   .text.print_value:0000001c $t
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3573   .text.print_value:0000009d $d
C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s:3573   .text.print_value:0000009e $t

UNDEFINED SYMBOLS
memset
__aeabi_dmul
__aeabi_i2d
__aeabi_dadd
__aeabi_dsub
__aeabi_d2iz
pow
strncmp
memcpy
ARM GAS  C:\Users\strag\AppData\Local\Temp\ccdaIcxv.s 			page 140


strlen
__aeabi_dcmpeq
__aeabi_dcmple
__aeabi_dcmpge
__aeabi_dcmplt
__aeabi_dcmpgt
sprintf
floor
strcpy
strchr
__locale_ctype_ptr
malloc
free
__aeabi_f2d
